# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


# Copyright (c) 2013-2020, NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#

from __future__ import print_function



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nvcameratools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nvcameratools')
    _nvcameratools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nvcameratools', [dirname(__file__)])
        except ImportError:
            import _nvcameratools
            return _nvcameratools
        try:
            _mod = imp.load_module('_nvcameratools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nvcameratools = swig_import_helper()
    del swig_import_helper
else:
    import _nvcameratools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def SWIG_strnlen(s, maxlen):
    return _nvcameratools.SWIG_strnlen(s, maxlen)
SWIG_strnlen = _nvcameratools.SWIG_strnlen
NV_FALSE = _nvcameratools.NV_FALSE
NV_TRUE = _nvcameratools.NV_TRUE
class NvSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvSize, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _nvcameratools.NvSize_width_set
    __swig_getmethods__["width"] = _nvcameratools.NvSize_width_get
    if _newclass:
        width = _swig_property(_nvcameratools.NvSize_width_get, _nvcameratools.NvSize_width_set)
    __swig_setmethods__["height"] = _nvcameratools.NvSize_height_set
    __swig_getmethods__["height"] = _nvcameratools.NvSize_height_get
    if _newclass:
        height = _swig_property(_nvcameratools.NvSize_height_get, _nvcameratools.NvSize_height_set)

    def __init__(self):
        this = _nvcameratools.new_NvSize()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvSize
    __del__ = lambda self: None
NvSize_swigregister = _nvcameratools.NvSize_swigregister
NvSize_swigregister(NvSize)

class NvRect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _nvcameratools.NvRect_left_set
    __swig_getmethods__["left"] = _nvcameratools.NvRect_left_get
    if _newclass:
        left = _swig_property(_nvcameratools.NvRect_left_get, _nvcameratools.NvRect_left_set)
    __swig_setmethods__["top"] = _nvcameratools.NvRect_top_set
    __swig_getmethods__["top"] = _nvcameratools.NvRect_top_get
    if _newclass:
        top = _swig_property(_nvcameratools.NvRect_top_get, _nvcameratools.NvRect_top_set)
    __swig_setmethods__["right"] = _nvcameratools.NvRect_right_set
    __swig_getmethods__["right"] = _nvcameratools.NvRect_right_get
    if _newclass:
        right = _swig_property(_nvcameratools.NvRect_right_get, _nvcameratools.NvRect_right_set)
    __swig_setmethods__["bottom"] = _nvcameratools.NvRect_bottom_set
    __swig_getmethods__["bottom"] = _nvcameratools.NvRect_bottom_get
    if _newclass:
        bottom = _swig_property(_nvcameratools.NvRect_bottom_get, _nvcameratools.NvRect_bottom_set)

    def __init__(self):
        this = _nvcameratools.new_NvRect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvRect
    __del__ = lambda self: None
NvRect_swigregister = _nvcameratools.NvRect_swigregister
NvRect_swigregister(NvRect)

NvColorFormat_Unspecified = _nvcameratools.NvColorFormat_Unspecified
NvColorFormat_R3G3B2 = _nvcameratools.NvColorFormat_R3G3B2
NvColorFormat_A4R4G4B4 = _nvcameratools.NvColorFormat_A4R4G4B4
NvColorFormat_R4G4B4A4 = _nvcameratools.NvColorFormat_R4G4B4A4
NvColorFormat_A1R5G5B5 = _nvcameratools.NvColorFormat_A1R5G5B5
NvColorFormat_R5G5B5A1 = _nvcameratools.NvColorFormat_R5G5B5A1
NvColorFormat_R5G6B5 = _nvcameratools.NvColorFormat_R5G6B5
NvColorFormat_R8_G8_B8 = _nvcameratools.NvColorFormat_R8_G8_B8
NvColorFormat_B8_G8_R8 = _nvcameratools.NvColorFormat_B8_G8_R8
NvColorFormat_A8R8G8B8 = _nvcameratools.NvColorFormat_A8R8G8B8
NvColorFormat_A8B8G8R8 = _nvcameratools.NvColorFormat_A8B8G8R8
NvColorFormat_R8G8B8A8 = _nvcameratools.NvColorFormat_R8G8B8A8
NvColorFormat_B8G8R8A8 = _nvcameratools.NvColorFormat_B8G8R8A8
NvColorFormat_X8R8G8B8 = _nvcameratools.NvColorFormat_X8R8G8B8
NvColorFormat_R8G8B8X8 = _nvcameratools.NvColorFormat_R8G8B8X8
NvColorFormat_X8B8G8R8 = _nvcameratools.NvColorFormat_X8B8G8R8
NvColorFormat_B8G8R8X8 = _nvcameratools.NvColorFormat_B8G8R8X8
NvColorFormat_Float_B10G11R11 = _nvcameratools.NvColorFormat_Float_B10G11R11
NvColorFormat_Float_A16B16G16R16 = _nvcameratools.NvColorFormat_Float_A16B16G16R16
NvColorFormat_Float_X16B16G16R16 = _nvcameratools.NvColorFormat_Float_X16B16G16R16
NvColorFormat_L1 = _nvcameratools.NvColorFormat_L1
NvColorFormat_L2 = _nvcameratools.NvColorFormat_L2
NvColorFormat_L4 = _nvcameratools.NvColorFormat_L4
NvColorFormat_L8 = _nvcameratools.NvColorFormat_L8
NvColorFormat_L16 = _nvcameratools.NvColorFormat_L16
NvColorFormat_L32 = _nvcameratools.NvColorFormat_L32
NvColorFormat_Float_L16 = _nvcameratools.NvColorFormat_Float_L16
NvColorFormat_Float_A16L16 = _nvcameratools.NvColorFormat_Float_A16L16
NvColorFormat_A1 = _nvcameratools.NvColorFormat_A1
NvColorFormat_A2 = _nvcameratools.NvColorFormat_A2
NvColorFormat_A4 = _nvcameratools.NvColorFormat_A4
NvColorFormat_A8 = _nvcameratools.NvColorFormat_A8
NvColorFormat_A16 = _nvcameratools.NvColorFormat_A16
NvColorFormat_A32 = _nvcameratools.NvColorFormat_A32
NvColorFormat_Float_A16 = _nvcameratools.NvColorFormat_Float_A16
NvColorFormat_I1 = _nvcameratools.NvColorFormat_I1
NvColorFormat_I2 = _nvcameratools.NvColorFormat_I2
NvColorFormat_I4 = _nvcameratools.NvColorFormat_I4
NvColorFormat_I8 = _nvcameratools.NvColorFormat_I8
NvColorFormat_Y8_U8_V8 = _nvcameratools.NvColorFormat_Y8_U8_V8
NvColorFormat_UYVY = _nvcameratools.NvColorFormat_UYVY
NvColorFormat_VYUY = _nvcameratools.NvColorFormat_VYUY
NvColorFormat_YUYV = _nvcameratools.NvColorFormat_YUYV
NvColorFormat_YVYU = _nvcameratools.NvColorFormat_YVYU
NvColorFormat_Y8_U8_V8_ER = _nvcameratools.NvColorFormat_Y8_U8_V8_ER
NvColorFormat_UYVY_ER = _nvcameratools.NvColorFormat_UYVY_ER
NvColorFormat_VYUY_ER = _nvcameratools.NvColorFormat_VYUY_ER
NvColorFormat_YUYV_ER = _nvcameratools.NvColorFormat_YUYV_ER
NvColorFormat_YVYU_ER = _nvcameratools.NvColorFormat_YVYU_ER
NvColorFormat_Y8 = _nvcameratools.NvColorFormat_Y8
NvColorFormat_U8 = _nvcameratools.NvColorFormat_U8
NvColorFormat_V8 = _nvcameratools.NvColorFormat_V8
NvColorFormat_U8_V8 = _nvcameratools.NvColorFormat_U8_V8
NvColorFormat_V8_U8 = _nvcameratools.NvColorFormat_V8_U8
NvColorFormat_Y8_ER = _nvcameratools.NvColorFormat_Y8_ER
NvColorFormat_U8_ER = _nvcameratools.NvColorFormat_U8_ER
NvColorFormat_V8_ER = _nvcameratools.NvColorFormat_V8_ER
NvColorFormat_U8_V8_ER = _nvcameratools.NvColorFormat_U8_V8_ER
NvColorFormat_V8_U8_ER = _nvcameratools.NvColorFormat_V8_U8_ER
NvColorFormat_Y8_RR = _nvcameratools.NvColorFormat_Y8_RR
NvColorFormat_U8_RR = _nvcameratools.NvColorFormat_U8_RR
NvColorFormat_V8_RR = _nvcameratools.NvColorFormat_V8_RR
NvColorFormat_U8_V8_RR = _nvcameratools.NvColorFormat_U8_V8_RR
NvColorFormat_Bayer8RGGB = _nvcameratools.NvColorFormat_Bayer8RGGB
NvColorFormat_Bayer8BGGR = _nvcameratools.NvColorFormat_Bayer8BGGR
NvColorFormat_Bayer8GRBG = _nvcameratools.NvColorFormat_Bayer8GRBG
NvColorFormat_Bayer8GBRG = _nvcameratools.NvColorFormat_Bayer8GBRG
NvColorFormat_X6Bayer10RGGB = _nvcameratools.NvColorFormat_X6Bayer10RGGB
NvColorFormat_X6Bayer10BGGR = _nvcameratools.NvColorFormat_X6Bayer10BGGR
NvColorFormat_X6Bayer10GRBG = _nvcameratools.NvColorFormat_X6Bayer10GRBG
NvColorFormat_X6Bayer10GBRG = _nvcameratools.NvColorFormat_X6Bayer10GBRG
NvColorFormat_X4Bayer12RGGB = _nvcameratools.NvColorFormat_X4Bayer12RGGB
NvColorFormat_X4Bayer12BGGR = _nvcameratools.NvColorFormat_X4Bayer12BGGR
NvColorFormat_X4Bayer12GRBG = _nvcameratools.NvColorFormat_X4Bayer12GRBG
NvColorFormat_X4Bayer12GBRG = _nvcameratools.NvColorFormat_X4Bayer12GBRG
NvColorFormat_X2Bayer14RGGB = _nvcameratools.NvColorFormat_X2Bayer14RGGB
NvColorFormat_X2Bayer14BGGR = _nvcameratools.NvColorFormat_X2Bayer14BGGR
NvColorFormat_X2Bayer14GRBG = _nvcameratools.NvColorFormat_X2Bayer14GRBG
NvColorFormat_X2Bayer14GBRG = _nvcameratools.NvColorFormat_X2Bayer14GBRG
NvColorFormat_Bayer16RGGB = _nvcameratools.NvColorFormat_Bayer16RGGB
NvColorFormat_Bayer16BGGR = _nvcameratools.NvColorFormat_Bayer16BGGR
NvColorFormat_Bayer16GRBG = _nvcameratools.NvColorFormat_Bayer16GRBG
NvColorFormat_Bayer16GBRG = _nvcameratools.NvColorFormat_Bayer16GBRG
NvColorFormat_X4C4 = _nvcameratools.NvColorFormat_X4C4
NvColorFormat_NonColor8 = _nvcameratools.NvColorFormat_NonColor8
NvColorFormat_NonColor16 = _nvcameratools.NvColorFormat_NonColor16
NvColorFormat_NonColor24 = _nvcameratools.NvColorFormat_NonColor24
NvColorFormat_NonColor32 = _nvcameratools.NvColorFormat_NonColor32
class NvMMCameraSensorMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvMMCameraSensorMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvMMCameraSensorMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Resolution"] = _nvcameratools.NvMMCameraSensorMode_Resolution_set
    __swig_getmethods__["Resolution"] = _nvcameratools.NvMMCameraSensorMode_Resolution_get
    if _newclass:
        Resolution = _swig_property(_nvcameratools.NvMMCameraSensorMode_Resolution_get, _nvcameratools.NvMMCameraSensorMode_Resolution_set)
    __swig_setmethods__["FrameRate"] = _nvcameratools.NvMMCameraSensorMode_FrameRate_set
    __swig_getmethods__["FrameRate"] = _nvcameratools.NvMMCameraSensorMode_FrameRate_get
    if _newclass:
        FrameRate = _swig_property(_nvcameratools.NvMMCameraSensorMode_FrameRate_get, _nvcameratools.NvMMCameraSensorMode_FrameRate_set)
    __swig_setmethods__["ColorFormat"] = _nvcameratools.NvMMCameraSensorMode_ColorFormat_set
    __swig_getmethods__["ColorFormat"] = _nvcameratools.NvMMCameraSensorMode_ColorFormat_get
    if _newclass:
        ColorFormat = _swig_property(_nvcameratools.NvMMCameraSensorMode_ColorFormat_get, _nvcameratools.NvMMCameraSensorMode_ColorFormat_set)

    def __init__(self):
        this = _nvcameratools.new_NvMMCameraSensorMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvMMCameraSensorMode
    __del__ = lambda self: None
NvMMCameraSensorMode_swigregister = _nvcameratools.NvMMCameraSensorMode_swigregister
NvMMCameraSensorMode_swigregister(NvMMCameraSensorMode)

NvCameraCoreUseCase_Preview = _nvcameratools.NvCameraCoreUseCase_Preview
NvCameraCoreUseCase_Still = _nvcameratools.NvCameraCoreUseCase_Still
NvCameraCoreUseCase_Video = _nvcameratools.NvCameraCoreUseCase_Video
NvCameraCoreUseCase_VideoSnapshot = _nvcameratools.NvCameraCoreUseCase_VideoSnapshot
NvCameraCoreUseCase_ZSL = _nvcameratools.NvCameraCoreUseCase_ZSL
NvCameraCoreUseCase_Force32 = _nvcameratools.NvCameraCoreUseCase_Force32
NvError_Success = _nvcameratools.NvError_Success
NvError_NotImplemented = _nvcameratools.NvError_NotImplemented
NvError_NotSupported = _nvcameratools.NvError_NotSupported
NvError_NotInitialized = _nvcameratools.NvError_NotInitialized
NvError_BadParameter = _nvcameratools.NvError_BadParameter
NvError_Timeout = _nvcameratools.NvError_Timeout
NvError_InsufficientMemory = _nvcameratools.NvError_InsufficientMemory
NvError_ReadOnlyAttribute = _nvcameratools.NvError_ReadOnlyAttribute
NvError_InvalidState = _nvcameratools.NvError_InvalidState
NvError_InvalidAddress = _nvcameratools.NvError_InvalidAddress
NvError_InvalidSize = _nvcameratools.NvError_InvalidSize
NvError_BadValue = _nvcameratools.NvError_BadValue
NvError_AlreadyAllocated = _nvcameratools.NvError_AlreadyAllocated
NvError_Busy = _nvcameratools.NvError_Busy
NvError_ModuleNotPresent = _nvcameratools.NvError_ModuleNotPresent
NvError_ResourceError = _nvcameratools.NvError_ResourceError
NvError_CountMismatch = _nvcameratools.NvError_CountMismatch
NvError_InsufficientVideoMemory = _nvcameratools.NvError_InsufficientVideoMemory
NvError_BadSurfaceColorScheme = _nvcameratools.NvError_BadSurfaceColorScheme
NvError_InvalidSurface = _nvcameratools.NvError_InvalidSurface
NvError_SurfaceNotSupported = _nvcameratools.NvError_SurfaceNotSupported
NvError_DispInitFailed = _nvcameratools.NvError_DispInitFailed
NvError_DispAlreadyAttached = _nvcameratools.NvError_DispAlreadyAttached
NvError_DispTooManyDisplays = _nvcameratools.NvError_DispTooManyDisplays
NvError_DispNoDisplaysAttached = _nvcameratools.NvError_DispNoDisplaysAttached
NvError_DispModeNotSupported = _nvcameratools.NvError_DispModeNotSupported
NvError_DispNotFound = _nvcameratools.NvError_DispNotFound
NvError_DispAttachDissallowed = _nvcameratools.NvError_DispAttachDissallowed
NvError_DispTypeNotSupported = _nvcameratools.NvError_DispTypeNotSupported
NvError_DispAuthenticationFailed = _nvcameratools.NvError_DispAuthenticationFailed
NvError_DispNotAttached = _nvcameratools.NvError_DispNotAttached
NvError_DispSamePwrState = _nvcameratools.NvError_DispSamePwrState
NvError_DispEdidFailure = _nvcameratools.NvError_DispEdidFailure
NvError_DispDsiReadAckError = _nvcameratools.NvError_DispDsiReadAckError
NvError_DispDsiReadInvalidResp = _nvcameratools.NvError_DispDsiReadInvalidResp
NvError_FileWriteFailed = _nvcameratools.NvError_FileWriteFailed
NvError_FileReadFailed = _nvcameratools.NvError_FileReadFailed
NvError_EndOfFile = _nvcameratools.NvError_EndOfFile
NvError_FileOperationFailed = _nvcameratools.NvError_FileOperationFailed
NvError_DirOperationFailed = _nvcameratools.NvError_DirOperationFailed
NvError_EndOfDirList = _nvcameratools.NvError_EndOfDirList
NvError_ConfigVarNotFound = _nvcameratools.NvError_ConfigVarNotFound
NvError_InvalidConfigVar = _nvcameratools.NvError_InvalidConfigVar
NvError_LibraryNotFound = _nvcameratools.NvError_LibraryNotFound
NvError_SymbolNotFound = _nvcameratools.NvError_SymbolNotFound
NvError_MemoryMapFailed = _nvcameratools.NvError_MemoryMapFailed
NvError_IoctlFailed = _nvcameratools.NvError_IoctlFailed
NvError_AccessDenied = _nvcameratools.NvError_AccessDenied
NvError_DeviceNotFound = _nvcameratools.NvError_DeviceNotFound
NvError_KernelDriverNotFound = _nvcameratools.NvError_KernelDriverNotFound
NvError_FileNotFound = _nvcameratools.NvError_FileNotFound
NvError_SpiReceiveError = _nvcameratools.NvError_SpiReceiveError
NvError_SpiTransmitError = _nvcameratools.NvError_SpiTransmitError
NvError_HsmmcCardNotPresent = _nvcameratools.NvError_HsmmcCardNotPresent
NvError_HsmmcControllerBusy = _nvcameratools.NvError_HsmmcControllerBusy
NvError_HsmmcAutoDetectCard = _nvcameratools.NvError_HsmmcAutoDetectCard
NvError_SdioCardNotPresent = _nvcameratools.NvError_SdioCardNotPresent
NvError_SdioInstanceTaken = _nvcameratools.NvError_SdioInstanceTaken
NvError_SdioControllerBusy = _nvcameratools.NvError_SdioControllerBusy
NvError_SdioReadFailed = _nvcameratools.NvError_SdioReadFailed
NvError_SdioWriteFailed = _nvcameratools.NvError_SdioWriteFailed
NvError_SdioBadBlockSize = _nvcameratools.NvError_SdioBadBlockSize
NvError_SdioClockNotConfigured = _nvcameratools.NvError_SdioClockNotConfigured
NvError_SdioSdhcPatternIntegrityFailed = _nvcameratools.NvError_SdioSdhcPatternIntegrityFailed
NvError_SdioCommandFailed = _nvcameratools.NvError_SdioCommandFailed
NvError_SdioCardAlwaysPresent = _nvcameratools.NvError_SdioCardAlwaysPresent
NvError_SdioAutoDetectCard = _nvcameratools.NvError_SdioAutoDetectCard
NvError_UsbInvalidEndpoint = _nvcameratools.NvError_UsbInvalidEndpoint
NvError_UsbfTxfrActive = _nvcameratools.NvError_UsbfTxfrActive
NvError_UsbfTxfrComplete = _nvcameratools.NvError_UsbfTxfrComplete
NvError_UsbfTxfrFail = _nvcameratools.NvError_UsbfTxfrFail
NvError_UsbfEpStalled = _nvcameratools.NvError_UsbfEpStalled
NvError_UsbfCableDisConnected = _nvcameratools.NvError_UsbfCableDisConnected
NvError_UartOverrun = _nvcameratools.NvError_UartOverrun
NvError_UartFraming = _nvcameratools.NvError_UartFraming
NvError_UartParity = _nvcameratools.NvError_UartParity
NvError_UartBreakReceived = _nvcameratools.NvError_UartBreakReceived
NvError_I2cReadFailed = _nvcameratools.NvError_I2cReadFailed
NvError_I2cWriteFailed = _nvcameratools.NvError_I2cWriteFailed
NvError_I2cDeviceNotFound = _nvcameratools.NvError_I2cDeviceNotFound
NvError_I2cInternalError = _nvcameratools.NvError_I2cInternalError
NvError_I2cArbitrationFailed = _nvcameratools.NvError_I2cArbitrationFailed
NvError_IdeHwError = _nvcameratools.NvError_IdeHwError
NvError_IdeReadError = _nvcameratools.NvError_IdeReadError
NvError_IdeWriteError = _nvcameratools.NvError_IdeWriteError
NvError_OwrReadFailed = _nvcameratools.NvError_OwrReadFailed
NvError_OwrWriteFailed = _nvcameratools.NvError_OwrWriteFailed
NvError_OwrBitTransferFailed = _nvcameratools.NvError_OwrBitTransferFailed
NvError_OwrInvalidOffset = _nvcameratools.NvError_OwrInvalidOffset
NvError_InvalidOperation = _nvcameratools.NvError_InvalidOperation
NvError_RmInitFailed = _nvcameratools.NvError_RmInitFailed
NvError_RmChannelInitFailure = _nvcameratools.NvError_RmChannelInitFailure
NvError_RmStreamInitFailure = _nvcameratools.NvError_RmStreamInitFailure
NvError_RmSyncPointAllocFailure = _nvcameratools.NvError_RmSyncPointAllocFailure
NvError_ResourceAlreadyInUse = _nvcameratools.NvError_ResourceAlreadyInUse
NvError_DmaBusy = _nvcameratools.NvError_DmaBusy
NvError_InvalidSourceId = _nvcameratools.NvError_InvalidSourceId
NvError_DmaChannelNotAvailable = _nvcameratools.NvError_DmaChannelNotAvailable
NvError_NoConnectedImager = _nvcameratools.NvError_NoConnectedImager
NvError_UnsupportedResolution = _nvcameratools.NvError_UnsupportedResolution
NvError_I2CCommunicationError = _nvcameratools.NvError_I2CCommunicationError
NvError_IspConfigFileParseError = _nvcameratools.NvError_IspConfigFileParseError
NvError_TooDark = _nvcameratools.NvError_TooDark
NvError_InvalidIspConfigAttribute = _nvcameratools.NvError_InvalidIspConfigAttribute
NvError_InvalidIspConfigAttributeElement = _nvcameratools.NvError_InvalidIspConfigAttributeElement
NvError_IspConfigSyntaxError = _nvcameratools.NvError_IspConfigSyntaxError
NvError_ImagerVersionNotSupported = _nvcameratools.NvError_ImagerVersionNotSupported
NvError_CorruptedBuffer = _nvcameratools.NvError_CorruptedBuffer
NvError_UnderConfident = _nvcameratools.NvError_UnderConfident
NvError_TestApplicationFailed = _nvcameratools.NvError_TestApplicationFailed
NvError_TestNoUserInput = _nvcameratools.NvError_TestNoUserInput
NvError_TestCommandLineError = _nvcameratools.NvError_TestCommandLineError
NvError_TestDataVerificationFailed = _nvcameratools.NvError_TestDataVerificationFailed
NvError_TestServerFileReadFailed = _nvcameratools.NvError_TestServerFileReadFailed
NvError_TestServerInvalidAddress = _nvcameratools.NvError_TestServerInvalidAddress
NvError_TestServerMemoryLimitExceeded = _nvcameratools.NvError_TestServerMemoryLimitExceeded
NvError_ColorFormatNotSupported = _nvcameratools.NvError_ColorFormatNotSupported
NvError_TransportPortAlreadyExist = _nvcameratools.NvError_TransportPortAlreadyExist
NvError_TransportMessageBoxEmpty = _nvcameratools.NvError_TransportMessageBoxEmpty
NvError_TransportMessageBoxFull = _nvcameratools.NvError_TransportMessageBoxFull
NvError_TransportConnectionFailed = _nvcameratools.NvError_TransportConnectionFailed
NvError_TransportNotConnected = _nvcameratools.NvError_TransportNotConnected
NvError_NandReadFailed = _nvcameratools.NvError_NandReadFailed
NvError_NandProgramFailed = _nvcameratools.NvError_NandProgramFailed
NvError_NandEraseFailed = _nvcameratools.NvError_NandEraseFailed
NvError_NandCopyBackFailed = _nvcameratools.NvError_NandCopyBackFailed
NvError_NandOperationFailed = _nvcameratools.NvError_NandOperationFailed
NvError_NandBusy = _nvcameratools.NvError_NandBusy
NvError_NandNotOpened = _nvcameratools.NvError_NandNotOpened
NvError_NandAlreadyOpened = _nvcameratools.NvError_NandAlreadyOpened
NvError_NandBadOperationRequest = _nvcameratools.NvError_NandBadOperationRequest
NvError_NandCommandQueueError = _nvcameratools.NvError_NandCommandQueueError
NvError_NandReadEccFailed = _nvcameratools.NvError_NandReadEccFailed
NvError_NandFlashNotSupported = _nvcameratools.NvError_NandFlashNotSupported
NvError_NandLockFailed = _nvcameratools.NvError_NandLockFailed
NvError_NandErrorThresholdReached = _nvcameratools.NvError_NandErrorThresholdReached
NvError_NandWriteFailed = _nvcameratools.NvError_NandWriteFailed
NvError_NandBadBlock = _nvcameratools.NvError_NandBadBlock
NvError_NandBadState = _nvcameratools.NvError_NandBadState
NvError_NandBlockIsLocked = _nvcameratools.NvError_NandBlockIsLocked
NvError_NandNoFreeBlock = _nvcameratools.NvError_NandNoFreeBlock
NvError_NandTTFailed = _nvcameratools.NvError_NandTTFailed
NvError_NandTLFailed = _nvcameratools.NvError_NandTLFailed
NvError_NandTLNoBlockAssigned = _nvcameratools.NvError_NandTLNoBlockAssigned
NvError_WinSysBadDisplay = _nvcameratools.NvError_WinSysBadDisplay
NvError_WinSysNoDevice = _nvcameratools.NvError_WinSysNoDevice
NvError_WinSysBadDrawable = _nvcameratools.NvError_WinSysBadDrawable
NvError_BLServerFileReadFailed = _nvcameratools.NvError_BLServerFileReadFailed
NvError_BLServerInvalidAddress = _nvcameratools.NvError_BLServerInvalidAddress
NvError_BLServerInvalidElfFile = _nvcameratools.NvError_BLServerInvalidElfFile
NvError_BLServerConnectionFailed = _nvcameratools.NvError_BLServerConnectionFailed
NvError_BLServerMemoryLimitExceeded = _nvcameratools.NvError_BLServerMemoryLimitExceeded
NvError_AudioMixerPinTypeNotSupported = _nvcameratools.NvError_AudioMixerPinTypeNotSupported
NvError_AudioMixerDirectionNotSupported = _nvcameratools.NvError_AudioMixerDirectionNotSupported
NvError_AudioMixerNoMorePinsAvailable = _nvcameratools.NvError_AudioMixerNoMorePinsAvailable
NvError_AudioMixerBadPinNumber = _nvcameratools.NvError_AudioMixerBadPinNumber
NvError_VideoEncResolutionNotSupported = _nvcameratools.NvError_VideoEncResolutionNotSupported
NvError_JPEGEncHWError = _nvcameratools.NvError_JPEGEncHWError
NvError_VideoDecRetainLock = _nvcameratools.NvError_VideoDecRetainLock
NvError_VideoDecMataDataFound = _nvcameratools.NvError_VideoDecMataDataFound
NvError_VideoDecFrameDecoded = _nvcameratools.NvError_VideoDecFrameDecoded
NvError_VideoDecDecodedPartialFrame = _nvcameratools.NvError_VideoDecDecodedPartialFrame
NvError_VideoDecInsufficientBitstream = _nvcameratools.NvError_VideoDecInsufficientBitstream
NvError_VideoDecOutputSurfaceUnavailable = _nvcameratools.NvError_VideoDecOutputSurfaceUnavailable
NvError_VideoDecUnsupportedStreamFormat = _nvcameratools.NvError_VideoDecUnsupportedStreamFormat
NvError_VideoDecFrameDecodedPlusVideoDecEvent = _nvcameratools.NvError_VideoDecFrameDecodedPlusVideoDecEvent
NvError_VideoDecFailed = _nvcameratools.NvError_VideoDecFailed
NvError_VideoDecDecodingComplete = _nvcameratools.NvError_VideoDecDecodingComplete
NvError_VideoDecProvideNextIPBuffer = _nvcameratools.NvError_VideoDecProvideNextIPBuffer
NvError_VideoDecProvideCurrentIPBuffer = _nvcameratools.NvError_VideoDecProvideCurrentIPBuffer
NvError_VideoDecBypassMoreWork = _nvcameratools.NvError_VideoDecBypassMoreWork
NvError_PipeNotConnected = _nvcameratools.NvError_PipeNotConnected
NvError_ReadQNotCreated = _nvcameratools.NvError_ReadQNotCreated
NvError_ParserEndOfStream = _nvcameratools.NvError_ParserEndOfStream
NvError_ParserFailedToGetData = _nvcameratools.NvError_ParserFailedToGetData
NvError_InSufficientBufferSize = _nvcameratools.NvError_InSufficientBufferSize
NvError_ParserReadFailure = _nvcameratools.NvError_ParserReadFailure
NvError_ParserOpenFailure = _nvcameratools.NvError_ParserOpenFailure
NvError_UnSupportedStream = _nvcameratools.NvError_UnSupportedStream
NvError_ParserFailure = _nvcameratools.NvError_ParserFailure
NvError_ParserHeaderDecodeNotComplete = _nvcameratools.NvError_ParserHeaderDecodeNotComplete
NvError_ParserCloseFailure = _nvcameratools.NvError_ParserCloseFailure
NvError_ParserMarkerHit = _nvcameratools.NvError_ParserMarkerHit
NvError_ParserCorruptedStream = _nvcameratools.NvError_ParserCorruptedStream
NvError_ParserDRMLicenseNotFound = _nvcameratools.NvError_ParserDRMLicenseNotFound
NvError_ParserDRMFailure = _nvcameratools.NvError_ParserDRMFailure
NvError_ParserSeekUnSupported = _nvcameratools.NvError_ParserSeekUnSupported
NvError_ParserTrickModeUnSupported = _nvcameratools.NvError_ParserTrickModeUnSupported
NvError_ParserCoreNotCreated = _nvcameratools.NvError_ParserCoreNotCreated
NvError_UnSupported_VideoStream = _nvcameratools.NvError_UnSupported_VideoStream
NvError_UnSupported_AudioStream = _nvcameratools.NvError_UnSupported_AudioStream
NvError_ParserTruncatedFile = _nvcameratools.NvError_ParserTruncatedFile
NvError_ParserOffsetsNotFound = _nvcameratools.NvError_ParserOffsetsNotFound
NvError_WriterOpenFailure = _nvcameratools.NvError_WriterOpenFailure
NvError_WriterUnsupportedStream = _nvcameratools.NvError_WriterUnsupportedStream
NvError_WriterUnsupportedUserData = _nvcameratools.NvError_WriterUnsupportedUserData
NvError_WriterFileSizeLimitExceeded = _nvcameratools.NvError_WriterFileSizeLimitExceeded
NvError_WriterInsufficientMemory = _nvcameratools.NvError_WriterInsufficientMemory
NvError_WriterFailure = _nvcameratools.NvError_WriterFailure
NvError_WriterCloseFailure = _nvcameratools.NvError_WriterCloseFailure
NvError_WriterInitFailure = _nvcameratools.NvError_WriterInitFailure
NvError_WriterFileWriteLimitExceeded = _nvcameratools.NvError_WriterFileWriteLimitExceeded
NvError_WriterTimeLimitExceeded = _nvcameratools.NvError_WriterTimeLimitExceeded
NvError_ContentPipeNoData = _nvcameratools.NvError_ContentPipeNoData
NvError_ContentPipeNoFreeBuffers = _nvcameratools.NvError_ContentPipeNoFreeBuffers
NvError_ContentPipeSpareAreaInUse = _nvcameratools.NvError_ContentPipeSpareAreaInUse
NvError_ContentPipeEndOfStream = _nvcameratools.NvError_ContentPipeEndOfStream
NvError_ContentPipeNotReady = _nvcameratools.NvError_ContentPipeNotReady
NvError_ContentPipeInNonCachingMode = _nvcameratools.NvError_ContentPipeInNonCachingMode
NvError_ContentPipeInsufficientMemory = _nvcameratools.NvError_ContentPipeInsufficientMemory
NvError_ContentPipeNotInvalidated = _nvcameratools.NvError_ContentPipeNotInvalidated
NvError_UnSupportedMetadata = _nvcameratools.NvError_UnSupportedMetadata
NvError_MetadataSuccess = _nvcameratools.NvError_MetadataSuccess
NvError_MetadataFailure = _nvcameratools.NvError_MetadataFailure
NvError_NewMetaDataAvailable = _nvcameratools.NvError_NewMetaDataAvailable
NvError_RefURLAvailable = _nvcameratools.NvError_RefURLAvailable
NvError_TrackListInvalidTrackIndex = _nvcameratools.NvError_TrackListInvalidTrackIndex
NvError_TrackListError = _nvcameratools.NvError_TrackListError
NvError_TrackListItemStillPlayingError = _nvcameratools.NvError_TrackListItemStillPlayingError
NvError_TrackListNotPlaying = _nvcameratools.NvError_TrackListNotPlaying
NvError_Nv3pUnrecoverableProtocol = _nvcameratools.NvError_Nv3pUnrecoverableProtocol
NvError_Nv3pBadPacketType = _nvcameratools.NvError_Nv3pBadPacketType
NvError_Nv3pPacketNacked = _nvcameratools.NvError_Nv3pPacketNacked
NvError_Nv3pBadReceiveLength = _nvcameratools.NvError_Nv3pBadReceiveLength
NvError_Nv3pBadReturnData = _nvcameratools.NvError_Nv3pBadReturnData
NvError_AesClearSbkFailed = _nvcameratools.NvError_AesClearSbkFailed
NvError_AesLockSskFailed = _nvcameratools.NvError_AesLockSskFailed
NvError_AesDisableCryptoFailed = _nvcameratools.NvError_AesDisableCryptoFailed
NvError_AesKeyUnWrapFailed = _nvcameratools.NvError_AesKeyUnWrapFailed
NvError_AesPermissionDenied = _nvcameratools.NvError_AesPermissionDenied
NvError_BlockDriverIllegalIoctl = _nvcameratools.NvError_BlockDriverIllegalIoctl
NvError_BlockDriverOverlappedPartition = _nvcameratools.NvError_BlockDriverOverlappedPartition
NvError_BlockDriverNoPartition = _nvcameratools.NvError_BlockDriverNoPartition
NvError_BlockDriverIllegalPartId = _nvcameratools.NvError_BlockDriverIllegalPartId
NvError_BlockDriverWriteVerifyFailed = _nvcameratools.NvError_BlockDriverWriteVerifyFailed
NvError_NandBlockDriverEraseFailure = _nvcameratools.NvError_NandBlockDriverEraseFailure
NvError_NandBlockDriverWriteFailure = _nvcameratools.NvError_NandBlockDriverWriteFailure
NvError_NandBlockDriverReadFailure = _nvcameratools.NvError_NandBlockDriverReadFailure
NvError_NandBlockDriverLockFailure = _nvcameratools.NvError_NandBlockDriverLockFailure
NvError_NandRegionIllegalAddress = _nvcameratools.NvError_NandRegionIllegalAddress
NvError_NandRegionTableOpFailure = _nvcameratools.NvError_NandRegionTableOpFailure
NvError_NandBlockDriverMultiInterleave = _nvcameratools.NvError_NandBlockDriverMultiInterleave
NvError_NandTagAreaSearchFailure = _nvcameratools.NvError_NandTagAreaSearchFailure
NvError_EmmcBlockDriverLockNotSupported = _nvcameratools.NvError_EmmcBlockDriverLockNotSupported
NvError_EmmcBlockDriverLockUnaligned = _nvcameratools.NvError_EmmcBlockDriverLockUnaligned
NvError_EmmcBlockDriverIllegalStateRead = _nvcameratools.NvError_EmmcBlockDriverIllegalStateRead
NvError_EmmcBlockDriverIllegalStateWrite = _nvcameratools.NvError_EmmcBlockDriverIllegalStateWrite
NvError_EmmcCommandFailed = _nvcameratools.NvError_EmmcCommandFailed
NvError_EmmcReadFailed = _nvcameratools.NvError_EmmcReadFailed
NvError_EmmcWriteFailed = _nvcameratools.NvError_EmmcWriteFailed
NvError_EmmcBlockDriverEraseFailure = _nvcameratools.NvError_EmmcBlockDriverEraseFailure
NvError_EmmcBlockDriverIllegalAddress = _nvcameratools.NvError_EmmcBlockDriverIllegalAddress
NvError_EmmcBlockDriverLockFailure = _nvcameratools.NvError_EmmcBlockDriverLockFailure
NvError_EmmcBlockDriverBlockIsLocked = _nvcameratools.NvError_EmmcBlockDriverBlockIsLocked
NvError_MipiHsiTxFifoEmpty = _nvcameratools.NvError_MipiHsiTxFifoEmpty
NvError_MipiHsiRxFifoEmpty = _nvcameratools.NvError_MipiHsiRxFifoEmpty
NvError_MipiHsiBusy = _nvcameratools.NvError_MipiHsiBusy
NvError_MipiHsiHandleNotConfigured = _nvcameratools.NvError_MipiHsiHandleNotConfigured
NvError_MipiHsiTransmitError = _nvcameratools.NvError_MipiHsiTransmitError
NvError_MipiHsiReceiveError = _nvcameratools.NvError_MipiHsiReceiveError
NvError_MipiHsiTransferIncomplete = _nvcameratools.NvError_MipiHsiTransferIncomplete
NvError_SCCompileFail = _nvcameratools.NvError_SCCompileFail
NvError_DrmFailure = _nvcameratools.NvError_DrmFailure
NvError_DrmInvalidArg = _nvcameratools.NvError_DrmInvalidArg
NvError_DrmOutOfMemory = _nvcameratools.NvError_DrmOutOfMemory
NvError_DrmFileNotFound = _nvcameratools.NvError_DrmFileNotFound
NvError_DrmBufferTooSmall = _nvcameratools.NvError_DrmBufferTooSmall
NvError_DrmInvalidLicense = _nvcameratools.NvError_DrmInvalidLicense
NvError_DrmLicenseExpired = _nvcameratools.NvError_DrmLicenseExpired
NvError_DrmRightsNotAvailable = _nvcameratools.NvError_DrmRightsNotAvailable
NvError_DrmLicenseNotFound = _nvcameratools.NvError_DrmLicenseNotFound
NvError_DrmInvalidBindId = _nvcameratools.NvError_DrmInvalidBindId
NvError_DrmVersionNotSupported = _nvcameratools.NvError_DrmVersionNotSupported
NvError_DrmMeteringNotSupported = _nvcameratools.NvError_DrmMeteringNotSupported
NvError_DrmDecryptionFailed = _nvcameratools.NvError_DrmDecryptionFailed
NvError_SysUpdateInvalidBLVersion = _nvcameratools.NvError_SysUpdateInvalidBLVersion
NvError_SysUpdateInvalidChecksum = _nvcameratools.NvError_SysUpdateInvalidChecksum
NvError_SysUpdateBLUpdateNotAllowed = _nvcameratools.NvError_SysUpdateBLUpdateNotAllowed
NvSuccess = _nvcameratools.NvSuccess
NvError_Force32 = _nvcameratools.NvError_Force32

def getErrorString(arg1):
    return _nvcameratools.getErrorString(arg1)
getErrorString = _nvcameratools.getErrorString
PROP_TYPE_NULL = _nvcameratools.PROP_TYPE_NULL
PROP_TYPE_BOOL = _nvcameratools.PROP_TYPE_BOOL
PROP_TYPE_UINT8 = _nvcameratools.PROP_TYPE_UINT8
PROP_TYPE_UINT32 = _nvcameratools.PROP_TYPE_UINT32
PROP_TYPE_SINT32 = _nvcameratools.PROP_TYPE_SINT32
PROP_TYPE_UINT64 = _nvcameratools.PROP_TYPE_UINT64
PROP_TYPE_FLOAT = _nvcameratools.PROP_TYPE_FLOAT
PROP_TYPE_VLFLOAT = _nvcameratools.PROP_TYPE_VLFLOAT
OS_INFO_STRING_MAX_LENGTH = _nvcameratools.OS_INFO_STRING_MAX_LENGTH
NvctOsID_Unknown = _nvcameratools.NvctOsID_Unknown
NvctOsID_Android = _nvcameratools.NvctOsID_Android
NvctOsID_L4T = _nvcameratools.NvctOsID_L4T
NvctOsID_Embedded_Linux = _nvcameratools.NvctOsID_Embedded_Linux
NvctOsID_Integrity = _nvcameratools.NvctOsID_Integrity
NvctOsID_QNX = _nvcameratools.NvctOsID_QNX
NvctOsID_Force32 = _nvcameratools.NvctOsID_Force32
VLF_COUNT_MAX = _nvcameratools.VLF_COUNT_MAX
HDR_MAX_EXPOSURES = _nvcameratools.HDR_MAX_EXPOSURES
class NvVLF32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvVLF32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvVLF32, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _nvcameratools.NvVLF32_count_set
    __swig_getmethods__["count"] = _nvcameratools.NvVLF32_count_get
    if _newclass:
        count = _swig_property(_nvcameratools.NvVLF32_count_get, _nvcameratools.NvVLF32_count_set)
    __swig_setmethods__["value"] = _nvcameratools.NvVLF32_value_set
    __swig_getmethods__["value"] = _nvcameratools.NvVLF32_value_get
    if _newclass:
        value = _swig_property(_nvcameratools.NvVLF32_value_get, _nvcameratools.NvVLF32_value_set)

    def set(self, index, value):
        return _nvcameratools.NvVLF32_set(self, index, value)

    def get(self, index):
        return _nvcameratools.NvVLF32_get(self, index)

    def __init__(self):
        this = _nvcameratools.new_NvVLF32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvVLF32
    __del__ = lambda self: None
NvVLF32_swigregister = _nvcameratools.NvVLF32_swigregister
NvVLF32_swigregister(NvVLF32)

OVERRIDE_LOCATIONS_MAX_PATHS = _nvcameratools.OVERRIDE_LOCATIONS_MAX_PATHS
OVERRIDE_LOCATIONS_MAX_PATH_LENGTH = _nvcameratools.OVERRIDE_LOCATIONS_MAX_PATH_LENGTH
OVERRIDE_LOCS_SIZE = _nvcameratools.OVERRIDE_LOCS_SIZE
OVERRIDE_LOCATIONS_TYPE_NONE = _nvcameratools.OVERRIDE_LOCATIONS_TYPE_NONE
OVERRIDE_LOCATIONS_TYPE_OVERRIDE = _nvcameratools.OVERRIDE_LOCATIONS_TYPE_OVERRIDE
OVERRIDE_LOCATIONS_TYPE_FACTBLOB = _nvcameratools.OVERRIDE_LOCATIONS_TYPE_FACTBLOB
OVERRIDE_LOCATIONS_TYPE_CALIBFACTBLOB = _nvcameratools.OVERRIDE_LOCATIONS_TYPE_CALIBFACTBLOB
PROP_NONE = _nvcameratools.PROP_NONE
PROP_SPECIAL_EFFECT = _nvcameratools.PROP_SPECIAL_EFFECT
PROP_EXPOSURE_TIME = _nvcameratools.PROP_EXPOSURE_TIME
PROP_SENSOR_SENSITIVITY = _nvcameratools.PROP_SENSOR_SENSITIVITY
PROP_NOISE_REDUCTION_MODE = _nvcameratools.PROP_NOISE_REDUCTION_MODE
PROP_AWB_MODE = _nvcameratools.PROP_AWB_MODE
PROP_AWB_LOCK = _nvcameratools.PROP_AWB_LOCK
PROP_AE_MODE = _nvcameratools.PROP_AE_MODE
PROP_AE_LOCK = _nvcameratools.PROP_AE_LOCK
PROP_AE_STATE = _nvcameratools.PROP_AE_STATE
PROP_AF_MODE = _nvcameratools.PROP_AF_MODE
PROP_AF_TRIGGER = _nvcameratools.PROP_AF_TRIGGER
PROP_AF_STATE = _nvcameratools.PROP_AF_STATE
PROP_EXPOSURE_TIMERANGE = _nvcameratools.PROP_EXPOSURE_TIMERANGE
PROP_FRAME_RATE = _nvcameratools.PROP_FRAME_RATE
PROP_PAUSE_AFTER_CAPTURE = _nvcameratools.PROP_PAUSE_AFTER_CAPTURE
PROP_AUTOFOCUS = _nvcameratools.PROP_AUTOFOCUS
PROP_CONTINUOUS_AUTOFOCUS = _nvcameratools.PROP_CONTINUOUS_AUTOFOCUS
PROP_AUTOEXPOSURE = _nvcameratools.PROP_AUTOEXPOSURE
PROP_AUTOWHITEBALANCE = _nvcameratools.PROP_AUTOWHITEBALANCE
PROP_AWB_STATE = _nvcameratools.PROP_AWB_STATE
PROP_FOCUS_DISTANCE = _nvcameratools.PROP_FOCUS_DISTANCE
PROP_FOCUS_POS = _nvcameratools.PROP_FOCUS_POS
PROP_CONCURRENT_RAW_DUMP_FLAG = _nvcameratools.PROP_CONCURRENT_RAW_DUMP_FLAG
PROP_FOCUSINFO_PHYSRANGE = _nvcameratools.PROP_FOCUSINFO_PHYSRANGE
PROP_FOCUSINFO_INF = _nvcameratools.PROP_FOCUSINFO_INF
PROP_FOCUSINFO_INF_OFFSET = _nvcameratools.PROP_FOCUSINFO_INF_OFFSET
PROP_FOCUSINFO_MACRO = _nvcameratools.PROP_FOCUSINFO_MACRO
PROP_FOCUSINFO_MACRO_OFFSET = _nvcameratools.PROP_FOCUSINFO_MACRO_OFFSET
PROP_CROP_REGION = _nvcameratools.PROP_CROP_REGION
PROP_GAIN_RANGE = _nvcameratools.PROP_GAIN_RANGE
PROP_FUSE_ID = _nvcameratools.PROP_FUSE_ID
PROP_AOHDR_MODE = _nvcameratools.PROP_AOHDR_MODE
PROP_WB_MANUAL_MODE = _nvcameratools.PROP_WB_MANUAL_MODE
PROP_WB_GAINS = _nvcameratools.PROP_WB_GAINS
PROP_SENSOR_ANALOG_GAIN = _nvcameratools.PROP_SENSOR_ANALOG_GAIN
PROP_SCALE_SIZE = _nvcameratools.PROP_SCALE_SIZE
PROP_ISP_DIGITAL_GAIN = _nvcameratools.PROP_ISP_DIGITAL_GAIN
PROP_ISP_MAX_DIGITAL_GAIN = _nvcameratools.PROP_ISP_MAX_DIGITAL_GAIN
PROP_CURRENT_SCENE_LUX = _nvcameratools.PROP_CURRENT_SCENE_LUX
PROP_OVERRIDE_LOCATIONS = _nvcameratools.PROP_OVERRIDE_LOCATIONS
PROP_HDR_RATIO_OVERRIDE = _nvcameratools.PROP_HDR_RATIO_OVERRIDE
PROP_AF_TRIGGER_ID = _nvcameratools.PROP_AF_TRIGGER_ID
PROP_APERTURE_CONTROLS_AVAILABLE = _nvcameratools.PROP_APERTURE_CONTROLS_AVAILABLE
PROP_APERTURE_FNUMBER = _nvcameratools.PROP_APERTURE_FNUMBER
PROP_APERTURE_MOTOR_STEP = _nvcameratools.PROP_APERTURE_MOTOR_STEP
PROP_APERTURE_FNUMBER_RANGE = _nvcameratools.PROP_APERTURE_FNUMBER_RANGE
PROP_APERTURE_MOTOR_STEP_RANGE = _nvcameratools.PROP_APERTURE_MOTOR_STEP_RANGE
PROP_FOCUSINFO_MOTOR_SPEED_RANGE = _nvcameratools.PROP_FOCUSINFO_MOTOR_SPEED_RANGE
PROP_SHADING_MODE = _nvcameratools.PROP_SHADING_MODE
NUM_PROPERTIES = _nvcameratools.NUM_PROPERTIES
class CamProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nvcameratools.new_CamProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["id"] = _nvcameratools.CamProperty_id_set
    __swig_getmethods__["id"] = _nvcameratools.CamProperty_id_get
    if _newclass:
        id = _swig_property(_nvcameratools.CamProperty_id_get, _nvcameratools.CamProperty_id_set)
    __swig_setmethods__["type"] = _nvcameratools.CamProperty_type_set
    __swig_getmethods__["type"] = _nvcameratools.CamProperty_type_get
    if _newclass:
        type = _swig_property(_nvcameratools.CamProperty_type_get, _nvcameratools.CamProperty_type_set)
    __swig_setmethods__["count"] = _nvcameratools.CamProperty_count_set
    __swig_getmethods__["count"] = _nvcameratools.CamProperty_count_get
    if _newclass:
        count = _swig_property(_nvcameratools.CamProperty_count_get, _nvcameratools.CamProperty_count_set)
    __swig_setmethods__["value"] = _nvcameratools.CamProperty_value_set
    __swig_getmethods__["value"] = _nvcameratools.CamProperty_value_get
    if _newclass:
        value = _swig_property(_nvcameratools.CamProperty_value_get, _nvcameratools.CamProperty_value_set)
    __swig_setmethods__["valueBuffer"] = _nvcameratools.CamProperty_valueBuffer_set
    __swig_getmethods__["valueBuffer"] = _nvcameratools.CamProperty_valueBuffer_get
    if _newclass:
        valueBuffer = _swig_property(_nvcameratools.CamProperty_valueBuffer_get, _nvcameratools.CamProperty_valueBuffer_set)
    __swig_setmethods__["propertyNumber"] = _nvcameratools.CamProperty_propertyNumber_set
    __swig_getmethods__["propertyNumber"] = _nvcameratools.CamProperty_propertyNumber_get
    if _newclass:
        propertyNumber = _swig_property(_nvcameratools.CamProperty_propertyNumber_get, _nvcameratools.CamProperty_propertyNumber_set)

    def SetValue(self, _value):
        return _nvcameratools.CamProperty_SetValue(self, _value)

    def Set(self, _id, _type, _count, _value, _propertyNumber):
        return _nvcameratools.CamProperty_Set(self, _id, _type, _count, _value, _propertyNumber)

    def GetStringValue(self, pBuffer, size):
        return _nvcameratools.CamProperty_GetStringValue(self, pBuffer, size)

    def ParseValue(self, value):
        return _nvcameratools.CamProperty_ParseValue(self, value)

    def GetArrayString(self, value, ind, count, subValue, subValuesize):
        return _nvcameratools.CamProperty_GetArrayString(self, value, ind, count, subValue, subValuesize)

    def getFloatElementAtIndex(self, index=0):
        return _nvcameratools.CamProperty_getFloatElementAtIndex(self, index)

    def getUint32ElementAtIndex(self, index=0):
        return _nvcameratools.CamProperty_getUint32ElementAtIndex(self, index)

    def getSint32ElementAtIndex(self, index=0):
        return _nvcameratools.CamProperty_getSint32ElementAtIndex(self, index)

    def getUint8Pointer(self):
        return _nvcameratools.CamProperty_getUint8Pointer(self)

    def getVlfPointer(self):
        return _nvcameratools.CamProperty_getVlfPointer(self)

    def getVlfElementAtIndex(self, index=0):
        return _nvcameratools.CamProperty_getVlfElementAtIndex(self, index)
    __swig_destroy__ = _nvcameratools.delete_CamProperty
    __del__ = lambda self: None
CamProperty_swigregister = _nvcameratools.CamProperty_swigregister
CamProperty_swigregister(CamProperty)

class PropertyData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u8"] = _nvcameratools.PropertyData_u8_set
    __swig_getmethods__["u8"] = _nvcameratools.PropertyData_u8_get
    if _newclass:
        u8 = _swig_property(_nvcameratools.PropertyData_u8_get, _nvcameratools.PropertyData_u8_set)
    __swig_setmethods__["u32"] = _nvcameratools.PropertyData_u32_set
    __swig_getmethods__["u32"] = _nvcameratools.PropertyData_u32_get
    if _newclass:
        u32 = _swig_property(_nvcameratools.PropertyData_u32_get, _nvcameratools.PropertyData_u32_set)
    __swig_setmethods__["i32"] = _nvcameratools.PropertyData_i32_set
    __swig_getmethods__["i32"] = _nvcameratools.PropertyData_i32_get
    if _newclass:
        i32 = _swig_property(_nvcameratools.PropertyData_i32_get, _nvcameratools.PropertyData_i32_set)
    __swig_setmethods__["f"] = _nvcameratools.PropertyData_f_set
    __swig_getmethods__["f"] = _nvcameratools.PropertyData_f_get
    if _newclass:
        f = _swig_property(_nvcameratools.PropertyData_f_get, _nvcameratools.PropertyData_f_set)
    __swig_setmethods__["u64"] = _nvcameratools.PropertyData_u64_set
    __swig_getmethods__["u64"] = _nvcameratools.PropertyData_u64_get
    if _newclass:
        u64 = _swig_property(_nvcameratools.PropertyData_u64_get, _nvcameratools.PropertyData_u64_set)
    __swig_setmethods__["d"] = _nvcameratools.PropertyData_d_set
    __swig_getmethods__["d"] = _nvcameratools.PropertyData_d_get
    if _newclass:
        d = _swig_property(_nvcameratools.PropertyData_d_get, _nvcameratools.PropertyData_d_set)
    __swig_setmethods__["vlf"] = _nvcameratools.PropertyData_vlf_set
    __swig_getmethods__["vlf"] = _nvcameratools.PropertyData_vlf_get
    if _newclass:
        vlf = _swig_property(_nvcameratools.PropertyData_vlf_get, _nvcameratools.PropertyData_vlf_set)

    def __init__(self):
        this = _nvcameratools.new_PropertyData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_PropertyData
    __del__ = lambda self: None
PropertyData_swigregister = _nvcameratools.PropertyData_swigregister
PropertyData_swigregister(PropertyData)

NoiseReductionMode_Unknown = _nvcameratools.NoiseReductionMode_Unknown
NoiseReductionMode_Off = _nvcameratools.NoiseReductionMode_Off
NoiseReductionMode_Fast = _nvcameratools.NoiseReductionMode_Fast
NoiseReductionMode_HighQuality = _nvcameratools.NoiseReductionMode_HighQuality
NoiseReductionMode_Force32 = _nvcameratools.NoiseReductionMode_Force32
SpecialEffectsMode_Off = _nvcameratools.SpecialEffectsMode_Off
SpecialEffectsMode_Mono = _nvcameratools.SpecialEffectsMode_Mono
SpecialEffectsMode_Negative = _nvcameratools.SpecialEffectsMode_Negative
SpecialEffectsMode_Solarize = _nvcameratools.SpecialEffectsMode_Solarize
SpecialEffectsMode_Sepia = _nvcameratools.SpecialEffectsMode_Sepia
SpecialEffectsMode_Posterize = _nvcameratools.SpecialEffectsMode_Posterize
SpecialEffectsMode_Aqua = _nvcameratools.SpecialEffectsMode_Aqua
SpecialEffectsMode_Force32 = _nvcameratools.SpecialEffectsMode_Force32
AwbMode_Off = _nvcameratools.AwbMode_Off
AwbMode_Auto = _nvcameratools.AwbMode_Auto
AwbMode_Incandescent = _nvcameratools.AwbMode_Incandescent
AwbMode_Fluorescent = _nvcameratools.AwbMode_Fluorescent
AwbMode_WarmFluorescent = _nvcameratools.AwbMode_WarmFluorescent
AwbMode_Daylight = _nvcameratools.AwbMode_Daylight
AwbMode_CloudyDaylight = _nvcameratools.AwbMode_CloudyDaylight
AwbMode_Twilight = _nvcameratools.AwbMode_Twilight
AwbMode_Shade = _nvcameratools.AwbMode_Shade
AwbMode_Manual = _nvcameratools.AwbMode_Manual
AwbMode_Num_Total_Modes = _nvcameratools.AwbMode_Num_Total_Modes
AwbMode_Force32 = _nvcameratools.AwbMode_Force32
AeMode_Off = _nvcameratools.AeMode_Off
AeMode_On = _nvcameratools.AeMode_On
AeMode_OnAutoFlash = _nvcameratools.AeMode_OnAutoFlash
AeMode_OnAlwaysFlash = _nvcameratools.AeMode_OnAlwaysFlash
AeMode_On_AutoFlashRedEye = _nvcameratools.AeMode_On_AutoFlashRedEye
AeMode_Force32 = _nvcameratools.AeMode_Force32
AfMode_Off = _nvcameratools.AfMode_Off
AfMode_Auto = _nvcameratools.AfMode_Auto
AfMode_Macro = _nvcameratools.AfMode_Macro
AfMode_ContinuousVideo = _nvcameratools.AfMode_ContinuousVideo
AfMode_ContinuousPicture = _nvcameratools.AfMode_ContinuousPicture
AfMode_ExtDepthOfField = _nvcameratools.AfMode_ExtDepthOfField
AfMode_Force32 = _nvcameratools.AfMode_Force32
ConcurrentRawDumpFlag_Off = _nvcameratools.ConcurrentRawDumpFlag_Off
ConcurrentRawDumpFlag_Header = _nvcameratools.ConcurrentRawDumpFlag_Header
ConcurrentRawDumpFlag_RawBuffer = _nvcameratools.ConcurrentRawDumpFlag_RawBuffer
ConcurrentRawDumpFlag_WholeFile = _nvcameratools.ConcurrentRawDumpFlag_WholeFile
ConcurrentRawDumpFlag_Force32 = _nvcameratools.ConcurrentRawDumpFlag_Force32
NvCamAoHdrMode_Off = _nvcameratools.NvCamAoHdrMode_Off
NvCamAoHdrMode_RowInterleaved = _nvcameratools.NvCamAoHdrMode_RowInterleaved
NvCamAoHdrMode_Piecewise_Linear = _nvcameratools.NvCamAoHdrMode_Piecewise_Linear
WbManualMode_AlgControlOff = _nvcameratools.WbManualMode_AlgControlOff
WbManualMode_ResetReinitAlgs = _nvcameratools.WbManualMode_ResetReinitAlgs
WbManualMode_RestoreAlgs = _nvcameratools.WbManualMode_RestoreAlgs
WbManualMode_Force32 = _nvcameratools.WbManualMode_Force32
ShadingMode_Unknown = _nvcameratools.ShadingMode_Unknown
ShadingMode_Off = _nvcameratools.ShadingMode_Off
ShadingMode_Fast = _nvcameratools.ShadingMode_Fast
ShadingMode_HighQuality = _nvcameratools.ShadingMode_HighQuality
ShadingMode_Last = _nvcameratools.ShadingMode_Last
ShadingMode_Force32 = _nvcameratools.ShadingMode_Force32
class FileList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileList, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nvcameratools.new_FileList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_FileList
    __del__ = lambda self: None

    def size(self):
        return _nvcameratools.FileList_size(self)

    def push_back(self, filename):
        return _nvcameratools.FileList_push_back(self, filename)

    def GetFilename(self, index):
        return _nvcameratools.FileList_GetFilename(self, index)

    def pop_back(self):
        return _nvcameratools.FileList_pop_back(self)

    def clear(self):
        return _nvcameratools.FileList_clear(self)
FileList_swigregister = _nvcameratools.FileList_swigregister
FileList_swigregister(FileList)

SPROPERTY_SUPPORTED_VERSION = _nvcameratools.SPROPERTY_SUPPORTED_VERSION
SPROP_TYPE_NULL = _nvcameratools.SPROP_TYPE_NULL
SPROP_TYPE_NVCTSENSORMODE = _nvcameratools.SPROP_TYPE_NVCTSENSORMODE
SPROP_TYPE_CBUFFER = _nvcameratools.SPROP_TYPE_CBUFFER
SPROP_TYPE_UINT32 = _nvcameratools.SPROP_TYPE_UINT32
SPROP_TYPE_NVSIZE = _nvcameratools.SPROP_TYPE_NVSIZE
SPROP_TYPE_UINT64 = _nvcameratools.SPROP_TYPE_UINT64
SPROP_TYPE_F32 = _nvcameratools.SPROP_TYPE_F32
SPROP_SENSORMODETYPE_UNSPECIFIED = _nvcameratools.SPROP_SENSORMODETYPE_UNSPECIFIED
SPROP_SENSORMODETYPE_DEPTH = _nvcameratools.SPROP_SENSORMODETYPE_DEPTH
SPROP_SENSORMODETYPE_YUV = _nvcameratools.SPROP_SENSORMODETYPE_YUV
SPROP_SENSORMODETYPE_RGB = _nvcameratools.SPROP_SENSORMODETYPE_RGB
SPROP_SENSORMODETYPE_BAYER = _nvcameratools.SPROP_SENSORMODETYPE_BAYER
SPROP_SENSORMODETYPE_BAYER_WDR_PWL = _nvcameratools.SPROP_SENSORMODETYPE_BAYER_WDR_PWL
SPROP_SENSORMODETYPE_BAYER_WDR_DOL = _nvcameratools.SPROP_SENSORMODETYPE_BAYER_WDR_DOL
SPROP_SENSORMODETYPE_BAYER_WDR_INTERLEAVE = _nvcameratools.SPROP_SENSORMODETYPE_BAYER_WDR_INTERLEAVE
SPROP_NONE = _nvcameratools.SPROP_NONE
SPROP_NVCTSENSORMODE = _nvcameratools.SPROP_NVCTSENSORMODE
SPROP_SENSOR_UNIQUE_NAME = _nvcameratools.SPROP_SENSOR_UNIQUE_NAME
SPROP_SENSOR_NAME = _nvcameratools.SPROP_SENSOR_NAME
SPROP_SENSOR_POS = _nvcameratools.SPROP_SENSOR_POS
SPROP_SENSOR_MODULE_NAME = _nvcameratools.SPROP_SENSOR_MODULE_NAME
SPROP_SENSOR_DESCRIPTION = _nvcameratools.SPROP_SENSOR_DESCRIPTION
SPROP_SENSOR_CSIPIXEL_BITDEPTH = _nvcameratools.SPROP_SENSOR_CSIPIXEL_BITDEPTH
SPROP_SENSOR_DYNAMICPIXEL_BITDEPTH = _nvcameratools.SPROP_SENSOR_DYNAMICPIXEL_BITDEPTH
SPROP_SENSOR_MODETYPE = _nvcameratools.SPROP_SENSOR_MODETYPE
SPROP_SOURCE_INDEX = _nvcameratools.SPROP_SOURCE_INDEX
SPROP_SENSOR_MODE_INDEX = _nvcameratools.SPROP_SENSOR_MODE_INDEX
SPROP_SENSOR_PHYSICAL_RESOLUTION = _nvcameratools.SPROP_SENSOR_PHYSICAL_RESOLUTION
SPROP_SENSOR_MIN_EXPOSURE_TIME = _nvcameratools.SPROP_SENSOR_MIN_EXPOSURE_TIME
SPROP_SENSOR_MAX_EXPOSURE_TIME = _nvcameratools.SPROP_SENSOR_MAX_EXPOSURE_TIME
SPROP_SENSOR_MIN_ANALOG_GAIN = _nvcameratools.SPROP_SENSOR_MIN_ANALOG_GAIN
SPROP_SENSOR_MAX_ANALOG_GAIN = _nvcameratools.SPROP_SENSOR_MAX_ANALOG_GAIN
SPROP_NUM_PROPERTIES = _nvcameratools.SPROP_NUM_PROPERTIES
class NvctCharBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctCharBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctCharBuffer, name)
    __repr__ = _swig_repr

    def __init__(self, Size=256):
        this = _nvcameratools.new_NvctCharBuffer(Size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctCharBuffer
    __del__ = lambda self: None

    def copy(self, str):
        return _nvcameratools.NvctCharBuffer_copy(self, str)

    def getBuffer(self):
        return _nvcameratools.NvctCharBuffer_getBuffer(self)
NvctCharBuffer_swigregister = _nvcameratools.NvctCharBuffer_swigregister
NvctCharBuffer_swigregister(NvctCharBuffer)

class CamSProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamSProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamSProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nvcameratools.new_CamSProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["id"] = _nvcameratools.CamSProperty_id_set
    __swig_getmethods__["id"] = _nvcameratools.CamSProperty_id_get
    if _newclass:
        id = _swig_property(_nvcameratools.CamSProperty_id_get, _nvcameratools.CamSProperty_id_set)
    __swig_setmethods__["type"] = _nvcameratools.CamSProperty_type_set
    __swig_getmethods__["type"] = _nvcameratools.CamSProperty_type_get
    if _newclass:
        type = _swig_property(_nvcameratools.CamSProperty_type_get, _nvcameratools.CamSProperty_type_set)
    __swig_setmethods__["count"] = _nvcameratools.CamSProperty_count_set
    __swig_getmethods__["count"] = _nvcameratools.CamSProperty_count_get
    if _newclass:
        count = _swig_property(_nvcameratools.CamSProperty_count_get, _nvcameratools.CamSProperty_count_set)
    __swig_setmethods__["value"] = _nvcameratools.CamSProperty_value_set
    __swig_getmethods__["value"] = _nvcameratools.CamSProperty_value_get
    if _newclass:
        value = _swig_property(_nvcameratools.CamSProperty_value_get, _nvcameratools.CamSProperty_value_set)

    def getPointer(self):
        return _nvcameratools.CamSProperty_getPointer(self)

    def getCharBuffer(self):
        return _nvcameratools.CamSProperty_getCharBuffer(self)

    def getUint32Pointer(self):
        return _nvcameratools.CamSProperty_getUint32Pointer(self)

    def getUint32ElementAtIndex(self, index=0):
        return _nvcameratools.CamSProperty_getUint32ElementAtIndex(self, index)

    def getUint64ElementAtIndex(self, index=0):
        return _nvcameratools.CamSProperty_getUint64ElementAtIndex(self, index)

    def getF32ElementAtIndex(self, index=0):
        return _nvcameratools.CamSProperty_getF32ElementAtIndex(self, index)
    __swig_destroy__ = _nvcameratools.delete_CamSProperty
    __del__ = lambda self: None
CamSProperty_swigregister = _nvcameratools.CamSProperty_swigregister
CamSProperty_swigregister(CamSProperty)

class SPropertyData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPropertyData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SPropertyData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pCharBuffer"] = _nvcameratools.SPropertyData_pCharBuffer_set
    __swig_getmethods__["pCharBuffer"] = _nvcameratools.SPropertyData_pCharBuffer_get
    if _newclass:
        pCharBuffer = _swig_property(_nvcameratools.SPropertyData_pCharBuffer_get, _nvcameratools.SPropertyData_pCharBuffer_set)
    __swig_setmethods__["u32"] = _nvcameratools.SPropertyData_u32_set
    __swig_getmethods__["u32"] = _nvcameratools.SPropertyData_u32_get
    if _newclass:
        u32 = _swig_property(_nvcameratools.SPropertyData_u32_get, _nvcameratools.SPropertyData_u32_set)
    __swig_setmethods__["pPtr"] = _nvcameratools.SPropertyData_pPtr_set
    __swig_getmethods__["pPtr"] = _nvcameratools.SPropertyData_pPtr_get
    if _newclass:
        pPtr = _swig_property(_nvcameratools.SPropertyData_pPtr_get, _nvcameratools.SPropertyData_pPtr_set)
    __swig_setmethods__["pSize"] = _nvcameratools.SPropertyData_pSize_set
    __swig_getmethods__["pSize"] = _nvcameratools.SPropertyData_pSize_get
    if _newclass:
        pSize = _swig_property(_nvcameratools.SPropertyData_pSize_get, _nvcameratools.SPropertyData_pSize_set)
    __swig_setmethods__["u64"] = _nvcameratools.SPropertyData_u64_set
    __swig_getmethods__["u64"] = _nvcameratools.SPropertyData_u64_get
    if _newclass:
        u64 = _swig_property(_nvcameratools.SPropertyData_u64_get, _nvcameratools.SPropertyData_u64_set)
    __swig_setmethods__["f32"] = _nvcameratools.SPropertyData_f32_set
    __swig_getmethods__["f32"] = _nvcameratools.SPropertyData_f32_get
    if _newclass:
        f32 = _swig_property(_nvcameratools.SPropertyData_f32_get, _nvcameratools.SPropertyData_f32_set)

    def __init__(self):
        this = _nvcameratools.new_SPropertyData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_SPropertyData
    __del__ = lambda self: None
SPropertyData_swigregister = _nvcameratools.SPropertyData_swigregister
SPropertyData_swigregister(SPropertyData)


def new_f32p():
    return _nvcameratools.new_f32p()
new_f32p = _nvcameratools.new_f32p

def copy_f32p(value):
    return _nvcameratools.copy_f32p(value)
copy_f32p = _nvcameratools.copy_f32p

def delete_f32p(obj):
    return _nvcameratools.delete_f32p(obj)
delete_f32p = _nvcameratools.delete_f32p

def f32p_assign(obj, value):
    return _nvcameratools.f32p_assign(obj, value)
f32p_assign = _nvcameratools.f32p_assign

def f32p_value(obj):
    return _nvcameratools.f32p_value(obj)
f32p_value = _nvcameratools.f32p_value
class uint64pc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint64pc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint64pc, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nvcameratools.new_uint64pc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_uint64pc
    __del__ = lambda self: None

    def assign(self, value):
        return _nvcameratools.uint64pc_assign(self, value)

    def value(self):
        return _nvcameratools.uint64pc_value(self)

    def cast(self):
        return _nvcameratools.uint64pc_cast(self)
    if _newclass:
        frompointer = staticmethod(_nvcameratools.uint64pc_frompointer)
    else:
        frompointer = _nvcameratools.uint64pc_frompointer
uint64pc_swigregister = _nvcameratools.uint64pc_swigregister
uint64pc_swigregister(uint64pc)

def uint64pc_frompointer(t):
    return _nvcameratools.uint64pc_frompointer(t)
uint64pc_frompointer = _nvcameratools.uint64pc_frompointer

class uint32pc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32pc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32pc, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nvcameratools.new_uint32pc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_uint32pc
    __del__ = lambda self: None

    def assign(self, value):
        return _nvcameratools.uint32pc_assign(self, value)

    def value(self):
        return _nvcameratools.uint32pc_value(self)

    def cast(self):
        return _nvcameratools.uint32pc_cast(self)
    if _newclass:
        frompointer = staticmethod(_nvcameratools.uint32pc_frompointer)
    else:
        frompointer = _nvcameratools.uint32pc_frompointer
uint32pc_swigregister = _nvcameratools.uint32pc_swigregister
uint32pc_swigregister(uint32pc)

def uint32pc_frompointer(t):
    return _nvcameratools.uint32pc_frompointer(t)
uint32pc_frompointer = _nvcameratools.uint32pc_frompointer

class f32pc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, f32pc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, f32pc, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nvcameratools.new_f32pc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_f32pc
    __del__ = lambda self: None

    def assign(self, value):
        return _nvcameratools.f32pc_assign(self, value)

    def value(self):
        return _nvcameratools.f32pc_value(self)

    def cast(self):
        return _nvcameratools.f32pc_cast(self)
    if _newclass:
        frompointer = staticmethod(_nvcameratools.f32pc_frompointer)
    else:
        frompointer = _nvcameratools.f32pc_frompointer
f32pc_swigregister = _nvcameratools.f32pc_swigregister
f32pc_swigregister(f32pc)

def f32pc_frompointer(t):
    return _nvcameratools.f32pc_frompointer(t)
f32pc_frompointer = _nvcameratools.f32pc_frompointer

class uint32_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32_array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _nvcameratools.new_uint32_array(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_uint32_array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _nvcameratools.uint32_array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _nvcameratools.uint32_array___setitem__(self, index, value)

    def cast(self):
        return _nvcameratools.uint32_array_cast(self)
    if _newclass:
        frompointer = staticmethod(_nvcameratools.uint32_array_frompointer)
    else:
        frompointer = _nvcameratools.uint32_array_frompointer
uint32_array_swigregister = _nvcameratools.uint32_array_swigregister
uint32_array_swigregister(uint32_array)

def uint32_array_frompointer(t):
    return _nvcameratools.uint32_array_frompointer(t)
uint32_array_frompointer = _nvcameratools.uint32_array_frompointer

class sint32_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sint32_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sint32_array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _nvcameratools.new_sint32_array(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_sint32_array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _nvcameratools.sint32_array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _nvcameratools.sint32_array___setitem__(self, index, value)

    def cast(self):
        return _nvcameratools.sint32_array_cast(self)
    if _newclass:
        frompointer = staticmethod(_nvcameratools.sint32_array_frompointer)
    else:
        frompointer = _nvcameratools.sint32_array_frompointer
sint32_array_swigregister = _nvcameratools.sint32_array_swigregister
sint32_array_swigregister(sint32_array)

def sint32_array_frompointer(t):
    return _nvcameratools.sint32_array_frompointer(t)
sint32_array_frompointer = _nvcameratools.sint32_array_frompointer

class f32_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, f32_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, f32_array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _nvcameratools.new_f32_array(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_f32_array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _nvcameratools.f32_array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _nvcameratools.f32_array___setitem__(self, index, value)

    def cast(self):
        return _nvcameratools.f32_array_cast(self)
    if _newclass:
        frompointer = staticmethod(_nvcameratools.f32_array_frompointer)
    else:
        frompointer = _nvcameratools.f32_array_frompointer
f32_array_swigregister = _nvcameratools.f32_array_swigregister
f32_array_swigregister(f32_array)

def f32_array_frompointer(t):
    return _nvcameratools.f32_array_frompointer(t)
f32_array_frompointer = _nvcameratools.f32_array_frompointer

class vlf32_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vlf32_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vlf32_array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _nvcameratools.new_vlf32_array(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_vlf32_array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _nvcameratools.vlf32_array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _nvcameratools.vlf32_array___setitem__(self, index, value)

    def cast(self):
        return _nvcameratools.vlf32_array_cast(self)
    if _newclass:
        frompointer = staticmethod(_nvcameratools.vlf32_array_frompointer)
    else:
        frompointer = _nvcameratools.vlf32_array_frompointer
vlf32_array_swigregister = _nvcameratools.vlf32_array_swigregister
vlf32_array_swigregister(vlf32_array)

def vlf32_array_frompointer(t):
    return _nvcameratools.vlf32_array_frompointer(t)
vlf32_array_frompointer = _nvcameratools.vlf32_array_frompointer

class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major"] = _nvcameratools.Version_major_set
    __swig_getmethods__["major"] = _nvcameratools.Version_major_get
    if _newclass:
        major = _swig_property(_nvcameratools.Version_major_get, _nvcameratools.Version_major_set)
    __swig_setmethods__["minor"] = _nvcameratools.Version_minor_set
    __swig_getmethods__["minor"] = _nvcameratools.Version_minor_get
    if _newclass:
        minor = _swig_property(_nvcameratools.Version_minor_get, _nvcameratools.Version_minor_set)

    def __init__(self, major, minor):
        this = _nvcameratools.new_Version(major, minor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isCompatible(self, callerVersion):
        return _nvcameratools.Version_isCompatible(self, callerVersion)
    __swig_destroy__ = _nvcameratools.delete_Version
    __del__ = lambda self: None
Version_swigregister = _nvcameratools.Version_swigregister
Version_swigregister(Version)

NvCameraToolsOutputDataFormat_10BitLinear = _nvcameratools.NvCameraToolsOutputDataFormat_10BitLinear
NvCameraToolsOutputDataFormat_2x11_1 = _nvcameratools.NvCameraToolsOutputDataFormat_2x11_1
NvCameraToolsOutputDataFormat_3x12 = _nvcameratools.NvCameraToolsOutputDataFormat_3x12
NvCameraToolsOutputDataFormat_12BitLinear = _nvcameratools.NvCameraToolsOutputDataFormat_12BitLinear
NvCameraToolsOutputDataFormat_12BitCombinedCompressed = _nvcameratools.NvCameraToolsOutputDataFormat_12BitCombinedCompressed
NvCameraToolsOutputDataFormat_12BitCombinedCompressedExtended = _nvcameratools.NvCameraToolsOutputDataFormat_12BitCombinedCompressedExtended
NvCameraToolsOutputDataFormat_16bitLinear = _nvcameratools.NvCameraToolsOutputDataFormat_16bitLinear
NvCameraToolsOutputDataFormat_16BitLogDomain = _nvcameratools.NvCameraToolsOutputDataFormat_16BitLogDomain
NvCameraToolsOutputDataFormat_16BitLogDomainExtended = _nvcameratools.NvCameraToolsOutputDataFormat_16BitLogDomainExtended
NvCameraToolsOutputDataFormat_20BitLinear = _nvcameratools.NvCameraToolsOutputDataFormat_20BitLinear
NvCameraToolsOutputDataFormat_20BitLinearExtended = _nvcameratools.NvCameraToolsOutputDataFormat_20BitLinearExtended
NvCameraToolsOutputDataFormat_FP16 = _nvcameratools.NvCameraToolsOutputDataFormat_FP16
NvCameraToolsOutputDataFormat_12BitCompressed = _nvcameratools.NvCameraToolsOutputDataFormat_12BitCompressed
NvCameraToolsOutputDataFormat_16BitCombinedCompressed = _nvcameratools.NvCameraToolsOutputDataFormat_16BitCombinedCompressed
NvCameraToolsOutputDataFormat_Last = _nvcameratools.NvCameraToolsOutputDataFormat_Last
NvCameraToolsOutputDataFormat_Force32 = _nvcameratools.NvCameraToolsOutputDataFormat_Force32
class NvCameraToolsOutputDataLUT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvCameraToolsOutputDataLUT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvCameraToolsOutputDataLUT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _nvcameratools.NvCameraToolsOutputDataLUT_size_set
    __swig_getmethods__["size"] = _nvcameratools.NvCameraToolsOutputDataLUT_size_get
    if _newclass:
        size = _swig_property(_nvcameratools.NvCameraToolsOutputDataLUT_size_get, _nvcameratools.NvCameraToolsOutputDataLUT_size_set)
    __swig_setmethods__["buffer"] = _nvcameratools.NvCameraToolsOutputDataLUT_buffer_set
    __swig_getmethods__["buffer"] = _nvcameratools.NvCameraToolsOutputDataLUT_buffer_get
    if _newclass:
        buffer = _swig_property(_nvcameratools.NvCameraToolsOutputDataLUT_buffer_get, _nvcameratools.NvCameraToolsOutputDataLUT_buffer_set)

    def __init__(self):
        this = _nvcameratools.new_NvCameraToolsOutputDataLUT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvCameraToolsOutputDataLUT
    __del__ = lambda self: None
NvCameraToolsOutputDataLUT_swigregister = _nvcameratools.NvCameraToolsOutputDataLUT_swigregister
NvCameraToolsOutputDataLUT_swigregister(NvCameraToolsOutputDataLUT)

NvHdrMode_Disabled = _nvcameratools.NvHdrMode_Disabled
NvHdrMode_MobileCamera1 = _nvcameratools.NvHdrMode_MobileCamera1
NvHdrMode_Automotive1 = _nvcameratools.NvHdrMode_Automotive1
NvHdrMode_MobileCamera2 = _nvcameratools.NvHdrMode_MobileCamera2
NvHdrMode_MobileCamera3 = _nvcameratools.NvHdrMode_MobileCamera3
NvHdrMode_Last = _nvcameratools.NvHdrMode_Last
NvHdrMode_Force32 = _nvcameratools.NvHdrMode_Force32
class NvCameraToolsSensorMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvCameraToolsSensorMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvCameraToolsSensorMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Resolution"] = _nvcameratools.NvCameraToolsSensorMode_Resolution_set
    __swig_getmethods__["Resolution"] = _nvcameratools.NvCameraToolsSensorMode_Resolution_get
    if _newclass:
        Resolution = _swig_property(_nvcameratools.NvCameraToolsSensorMode_Resolution_get, _nvcameratools.NvCameraToolsSensorMode_Resolution_set)
    __swig_setmethods__["FrameRate"] = _nvcameratools.NvCameraToolsSensorMode_FrameRate_set
    __swig_getmethods__["FrameRate"] = _nvcameratools.NvCameraToolsSensorMode_FrameRate_get
    if _newclass:
        FrameRate = _swig_property(_nvcameratools.NvCameraToolsSensorMode_FrameRate_get, _nvcameratools.NvCameraToolsSensorMode_FrameRate_set)
    __swig_setmethods__["ColorFormat"] = _nvcameratools.NvCameraToolsSensorMode_ColorFormat_set
    __swig_getmethods__["ColorFormat"] = _nvcameratools.NvCameraToolsSensorMode_ColorFormat_get
    if _newclass:
        ColorFormat = _swig_property(_nvcameratools.NvCameraToolsSensorMode_ColorFormat_get, _nvcameratools.NvCameraToolsSensorMode_ColorFormat_set)
    __swig_setmethods__["hdrMode"] = _nvcameratools.NvCameraToolsSensorMode_hdrMode_set
    __swig_getmethods__["hdrMode"] = _nvcameratools.NvCameraToolsSensorMode_hdrMode_get
    if _newclass:
        hdrMode = _swig_property(_nvcameratools.NvCameraToolsSensorMode_hdrMode_get, _nvcameratools.NvCameraToolsSensorMode_hdrMode_set)
    __swig_setmethods__["OutputDataFormat"] = _nvcameratools.NvCameraToolsSensorMode_OutputDataFormat_set
    __swig_getmethods__["OutputDataFormat"] = _nvcameratools.NvCameraToolsSensorMode_OutputDataFormat_get
    if _newclass:
        OutputDataFormat = _swig_property(_nvcameratools.NvCameraToolsSensorMode_OutputDataFormat_get, _nvcameratools.NvCameraToolsSensorMode_OutputDataFormat_set)

    def __init__(self, *args):
        this = _nvcameratools.new_NvCameraToolsSensorMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _nvcameratools.NvCameraToolsSensorMode___eq__(self, other)

    def __ne__(self, other):
        return _nvcameratools.NvCameraToolsSensorMode___ne__(self, other)

    def __hash__(self):
        return _nvcameratools.NvCameraToolsSensorMode___hash__(self)
    __swig_destroy__ = _nvcameratools.delete_NvCameraToolsSensorMode
    __del__ = lambda self: None
NvCameraToolsSensorMode_swigregister = _nvcameratools.NvCameraToolsSensorMode_swigregister
NvCameraToolsSensorMode_swigregister(NvCameraToolsSensorMode)

class NvHdrCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvHdrCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvHdrCapabilities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bHdrSupported"] = _nvcameratools.NvHdrCapabilities_bHdrSupported_set
    __swig_getmethods__["bHdrSupported"] = _nvcameratools.NvHdrCapabilities_bHdrSupported_get
    if _newclass:
        bHdrSupported = _swig_property(_nvcameratools.NvHdrCapabilities_bHdrSupported_get, _nvcameratools.NvHdrCapabilities_bHdrSupported_set)
    __swig_setmethods__["bHdrChangeable"] = _nvcameratools.NvHdrCapabilities_bHdrChangeable_set
    __swig_getmethods__["bHdrChangeable"] = _nvcameratools.NvHdrCapabilities_bHdrChangeable_get
    if _newclass:
        bHdrChangeable = _swig_property(_nvcameratools.NvHdrCapabilities_bHdrChangeable_get, _nvcameratools.NvHdrCapabilities_bHdrChangeable_set)
    __swig_setmethods__["numExposures"] = _nvcameratools.NvHdrCapabilities_numExposures_set
    __swig_getmethods__["numExposures"] = _nvcameratools.NvHdrCapabilities_numExposures_get
    if _newclass:
        numExposures = _swig_property(_nvcameratools.NvHdrCapabilities_numExposures_get, _nvcameratools.NvHdrCapabilities_numExposures_set)
    __swig_setmethods__["numSenorAnalogGains"] = _nvcameratools.NvHdrCapabilities_numSenorAnalogGains_set
    __swig_getmethods__["numSenorAnalogGains"] = _nvcameratools.NvHdrCapabilities_numSenorAnalogGains_get
    if _newclass:
        numSenorAnalogGains = _swig_property(_nvcameratools.NvHdrCapabilities_numSenorAnalogGains_get, _nvcameratools.NvHdrCapabilities_numSenorAnalogGains_set)

    def __init__(self, *args):
        this = _nvcameratools.new_NvHdrCapabilities(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumExposuresAt(self, i):
        return _nvcameratools.NvHdrCapabilities_getNumExposuresAt(self, i)

    def getNumSensorAnalogGainsAt(self, i):
        return _nvcameratools.NvHdrCapabilities_getNumSensorAnalogGainsAt(self, i)
    __swig_destroy__ = _nvcameratools.delete_NvHdrCapabilities
    __del__ = lambda self: None
NvHdrCapabilities_swigregister = _nvcameratools.NvHdrCapabilities_swigregister
NvHdrCapabilities_swigregister(NvHdrCapabilities)

class NvDctCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvDctCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvDctCapabilities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bDctSupported"] = _nvcameratools.NvDctCapabilities_bDctSupported_set
    __swig_getmethods__["bDctSupported"] = _nvcameratools.NvDctCapabilities_bDctSupported_get
    if _newclass:
        bDctSupported = _swig_property(_nvcameratools.NvDctCapabilities_bDctSupported_get, _nvcameratools.NvDctCapabilities_bDctSupported_set)
    __swig_setmethods__["bDctEnabled"] = _nvcameratools.NvDctCapabilities_bDctEnabled_set
    __swig_getmethods__["bDctEnabled"] = _nvcameratools.NvDctCapabilities_bDctEnabled_get
    if _newclass:
        bDctEnabled = _swig_property(_nvcameratools.NvDctCapabilities_bDctEnabled_get, _nvcameratools.NvDctCapabilities_bDctEnabled_set)

    def __init__(self, *args):
        this = _nvcameratools.new_NvDctCapabilities(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvDctCapabilities
    __del__ = lambda self: None
NvDctCapabilities_swigregister = _nvcameratools.NvDctCapabilities_swigregister
NvDctCapabilities_swigregister(NvDctCapabilities)

CamConst_CAP_READY = _nvcameratools.CamConst_CAP_READY
CamConst_CAP_FILE_READY = _nvcameratools.CamConst_CAP_FILE_READY
CamConst_AF_READY = _nvcameratools.CamConst_AF_READY
CamConst_AF_TIMEOUT = _nvcameratools.CamConst_AF_TIMEOUT
CamConst_AE_READY = _nvcameratools.CamConst_AE_READY
CamConst_AE_TIMEOUT = _nvcameratools.CamConst_AE_TIMEOUT
CamConst_AWB_READY = _nvcameratools.CamConst_AWB_READY
CamConst_AWB_TIMEOUT = _nvcameratools.CamConst_AWB_TIMEOUT
CamConst_PREVIEW_PAUSED = _nvcameratools.CamConst_PREVIEW_PAUSED
CamConst_PREVIEW_EOS = _nvcameratools.CamConst_PREVIEW_EOS
CamConst_FIRST_PREVIEW_FRAME = _nvcameratools.CamConst_FIRST_PREVIEW_FRAME
CamConst_ALL_CAPTURE_DONE = _nvcameratools.CamConst_ALL_CAPTURE_DONE
CamConst_POWER_ON_COMPLETE = _nvcameratools.CamConst_POWER_ON_COMPLETE
CamConst_AF_CANCEL = _nvcameratools.CamConst_AF_CANCEL
CamConst_AE_CANCEL = _nvcameratools.CamConst_AE_CANCEL
CamConst_AWB_CANCEL = _nvcameratools.CamConst_AWB_CANCEL
CamConst_LAST = _nvcameratools.CamConst_LAST
CamConst_ALGS = _nvcameratools.CamConst_ALGS
FrameDest_DropFrames = _nvcameratools.FrameDest_DropFrames
FrameDest_DumpToDisk_Immediate = _nvcameratools.FrameDest_DumpToDisk_Immediate
FrameDest_DumpToDisk_Buffered = _nvcameratools.FrameDest_DumpToDisk_Buffered
FrameDest_DumpToMemory = _nvcameratools.FrameDest_DumpToMemory
FrameDest_Force32 = _nvcameratools.FrameDest_Force32
ImageFormat_Yuv = _nvcameratools.ImageFormat_Yuv
ImageFormat_Jpeg = _nvcameratools.ImageFormat_Jpeg
ImageFormat_NvRaw = _nvcameratools.ImageFormat_NvRaw
ImageFormat_BayerRaw = _nvcameratools.ImageFormat_BayerRaw
ImageFormat_Force32 = _nvcameratools.ImageFormat_Force32
class StreamingParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frameCount"] = _nvcameratools.StreamingParameters_frameCount_set
    __swig_getmethods__["frameCount"] = _nvcameratools.StreamingParameters_frameCount_get
    if _newclass:
        frameCount = _swig_property(_nvcameratools.StreamingParameters_frameCount_get, _nvcameratools.StreamingParameters_frameCount_set)
    __swig_setmethods__["imageFormat"] = _nvcameratools.StreamingParameters_imageFormat_set
    __swig_getmethods__["imageFormat"] = _nvcameratools.StreamingParameters_imageFormat_get
    if _newclass:
        imageFormat = _swig_property(_nvcameratools.StreamingParameters_imageFormat_get, _nvcameratools.StreamingParameters_imageFormat_set)
    __swig_setmethods__["cropRectangle"] = _nvcameratools.StreamingParameters_cropRectangle_set
    __swig_getmethods__["cropRectangle"] = _nvcameratools.StreamingParameters_cropRectangle_get
    if _newclass:
        cropRectangle = _swig_property(_nvcameratools.StreamingParameters_cropRectangle_get, _nvcameratools.StreamingParameters_cropRectangle_set)
    __swig_setmethods__["frameDestination"] = _nvcameratools.StreamingParameters_frameDestination_set
    __swig_getmethods__["frameDestination"] = _nvcameratools.StreamingParameters_frameDestination_get
    if _newclass:
        frameDestination = _swig_property(_nvcameratools.StreamingParameters_frameDestination_get, _nvcameratools.StreamingParameters_frameDestination_set)
    __swig_setmethods__["filename"] = _nvcameratools.StreamingParameters_filename_set
    __swig_getmethods__["filename"] = _nvcameratools.StreamingParameters_filename_get
    if _newclass:
        filename = _swig_property(_nvcameratools.StreamingParameters_filename_get, _nvcameratools.StreamingParameters_filename_set)

    def __init__(self):
        this = _nvcameratools.new_StreamingParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_StreamingParameters
    __del__ = lambda self: None
StreamingParameters_swigregister = _nvcameratools.StreamingParameters_swigregister
StreamingParameters_swigregister(StreamingParameters)

class StreamingStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bStreaming"] = _nvcameratools.StreamingStats_bStreaming_set
    __swig_getmethods__["bStreaming"] = _nvcameratools.StreamingStats_bStreaming_get
    if _newclass:
        bStreaming = _swig_property(_nvcameratools.StreamingStats_bStreaming_get, _nvcameratools.StreamingStats_bStreaming_set)
    __swig_setmethods__["framesRx"] = _nvcameratools.StreamingStats_framesRx_set
    __swig_getmethods__["framesRx"] = _nvcameratools.StreamingStats_framesRx_get
    if _newclass:
        framesRx = _swig_property(_nvcameratools.StreamingStats_framesRx_get, _nvcameratools.StreamingStats_framesRx_set)
    __swig_setmethods__["fps"] = _nvcameratools.StreamingStats_fps_set
    __swig_getmethods__["fps"] = _nvcameratools.StreamingStats_fps_get
    if _newclass:
        fps = _swig_property(_nvcameratools.StreamingStats_fps_get, _nvcameratools.StreamingStats_fps_set)
    __swig_setmethods__["aveTimeFrameProcess"] = _nvcameratools.StreamingStats_aveTimeFrameProcess_set
    __swig_getmethods__["aveTimeFrameProcess"] = _nvcameratools.StreamingStats_aveTimeFrameProcess_get
    if _newclass:
        aveTimeFrameProcess = _swig_property(_nvcameratools.StreamingStats_aveTimeFrameProcess_get, _nvcameratools.StreamingStats_aveTimeFrameProcess_set)
    __swig_setmethods__["outputImageCoord"] = _nvcameratools.StreamingStats_outputImageCoord_set
    __swig_getmethods__["outputImageCoord"] = _nvcameratools.StreamingStats_outputImageCoord_get
    if _newclass:
        outputImageCoord = _swig_property(_nvcameratools.StreamingStats_outputImageCoord_get, _nvcameratools.StreamingStats_outputImageCoord_set)
    __swig_setmethods__["fileList"] = _nvcameratools.StreamingStats_fileList_set
    __swig_getmethods__["fileList"] = _nvcameratools.StreamingStats_fileList_get
    if _newclass:
        fileList = _swig_property(_nvcameratools.StreamingStats_fileList_get, _nvcameratools.StreamingStats_fileList_set)

    def __init__(self):
        this = _nvcameratools.new_StreamingStats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_StreamingStats
    __del__ = lambda self: None
StreamingStats_swigregister = _nvcameratools.StreamingStats_swigregister
StreamingStats_swigregister(StreamingStats)

NV_CAMERA_HAL3_COLOR_YV12 = _nvcameratools.NV_CAMERA_HAL3_COLOR_YV12
NV_CAMERA_HAL3_COLOR_NV12 = _nvcameratools.NV_CAMERA_HAL3_COLOR_NV12
NV_CAMERA_HAL3_COLOR_NV21 = _nvcameratools.NV_CAMERA_HAL3_COLOR_NV21
NV_CAMERA_COLOR_BAYER_RGGB = _nvcameratools.NV_CAMERA_COLOR_BAYER_RGGB
NV_CAMERA_COLOR_BAYER_BGGR = _nvcameratools.NV_CAMERA_COLOR_BAYER_BGGR
NV_CAMERA_COLOR_BAYER_GRBG = _nvcameratools.NV_CAMERA_COLOR_BAYER_GRBG
NV_CAMERA_COLOR_BAYER_GBRG = _nvcameratools.NV_CAMERA_COLOR_BAYER_GBRG
NV_CAMERA_HAL3_COLOR_YUV16_PLANAR_2020_PQ_ER = _nvcameratools.NV_CAMERA_HAL3_COLOR_YUV16_PLANAR_2020_PQ_ER
class ICaptureHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICaptureHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICaptureHandler, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def nextPreviewFrame(self, data, size):
        return _nvcameratools.ICaptureHandler_nextPreviewFrame(self, data, size)

    def nextCapture(self, data, size):
        return _nvcameratools.ICaptureHandler_nextCapture(self, data, size)
ICaptureHandler_swigregister = _nvcameratools.ICaptureHandler_swigregister
ICaptureHandler_swigregister(ICaptureHandler)

NvctResultImageFormat_Unknown = _nvcameratools.NvctResultImageFormat_Unknown
NvctResultImageFormat_Jpeg = _nvcameratools.NvctResultImageFormat_Jpeg
NvctResultImageFormat_Yuv = _nvcameratools.NvctResultImageFormat_Yuv
NvctResultImageFormat_Nvraw = _nvcameratools.NvctResultImageFormat_Nvraw
NvctResultImageFormat_Yuv16 = _nvcameratools.NvctResultImageFormat_Yuv16
NvctResultImageFormat_Last = _nvcameratools.NvctResultImageFormat_Last
NvctResultImageFormat_Force32 = _nvcameratools.NvctResultImageFormat_Force32
NVCT_RESULT_IMAGE_INFO_LIST2_SIZE = _nvcameratools.NVCT_RESULT_IMAGE_INFO_LIST2_SIZE
NvctResultImageDest_Unknown = _nvcameratools.NvctResultImageDest_Unknown
NvctResultImageDest_File = _nvcameratools.NvctResultImageDest_File
NvctResultImageDest_Buffer = _nvcameratools.NvctResultImageDest_Buffer
NvctResultImageDest_Last = _nvcameratools.NvctResultImageDest_Last
NvctResultImageDest_Force32 = _nvcameratools.NvctResultImageDest_Force32
NvctUseCase_Preview = _nvcameratools.NvctUseCase_Preview
NvctUseCase_Still = _nvcameratools.NvctUseCase_Still
NvctUseCase_Video = _nvcameratools.NvctUseCase_Video
NvctUseCase_Last = _nvcameratools.NvctUseCase_Last
NvctUseCase_Force32 = _nvcameratools.NvctUseCase_Force32
NVCT_RESULT_IMAGE_MAX_PATH = _nvcameratools.NVCT_RESULT_IMAGE_MAX_PATH
class NvctResultImageInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctResultImageInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctResultImageInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["format"] = _nvcameratools.NvctResultImageInfo_format_set
    __swig_getmethods__["format"] = _nvcameratools.NvctResultImageInfo_format_get
    if _newclass:
        format = _swig_property(_nvcameratools.NvctResultImageInfo_format_get, _nvcameratools.NvctResultImageInfo_format_set)
    __swig_setmethods__["dest"] = _nvcameratools.NvctResultImageInfo_dest_set
    __swig_getmethods__["dest"] = _nvcameratools.NvctResultImageInfo_dest_get
    if _newclass:
        dest = _swig_property(_nvcameratools.NvctResultImageInfo_dest_get, _nvcameratools.NvctResultImageInfo_dest_set)
    __swig_setmethods__["filename"] = _nvcameratools.NvctResultImageInfo_filename_set
    __swig_getmethods__["filename"] = _nvcameratools.NvctResultImageInfo_filename_get
    if _newclass:
        filename = _swig_property(_nvcameratools.NvctResultImageInfo_filename_get, _nvcameratools.NvctResultImageInfo_filename_set)
    __swig_setmethods__["outputResolution"] = _nvcameratools.NvctResultImageInfo_outputResolution_set
    __swig_getmethods__["outputResolution"] = _nvcameratools.NvctResultImageInfo_outputResolution_get
    if _newclass:
        outputResolution = _swig_property(_nvcameratools.NvctResultImageInfo_outputResolution_get, _nvcameratools.NvctResultImageInfo_outputResolution_set)
    __swig_setmethods__["quality"] = _nvcameratools.NvctResultImageInfo_quality_set
    __swig_getmethods__["quality"] = _nvcameratools.NvctResultImageInfo_quality_get
    if _newclass:
        quality = _swig_property(_nvcameratools.NvctResultImageInfo_quality_get, _nvcameratools.NvctResultImageInfo_quality_set)

    def __init__(self, *args):
        this = _nvcameratools.new_NvctResultImageInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctResultImageInfo
    __del__ = lambda self: None
NvctResultImageInfo_swigregister = _nvcameratools.NvctResultImageInfo_swigregister
NvctResultImageInfo_swigregister(NvctResultImageInfo)

NVCT_RESULT_IMAGE_INFO_SET_VERSION = _nvcameratools.NVCT_RESULT_IMAGE_INFO_SET_VERSION
class NvctResultImageInfoSet_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctResultImageInfoSet_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctResultImageInfoSet_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvcameratools.NvctResultImageInfoSet_v1_version_set
    __swig_getmethods__["version"] = _nvcameratools.NvctResultImageInfoSet_v1_version_get
    if _newclass:
        version = _swig_property(_nvcameratools.NvctResultImageInfoSet_v1_version_get, _nvcameratools.NvctResultImageInfoSet_v1_version_set)
    __swig_setmethods__["size"] = _nvcameratools.NvctResultImageInfoSet_v1_size_set
    __swig_getmethods__["size"] = _nvcameratools.NvctResultImageInfoSet_v1_size_get
    if _newclass:
        size = _swig_property(_nvcameratools.NvctResultImageInfoSet_v1_size_get, _nvcameratools.NvctResultImageInfoSet_v1_size_set)
    __swig_setmethods__["countResultImageInfoList"] = _nvcameratools.NvctResultImageInfoSet_v1_countResultImageInfoList_set
    __swig_getmethods__["countResultImageInfoList"] = _nvcameratools.NvctResultImageInfoSet_v1_countResultImageInfoList_get
    if _newclass:
        countResultImageInfoList = _swig_property(_nvcameratools.NvctResultImageInfoSet_v1_countResultImageInfoList_get, _nvcameratools.NvctResultImageInfoSet_v1_countResultImageInfoList_set)
    __swig_setmethods__["resultImageInfo"] = _nvcameratools.NvctResultImageInfoSet_v1_resultImageInfo_set
    __swig_getmethods__["resultImageInfo"] = _nvcameratools.NvctResultImageInfoSet_v1_resultImageInfo_get
    if _newclass:
        resultImageInfo = _swig_property(_nvcameratools.NvctResultImageInfoSet_v1_resultImageInfo_get, _nvcameratools.NvctResultImageInfoSet_v1_resultImageInfo_set)

    def __init__(self):
        this = _nvcameratools.new_NvctResultImageInfoSet_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctResultImageInfoSet_v1
    __del__ = lambda self: None
NvctResultImageInfoSet_v1_swigregister = _nvcameratools.NvctResultImageInfoSet_v1_swigregister
NvctResultImageInfoSet_v1_swigregister(NvctResultImageInfoSet_v1)

class NvctResultImageCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctResultImageCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctResultImageCapabilities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["format"] = _nvcameratools.NvctResultImageCapabilities_format_set
    __swig_getmethods__["format"] = _nvcameratools.NvctResultImageCapabilities_format_get
    if _newclass:
        format = _swig_property(_nvcameratools.NvctResultImageCapabilities_format_get, _nvcameratools.NvctResultImageCapabilities_format_set)
    __swig_setmethods__["nativeDest"] = _nvcameratools.NvctResultImageCapabilities_nativeDest_set
    __swig_getmethods__["nativeDest"] = _nvcameratools.NvctResultImageCapabilities_nativeDest_get
    if _newclass:
        nativeDest = _swig_property(_nvcameratools.NvctResultImageCapabilities_nativeDest_get, _nvcameratools.NvctResultImageCapabilities_nativeDest_set)
    __swig_setmethods__["bOutputDownscalable"] = _nvcameratools.NvctResultImageCapabilities_bOutputDownscalable_set
    __swig_getmethods__["bOutputDownscalable"] = _nvcameratools.NvctResultImageCapabilities_bOutputDownscalable_get
    if _newclass:
        bOutputDownscalable = _swig_property(_nvcameratools.NvctResultImageCapabilities_bOutputDownscalable_get, _nvcameratools.NvctResultImageCapabilities_bOutputDownscalable_set)
    __swig_setmethods__["bQuality"] = _nvcameratools.NvctResultImageCapabilities_bQuality_set
    __swig_getmethods__["bQuality"] = _nvcameratools.NvctResultImageCapabilities_bQuality_get
    if _newclass:
        bQuality = _swig_property(_nvcameratools.NvctResultImageCapabilities_bQuality_get, _nvcameratools.NvctResultImageCapabilities_bQuality_set)

    def __init__(self, *args):
        this = _nvcameratools.new_NvctResultImageCapabilities(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctResultImageCapabilities
    __del__ = lambda self: None
NvctResultImageCapabilities_swigregister = _nvcameratools.NvctResultImageCapabilities_swigregister
NvctResultImageCapabilities_swigregister(NvctResultImageCapabilities)

class NvctFrameStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctFrameStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctFrameStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["captureTime"] = _nvcameratools.NvctFrameStats_captureTime_set
    __swig_getmethods__["captureTime"] = _nvcameratools.NvctFrameStats_captureTime_get
    if _newclass:
        captureTime = _swig_property(_nvcameratools.NvctFrameStats_captureTime_get, _nvcameratools.NvctFrameStats_captureTime_set)
    __swig_setmethods__["conversionTime"] = _nvcameratools.NvctFrameStats_conversionTime_set
    __swig_getmethods__["conversionTime"] = _nvcameratools.NvctFrameStats_conversionTime_get
    if _newclass:
        conversionTime = _swig_property(_nvcameratools.NvctFrameStats_conversionTime_get, _nvcameratools.NvctFrameStats_conversionTime_set)
    __swig_setmethods__["Padding"] = _nvcameratools.NvctFrameStats_Padding_set
    __swig_getmethods__["Padding"] = _nvcameratools.NvctFrameStats_Padding_get
    if _newclass:
        Padding = _swig_property(_nvcameratools.NvctFrameStats_Padding_get, _nvcameratools.NvctFrameStats_Padding_set)

    def __init__(self):
        this = _nvcameratools.new_NvctFrameStats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctFrameStats
    __del__ = lambda self: None
NvctFrameStats_swigregister = _nvcameratools.NvctFrameStats_swigregister
NvctFrameStats_swigregister(NvctFrameStats)

NvctVisionType_Unknown = _nvcameratools.NvctVisionType_Unknown
NvctVisionType_Human = _nvcameratools.NvctVisionType_Human
NvctVisionType_Machine = _nvcameratools.NvctVisionType_Machine
NvctVisionType_Last = _nvcameratools.NvctVisionType_Last
NvctVisionType_Force32 = _nvcameratools.NvctVisionType_Force32
NVCT_INVALID_SENSOR_MODE_INDEX = _nvcameratools.NVCT_INVALID_SENSOR_MODE_INDEX
class ICaptureHandler_20(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICaptureHandler_20, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICaptureHandler_20, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def nextPreviewFrame(self, format, filename, data, size, pFrameStats):
        return _nvcameratools.ICaptureHandler_20_nextPreviewFrame(self, format, filename, data, size, pFrameStats)

    def nextCapture(self, format, filename, data, size, pFrameStats):
        return _nvcameratools.ICaptureHandler_20_nextCapture(self, format, filename, data, size, pFrameStats)
ICaptureHandler_20_swigregister = _nvcameratools.ICaptureHandler_20_swigregister
ICaptureHandler_20_swigregister(ICaptureHandler_20)

class NvctCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctCapabilities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["resultImageCapabilities"] = _nvcameratools.NvctCapabilities_resultImageCapabilities_set
    __swig_getmethods__["resultImageCapabilities"] = _nvcameratools.NvctCapabilities_resultImageCapabilities_get
    if _newclass:
        resultImageCapabilities = _swig_property(_nvcameratools.NvctCapabilities_resultImageCapabilities_get, _nvcameratools.NvctCapabilities_resultImageCapabilities_set)

    def __init__(self):
        this = _nvcameratools.new_NvctCapabilities()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctCapabilities
    __del__ = lambda self: None
NvctCapabilities_swigregister = _nvcameratools.NvctCapabilities_swigregister
NvctCapabilities_swigregister(NvctCapabilities)

NVCT_CAPABILITIES_SET_VERSION = _nvcameratools.NVCT_CAPABILITIES_SET_VERSION
class NvctCapabilitiesSet_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctCapabilitiesSet_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctCapabilitiesSet_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvcameratools.NvctCapabilitiesSet_v1_version_set
    __swig_getmethods__["version"] = _nvcameratools.NvctCapabilitiesSet_v1_version_get
    if _newclass:
        version = _swig_property(_nvcameratools.NvctCapabilitiesSet_v1_version_get, _nvcameratools.NvctCapabilitiesSet_v1_version_set)
    __swig_setmethods__["size"] = _nvcameratools.NvctCapabilitiesSet_v1_size_set
    __swig_getmethods__["size"] = _nvcameratools.NvctCapabilitiesSet_v1_size_get
    if _newclass:
        size = _swig_property(_nvcameratools.NvctCapabilitiesSet_v1_size_get, _nvcameratools.NvctCapabilitiesSet_v1_size_set)
    __swig_setmethods__["countResultImageInfoList"] = _nvcameratools.NvctCapabilitiesSet_v1_countResultImageInfoList_set
    __swig_getmethods__["countResultImageInfoList"] = _nvcameratools.NvctCapabilitiesSet_v1_countResultImageInfoList_get
    if _newclass:
        countResultImageInfoList = _swig_property(_nvcameratools.NvctCapabilitiesSet_v1_countResultImageInfoList_get, _nvcameratools.NvctCapabilitiesSet_v1_countResultImageInfoList_set)
    __swig_setmethods__["resultImageCapabilities"] = _nvcameratools.NvctCapabilitiesSet_v1_resultImageCapabilities_set
    __swig_getmethods__["resultImageCapabilities"] = _nvcameratools.NvctCapabilitiesSet_v1_resultImageCapabilities_get
    if _newclass:
        resultImageCapabilities = _swig_property(_nvcameratools.NvctCapabilitiesSet_v1_resultImageCapabilities_get, _nvcameratools.NvctCapabilitiesSet_v1_resultImageCapabilities_set)

    def __init__(self):
        this = _nvcameratools.new_NvctCapabilitiesSet_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctCapabilitiesSet_v1
    __del__ = lambda self: None
NvctCapabilitiesSet_v1_swigregister = _nvcameratools.NvctCapabilitiesSet_v1_swigregister
NvctCapabilitiesSet_v1_swigregister(NvctCapabilitiesSet_v1)

class NvctVisionCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctVisionCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctVisionCapabilities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bMachineVisionSupported"] = _nvcameratools.NvctVisionCapabilities_bMachineVisionSupported_set
    __swig_getmethods__["bMachineVisionSupported"] = _nvcameratools.NvctVisionCapabilities_bMachineVisionSupported_get
    if _newclass:
        bMachineVisionSupported = _swig_property(_nvcameratools.NvctVisionCapabilities_bMachineVisionSupported_get, _nvcameratools.NvctVisionCapabilities_bMachineVisionSupported_set)

    def __init__(self):
        this = _nvcameratools.new_NvctVisionCapabilities()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctVisionCapabilities
    __del__ = lambda self: None
NvctVisionCapabilities_swigregister = _nvcameratools.NvctVisionCapabilities_swigregister
NvctVisionCapabilities_swigregister(NvctVisionCapabilities)

class NvctVisionCapabilities_v2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctVisionCapabilities_v2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctVisionCapabilities_v2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bMachineVisionSupported"] = _nvcameratools.NvctVisionCapabilities_v2_bMachineVisionSupported_set
    __swig_getmethods__["bMachineVisionSupported"] = _nvcameratools.NvctVisionCapabilities_v2_bMachineVisionSupported_get
    if _newclass:
        bMachineVisionSupported = _swig_property(_nvcameratools.NvctVisionCapabilities_v2_bMachineVisionSupported_get, _nvcameratools.NvctVisionCapabilities_v2_bMachineVisionSupported_set)
    __swig_setmethods__["bUnifiedVisionSupported"] = _nvcameratools.NvctVisionCapabilities_v2_bUnifiedVisionSupported_set
    __swig_getmethods__["bUnifiedVisionSupported"] = _nvcameratools.NvctVisionCapabilities_v2_bUnifiedVisionSupported_get
    if _newclass:
        bUnifiedVisionSupported = _swig_property(_nvcameratools.NvctVisionCapabilities_v2_bUnifiedVisionSupported_get, _nvcameratools.NvctVisionCapabilities_v2_bUnifiedVisionSupported_set)

    def __init__(self):
        this = _nvcameratools.new_NvctVisionCapabilities_v2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctVisionCapabilities_v2
    __del__ = lambda self: None
NvctVisionCapabilities_v2_swigregister = _nvcameratools.NvctVisionCapabilities_v2_swigregister
NvctVisionCapabilities_v2_swigregister(NvctVisionCapabilities_v2)

class NvctOSInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctOSInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctOSInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["osInfoAvailable"] = _nvcameratools.NvctOSInfo_osInfoAvailable_set
    __swig_getmethods__["osInfoAvailable"] = _nvcameratools.NvctOSInfo_osInfoAvailable_get
    if _newclass:
        osInfoAvailable = _swig_property(_nvcameratools.NvctOSInfo_osInfoAvailable_get, _nvcameratools.NvctOSInfo_osInfoAvailable_set)
    __swig_setmethods__["osID"] = _nvcameratools.NvctOSInfo_osID_set
    __swig_getmethods__["osID"] = _nvcameratools.NvctOSInfo_osID_get
    if _newclass:
        osID = _swig_property(_nvcameratools.NvctOSInfo_osID_get, _nvcameratools.NvctOSInfo_osID_set)
    __swig_setmethods__["osDistributeVersion"] = _nvcameratools.NvctOSInfo_osDistributeVersion_set
    __swig_getmethods__["osDistributeVersion"] = _nvcameratools.NvctOSInfo_osDistributeVersion_get
    if _newclass:
        osDistributeVersion = _swig_property(_nvcameratools.NvctOSInfo_osDistributeVersion_get, _nvcameratools.NvctOSInfo_osDistributeVersion_set)
    __swig_setmethods__["processor"] = _nvcameratools.NvctOSInfo_processor_set
    __swig_getmethods__["processor"] = _nvcameratools.NvctOSInfo_processor_get
    if _newclass:
        processor = _swig_property(_nvcameratools.NvctOSInfo_processor_get, _nvcameratools.NvctOSInfo_processor_set)

    def __init__(self):
        this = _nvcameratools.new_NvctOSInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctOSInfo
    __del__ = lambda self: None
NvctOSInfo_swigregister = _nvcameratools.NvctOSInfo_swigregister
NvctOSInfo_swigregister(NvctOSInfo)

NVCT_INFO_MAX_LENGTH = _nvcameratools.NVCT_INFO_MAX_LENGTH
class NvctInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvctInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvctInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["osInfo"] = _nvcameratools.NvctInfo_osInfo_set
    __swig_getmethods__["osInfo"] = _nvcameratools.NvctInfo_osInfo_get
    if _newclass:
        osInfo = _swig_property(_nvcameratools.NvctInfo_osInfo_get, _nvcameratools.NvctInfo_osInfo_set)
    __swig_setmethods__["padding"] = _nvcameratools.NvctInfo_padding_set
    __swig_getmethods__["padding"] = _nvcameratools.NvctInfo_padding_get
    if _newclass:
        padding = _swig_property(_nvcameratools.NvctInfo_padding_get, _nvcameratools.NvctInfo_padding_set)

    def __init__(self):
        this = _nvcameratools.new_NvctInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_NvctInfo
    __del__ = lambda self: None
NvctInfo_swigregister = _nvcameratools.NvctInfo_swigregister
NvctInfo_swigregister(NvctInfo)

NvctPlugin_Unknown = _nvcameratools.NvctPlugin_Unknown
NvctPlugin_Nv = _nvcameratools.NvctPlugin_Nv
NvctPlugin_Sample = _nvcameratools.NvctPlugin_Sample
NvctPlugin_Force32 = _nvcameratools.NvctPlugin_Force32
NV_IMAGER_AUTO_BACK = _nvcameratools.NV_IMAGER_AUTO_BACK
NV_IMAGER_AUTO_FRONT = _nvcameratools.NV_IMAGER_AUTO_FRONT
class INvCameraTools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INvCameraTools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INvCameraTools, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def openImager(self, imagerGuid):
        return _nvcameratools.INvCameraTools_openImager(self, imagerGuid)

    def getSupportedModes(self, modes):
        return _nvcameratools.INvCameraTools_getSupportedModes(self, modes)

    def setSensorMode(self, usecase, mode):
        return _nvcameratools.INvCameraTools_setSensorMode(self, usecase, mode)

    def setJpegResolution(self, useCase, resolution):
        return _nvcameratools.INvCameraTools_setJpegResolution(self, useCase, resolution)

    def setJpegQuality(self, useCase, quality):
        return _nvcameratools.INvCameraTools_setJpegQuality(self, useCase, quality)

    def initialize(self):
        return _nvcameratools.INvCameraTools_initialize(self)

    def shutdown(self):
        return _nvcameratools.INvCameraTools_shutdown(self)

    def startPreview(self):
        return _nvcameratools.INvCameraTools_startPreview(self)

    def stopPreview(self):
        return _nvcameratools.INvCameraTools_stopPreview(self)

    def setProperty(self, property):
        return _nvcameratools.INvCameraTools_setProperty(self, property)

    def getProperty(self, property):
        return _nvcameratools.INvCameraTools_getProperty(self, property)

    def setRawImage(self, header, pixels, iteration):
        return _nvcameratools.INvCameraTools_setRawImage(self, header, pixels, iteration)

    def loadNVRawFile(self, pFileName):
        return _nvcameratools.INvCameraTools_loadNVRawFile(self, pFileName)

    def loadNVRawData(self, nvrawfile):
        return _nvcameratools.INvCameraTools_loadNVRawData(self, nvrawfile)

    def setHostInputIteration(self, iteration):
        return _nvcameratools.INvCameraTools_setHostInputIteration(self, iteration)

    def captureRequest(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_captureRequest(self, timeoutMsec)

    def registerCaptureHandler(self, handler):
        return _nvcameratools.INvCameraTools_registerCaptureHandler(self, handler)

    def closeImager(self):
        return _nvcameratools.INvCameraTools_closeImager(self)
    __swig_destroy__ = _nvcameratools.delete_INvCameraTools
    __del__ = lambda self: None

    def halfPress(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_halfPress(self, timeoutMsec)

    def halfPressRelease(self):
        return _nvcameratools.INvCameraTools_halfPressRelease(self)

    def waitForEvent(self, timeoutMsec, flag):
        return _nvcameratools.INvCameraTools_waitForEvent(self, timeoutMsec, flag)

    def captureRequestGeneric(self, timeoutMsec, colorFormat):
        return _nvcameratools.INvCameraTools_captureRequestGeneric(self, timeoutMsec, colorFormat)

    def captureRequestBayer(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_captureRequestBayer(self, timeoutMsec)

    def getBufferAllocationCapability(self, resolution, format, buffers):
        return _nvcameratools.INvCameraTools_getBufferAllocationCapability(self, resolution, format, buffers)

    def setStreamingParameters(self, parameters):
        return _nvcameratools.INvCameraTools_setStreamingParameters(self, parameters)

    def getStreamingStats(self, stats):
        return _nvcameratools.INvCameraTools_getStreamingStats(self, stats)

    def PFP_enable(self, bEnable):
        return _nvcameratools.INvCameraTools_PFP_enable(self, bEnable)

    def PFP_loadFile(self, pFilename):
        return _nvcameratools.INvCameraTools_PFP_loadFile(self, pFilename)

    def PFP_dumpFile(self, pFilename):
        return _nvcameratools.INvCameraTools_PFP_dumpFile(self, pFilename)

    def PFP_addFrameProperty(self, frameNumber, propertyNumber, camProperty):
        return _nvcameratools.INvCameraTools_PFP_addFrameProperty(self, frameNumber, propertyNumber, camProperty)

    def PFP_removeProperty(self, *args):
        return _nvcameratools.INvCameraTools_PFP_removeProperty(self, *args)

    def PFP_removeFrame(self, frameNumber):
        return _nvcameratools.INvCameraTools_PFP_removeFrame(self, frameNumber)

    def PFP_removeAll(self):
        return _nvcameratools.INvCameraTools_PFP_removeAll(self)

    def PFP_setFrameLoopCount(self, count):
        return _nvcameratools.INvCameraTools_PFP_setFrameLoopCount(self, count)
INvCameraTools_swigregister = _nvcameratools.INvCameraTools_swigregister
INvCameraTools_swigregister(INvCameraTools)

class INvCameraTools_50(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INvCameraTools_50, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INvCameraTools_50, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setJpegResolution(self, useCase, resolution):
        return _nvcameratools.INvCameraTools_50_setJpegResolution(self, useCase, resolution)

    def setJpegQuality(self, useCase, quality):
        return _nvcameratools.INvCameraTools_50_setJpegQuality(self, useCase, quality)

    def initialize(self):
        return _nvcameratools.INvCameraTools_50_initialize(self)

    def shutdown(self):
        return _nvcameratools.INvCameraTools_50_shutdown(self)

    def startPreview(self):
        return _nvcameratools.INvCameraTools_50_startPreview(self)

    def stopPreview(self):
        return _nvcameratools.INvCameraTools_50_stopPreview(self)

    def setProperty(self, property):
        return _nvcameratools.INvCameraTools_50_setProperty(self, property)

    def getProperty(self, property):
        return _nvcameratools.INvCameraTools_50_getProperty(self, property)

    def setRawImage(self, header, pixels, iteration):
        return _nvcameratools.INvCameraTools_50_setRawImage(self, header, pixels, iteration)

    def loadNVRawFile(self, pFileName):
        return _nvcameratools.INvCameraTools_50_loadNVRawFile(self, pFileName)

    def loadNVRawData(self, nvrawfile):
        return _nvcameratools.INvCameraTools_50_loadNVRawData(self, nvrawfile)

    def setHostInputIteration(self, iteration):
        return _nvcameratools.INvCameraTools_50_setHostInputIteration(self, iteration)

    def captureRequest(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_50_captureRequest(self, timeoutMsec)

    def closeImager(self):
        return _nvcameratools.INvCameraTools_50_closeImager(self)
    __swig_destroy__ = _nvcameratools.delete_INvCameraTools_50
    __del__ = lambda self: None

    def halfPress(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_50_halfPress(self, timeoutMsec)

    def halfPressRelease(self):
        return _nvcameratools.INvCameraTools_50_halfPressRelease(self)

    def waitForEvent(self, timeoutMsec, flag):
        return _nvcameratools.INvCameraTools_50_waitForEvent(self, timeoutMsec, flag)

    def captureRequestGeneric(self, timeoutMsec, colorFormat):
        return _nvcameratools.INvCameraTools_50_captureRequestGeneric(self, timeoutMsec, colorFormat)

    def captureRequestBayer(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_50_captureRequestBayer(self, timeoutMsec)

    def getBufferAllocationCapability(self, resolution, format, buffers):
        return _nvcameratools.INvCameraTools_50_getBufferAllocationCapability(self, resolution, format, buffers)

    def setStreamingParameters(self, parameters):
        return _nvcameratools.INvCameraTools_50_setStreamingParameters(self, parameters)

    def getStreamingStats(self, stats):
        return _nvcameratools.INvCameraTools_50_getStreamingStats(self, stats)

    def PFP_enable(self, bEnable):
        return _nvcameratools.INvCameraTools_50_PFP_enable(self, bEnable)

    def PFP_loadFile(self, pFilename):
        return _nvcameratools.INvCameraTools_50_PFP_loadFile(self, pFilename)

    def PFP_dumpFile(self, pFilename):
        return _nvcameratools.INvCameraTools_50_PFP_dumpFile(self, pFilename)

    def PFP_addFrameProperty(self, frameNumber, propertyNumber, camProperty):
        return _nvcameratools.INvCameraTools_50_PFP_addFrameProperty(self, frameNumber, propertyNumber, camProperty)

    def PFP_removeProperty(self, *args):
        return _nvcameratools.INvCameraTools_50_PFP_removeProperty(self, *args)

    def PFP_removeFrame(self, frameNumber):
        return _nvcameratools.INvCameraTools_50_PFP_removeFrame(self, frameNumber)

    def PFP_removeAll(self):
        return _nvcameratools.INvCameraTools_50_PFP_removeAll(self)

    def PFP_setFrameLoopCount(self, count):
        return _nvcameratools.INvCameraTools_50_PFP_setFrameLoopCount(self, count)

    def getNumSupportedModes(self):
        return _nvcameratools.INvCameraTools_50_getNumSupportedModes(self)

    def getSupportedModes(self, pNvctModeList):
        return _nvcameratools.INvCameraTools_50_getSupportedModes(self, pNvctModeList)

    def setSensorMode(self, usecase, mode):
        return _nvcameratools.INvCameraTools_50_setSensorMode(self, usecase, mode)

    def getHdrCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_50_getHdrCapabilities(self, capabilities)

    def getHdrCurrentMode(self):
        return _nvcameratools.INvCameraTools_50_getHdrCurrentMode(self)

    def enableHdr(self, hdrMode):
        return _nvcameratools.INvCameraTools_50_enableHdr(self, hdrMode)

    def getFrameLUT(self, frameId, buffer, pSize):
        return _nvcameratools.INvCameraTools_50_getFrameLUT(self, frameId, buffer, pSize)

    def GetDctCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_50_GetDctCapabilities(self, capabilities)

    def setResultImageInfo(self, pResultImageInfo):
        return _nvcameratools.INvCameraTools_50_setResultImageInfo(self, pResultImageInfo)

    def registerCaptureHandler(self, *args):
        return _nvcameratools.INvCameraTools_50_registerCaptureHandler(self, *args)

    def getNvCameraToolsCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_50_getNvCameraToolsCapabilities(self, capabilities)

    def getVisionCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_50_getVisionCapabilities(self, capabilities)

    def setVisionType(self, vision):
        return _nvcameratools.INvCameraTools_50_setVisionType(self, vision)

    def getInfo(self, info):
        return _nvcameratools.INvCameraTools_50_getInfo(self, info)

    def openImager(self, *args):
        return _nvcameratools.INvCameraTools_50_openImager(self, *args)

    def setSensorConfigFile(self, pSensorConfigFile):
        return _nvcameratools.INvCameraTools_50_setSensorConfigFile(self, pSensorConfigFile)

    def getNumSupportedSensorEntries(self):
        return _nvcameratools.INvCameraTools_50_getNumSupportedSensorEntries(self)

    def getSensorProperty(self, index, camSProp):
        return _nvcameratools.INvCameraTools_50_getSensorProperty(self, index, camSProp)

    def getCameraOverrideFileSize(self, visionType):
        return _nvcameratools.INvCameraTools_50_getCameraOverrideFileSize(self, visionType)

    def getCameraOverrideFileContents(self, visionType, pBuffer):
        return _nvcameratools.INvCameraTools_50_getCameraOverrideFileContents(self, visionType, pBuffer)

    def setPlugin(self, plugIn):
        return _nvcameratools.INvCameraTools_50_setPlugin(self, plugIn)

    def setExposureMode(self, exposureMode):
        return _nvcameratools.INvCameraTools_50_setExposureMode(self, exposureMode)
INvCameraTools_50_swigregister = _nvcameratools.INvCameraTools_50_swigregister
INvCameraTools_50_swigregister(INvCameraTools_50)

INVCAMERATOOLS_60_DEFINED = _nvcameratools.INVCAMERATOOLS_60_DEFINED
class INvCameraTools_60(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INvCameraTools_60, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INvCameraTools_60, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setJpegResolution(self, useCase, resolution):
        return _nvcameratools.INvCameraTools_60_setJpegResolution(self, useCase, resolution)

    def setJpegQuality(self, useCase, quality):
        return _nvcameratools.INvCameraTools_60_setJpegQuality(self, useCase, quality)

    def initialize(self):
        return _nvcameratools.INvCameraTools_60_initialize(self)

    def shutdown(self):
        return _nvcameratools.INvCameraTools_60_shutdown(self)

    def startPreview(self):
        return _nvcameratools.INvCameraTools_60_startPreview(self)

    def stopPreview(self):
        return _nvcameratools.INvCameraTools_60_stopPreview(self)

    def setProperty(self, property):
        return _nvcameratools.INvCameraTools_60_setProperty(self, property)

    def getProperty(self, property):
        return _nvcameratools.INvCameraTools_60_getProperty(self, property)

    def setRawImage(self, header, pixels, iteration):
        return _nvcameratools.INvCameraTools_60_setRawImage(self, header, pixels, iteration)

    def loadNVRawFile(self, pFileName):
        return _nvcameratools.INvCameraTools_60_loadNVRawFile(self, pFileName)

    def loadNVRawData(self, nvrawfile):
        return _nvcameratools.INvCameraTools_60_loadNVRawData(self, nvrawfile)

    def setHostInputIteration(self, iteration):
        return _nvcameratools.INvCameraTools_60_setHostInputIteration(self, iteration)

    def captureRequest(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_60_captureRequest(self, timeoutMsec)

    def closeImager(self):
        return _nvcameratools.INvCameraTools_60_closeImager(self)
    __swig_destroy__ = _nvcameratools.delete_INvCameraTools_60
    __del__ = lambda self: None

    def halfPress(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_60_halfPress(self, timeoutMsec)

    def halfPressRelease(self):
        return _nvcameratools.INvCameraTools_60_halfPressRelease(self)

    def waitForEvent(self, timeoutMsec, flag):
        return _nvcameratools.INvCameraTools_60_waitForEvent(self, timeoutMsec, flag)

    def captureRequestGeneric(self, timeoutMsec, colorFormat):
        return _nvcameratools.INvCameraTools_60_captureRequestGeneric(self, timeoutMsec, colorFormat)

    def captureRequestBayer(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_60_captureRequestBayer(self, timeoutMsec)

    def getBufferAllocationCapability(self, resolution, format, buffers):
        return _nvcameratools.INvCameraTools_60_getBufferAllocationCapability(self, resolution, format, buffers)

    def setStreamingParameters(self, parameters):
        return _nvcameratools.INvCameraTools_60_setStreamingParameters(self, parameters)

    def getStreamingStats(self, stats):
        return _nvcameratools.INvCameraTools_60_getStreamingStats(self, stats)

    def PFP_enable(self, bEnable):
        return _nvcameratools.INvCameraTools_60_PFP_enable(self, bEnable)

    def PFP_loadFile(self, pFilename):
        return _nvcameratools.INvCameraTools_60_PFP_loadFile(self, pFilename)

    def PFP_dumpFile(self, pFilename):
        return _nvcameratools.INvCameraTools_60_PFP_dumpFile(self, pFilename)

    def PFP_addFrameProperty(self, frameNumber, propertyNumber, camProperty):
        return _nvcameratools.INvCameraTools_60_PFP_addFrameProperty(self, frameNumber, propertyNumber, camProperty)

    def PFP_removeProperty(self, *args):
        return _nvcameratools.INvCameraTools_60_PFP_removeProperty(self, *args)

    def PFP_removeFrame(self, frameNumber):
        return _nvcameratools.INvCameraTools_60_PFP_removeFrame(self, frameNumber)

    def PFP_removeAll(self):
        return _nvcameratools.INvCameraTools_60_PFP_removeAll(self)

    def PFP_setFrameLoopCount(self, count):
        return _nvcameratools.INvCameraTools_60_PFP_setFrameLoopCount(self, count)

    def getNumSupportedModes(self):
        return _nvcameratools.INvCameraTools_60_getNumSupportedModes(self)

    def getSupportedModes(self, pNvctModeList):
        return _nvcameratools.INvCameraTools_60_getSupportedModes(self, pNvctModeList)

    def getHdrCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_60_getHdrCapabilities(self, capabilities)

    def getHdrCurrentMode(self):
        return _nvcameratools.INvCameraTools_60_getHdrCurrentMode(self)

    def enableHdr(self, hdrMode):
        return _nvcameratools.INvCameraTools_60_enableHdr(self, hdrMode)

    def getFrameLUT(self, frameId, buffer, pSize):
        return _nvcameratools.INvCameraTools_60_getFrameLUT(self, frameId, buffer, pSize)

    def GetDctCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_60_GetDctCapabilities(self, capabilities)

    def setResultImageInfo(self, pResultImageInfo):
        return _nvcameratools.INvCameraTools_60_setResultImageInfo(self, pResultImageInfo)

    def registerCaptureHandler(self, *args):
        return _nvcameratools.INvCameraTools_60_registerCaptureHandler(self, *args)

    def getNvCameraToolsCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_60_getNvCameraToolsCapabilities(self, capabilities)

    def getVisionCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_60_getVisionCapabilities(self, capabilities)

    def setVisionType(self, vision):
        return _nvcameratools.INvCameraTools_60_setVisionType(self, vision)

    def getInfo(self, info):
        return _nvcameratools.INvCameraTools_60_getInfo(self, info)

    def openImager(self, *args):
        return _nvcameratools.INvCameraTools_60_openImager(self, *args)

    def setSensorConfigFile(self, pSensorConfigFile):
        return _nvcameratools.INvCameraTools_60_setSensorConfigFile(self, pSensorConfigFile)

    def getNumSupportedSensorEntries(self):
        return _nvcameratools.INvCameraTools_60_getNumSupportedSensorEntries(self)

    def getSensorProperty(self, index, camSProp):
        return _nvcameratools.INvCameraTools_60_getSensorProperty(self, index, camSProp)

    def getCameraOverrideFileSize(self, visionType):
        return _nvcameratools.INvCameraTools_60_getCameraOverrideFileSize(self, visionType)

    def getCameraOverrideFileContents(self, visionType, pBuffer):
        return _nvcameratools.INvCameraTools_60_getCameraOverrideFileContents(self, visionType, pBuffer)

    def setPlugin(self, plugIn):
        return _nvcameratools.INvCameraTools_60_setPlugin(self, plugIn)

    def setExposureMode(self, exposureMode):
        return _nvcameratools.INvCameraTools_60_setExposureMode(self, exposureMode)

    def getNvCameraToolsCapabilitiesSet(self, pCapabilitiesSet):
        return _nvcameratools.INvCameraTools_60_getNvCameraToolsCapabilitiesSet(self, pCapabilitiesSet)

    def setResultImageInfoSet(self, pResultImageInfoSet):
        return _nvcameratools.INvCameraTools_60_setResultImageInfoSet(self, pResultImageInfoSet)

    def setSensorMode(self, *args):
        return _nvcameratools.INvCameraTools_60_setSensorMode(self, *args)

    def getSensorMode(self, usecase):
        return _nvcameratools.INvCameraTools_60_getSensorMode(self, usecase)
INvCameraTools_60_swigregister = _nvcameratools.INvCameraTools_60_swigregister
INvCameraTools_60_swigregister(INvCameraTools_60)

INVCAMERATOOLS_70_DEFINED = _nvcameratools.INVCAMERATOOLS_70_DEFINED
class INvCameraTools_70(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INvCameraTools_70, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INvCameraTools_70, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setJpegResolution(self, useCase, resolution):
        return _nvcameratools.INvCameraTools_70_setJpegResolution(self, useCase, resolution)

    def setJpegQuality(self, useCase, quality):
        return _nvcameratools.INvCameraTools_70_setJpegQuality(self, useCase, quality)

    def initialize(self):
        return _nvcameratools.INvCameraTools_70_initialize(self)

    def shutdown(self):
        return _nvcameratools.INvCameraTools_70_shutdown(self)

    def startPreview(self):
        return _nvcameratools.INvCameraTools_70_startPreview(self)

    def stopPreview(self):
        return _nvcameratools.INvCameraTools_70_stopPreview(self)

    def setProperty(self, property):
        return _nvcameratools.INvCameraTools_70_setProperty(self, property)

    def getProperty(self, property):
        return _nvcameratools.INvCameraTools_70_getProperty(self, property)

    def setRawImage(self, header, pixels, iteration):
        return _nvcameratools.INvCameraTools_70_setRawImage(self, header, pixels, iteration)

    def loadNVRawFile(self, pFileName):
        return _nvcameratools.INvCameraTools_70_loadNVRawFile(self, pFileName)

    def loadNVRawData(self, nvrawfile):
        return _nvcameratools.INvCameraTools_70_loadNVRawData(self, nvrawfile)

    def setHostInputIteration(self, iteration):
        return _nvcameratools.INvCameraTools_70_setHostInputIteration(self, iteration)

    def captureRequest(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_70_captureRequest(self, timeoutMsec)

    def closeImager(self):
        return _nvcameratools.INvCameraTools_70_closeImager(self)
    __swig_destroy__ = _nvcameratools.delete_INvCameraTools_70
    __del__ = lambda self: None

    def halfPress(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_70_halfPress(self, timeoutMsec)

    def halfPressRelease(self):
        return _nvcameratools.INvCameraTools_70_halfPressRelease(self)

    def waitForEvent(self, timeoutMsec, flag):
        return _nvcameratools.INvCameraTools_70_waitForEvent(self, timeoutMsec, flag)

    def captureRequestGeneric(self, timeoutMsec, colorFormat):
        return _nvcameratools.INvCameraTools_70_captureRequestGeneric(self, timeoutMsec, colorFormat)

    def captureRequestBayer(self, timeoutMsec):
        return _nvcameratools.INvCameraTools_70_captureRequestBayer(self, timeoutMsec)

    def getBufferAllocationCapability(self, resolution, format, buffers):
        return _nvcameratools.INvCameraTools_70_getBufferAllocationCapability(self, resolution, format, buffers)

    def setStreamingParameters(self, parameters):
        return _nvcameratools.INvCameraTools_70_setStreamingParameters(self, parameters)

    def getStreamingStats(self, stats):
        return _nvcameratools.INvCameraTools_70_getStreamingStats(self, stats)

    def PFP_enable(self, bEnable):
        return _nvcameratools.INvCameraTools_70_PFP_enable(self, bEnable)

    def PFP_loadFile(self, pFilename):
        return _nvcameratools.INvCameraTools_70_PFP_loadFile(self, pFilename)

    def PFP_dumpFile(self, pFilename):
        return _nvcameratools.INvCameraTools_70_PFP_dumpFile(self, pFilename)

    def PFP_addFrameProperty(self, frameNumber, propertyNumber, camProperty):
        return _nvcameratools.INvCameraTools_70_PFP_addFrameProperty(self, frameNumber, propertyNumber, camProperty)

    def PFP_removeProperty(self, *args):
        return _nvcameratools.INvCameraTools_70_PFP_removeProperty(self, *args)

    def PFP_removeFrame(self, frameNumber):
        return _nvcameratools.INvCameraTools_70_PFP_removeFrame(self, frameNumber)

    def PFP_removeAll(self):
        return _nvcameratools.INvCameraTools_70_PFP_removeAll(self)

    def PFP_setFrameLoopCount(self, count):
        return _nvcameratools.INvCameraTools_70_PFP_setFrameLoopCount(self, count)

    def getNumSupportedModes(self):
        return _nvcameratools.INvCameraTools_70_getNumSupportedModes(self)

    def getSupportedModes(self, pNvctModeList):
        return _nvcameratools.INvCameraTools_70_getSupportedModes(self, pNvctModeList)

    def getHdrCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_70_getHdrCapabilities(self, capabilities)

    def getHdrCurrentMode(self):
        return _nvcameratools.INvCameraTools_70_getHdrCurrentMode(self)

    def enableHdr(self, hdrMode):
        return _nvcameratools.INvCameraTools_70_enableHdr(self, hdrMode)

    def getFrameLUT(self, frameId, buffer, pSize):
        return _nvcameratools.INvCameraTools_70_getFrameLUT(self, frameId, buffer, pSize)

    def GetDctCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_70_GetDctCapabilities(self, capabilities)

    def setResultImageInfo(self, pResultImageInfo):
        return _nvcameratools.INvCameraTools_70_setResultImageInfo(self, pResultImageInfo)

    def registerCaptureHandler(self, *args):
        return _nvcameratools.INvCameraTools_70_registerCaptureHandler(self, *args)

    def getNvCameraToolsCapabilities(self, capabilities):
        return _nvcameratools.INvCameraTools_70_getNvCameraToolsCapabilities(self, capabilities)

    def setVisionType(self, vision):
        return _nvcameratools.INvCameraTools_70_setVisionType(self, vision)

    def getInfo(self, info):
        return _nvcameratools.INvCameraTools_70_getInfo(self, info)

    def openImager(self, *args):
        return _nvcameratools.INvCameraTools_70_openImager(self, *args)

    def setSensorConfigFile(self, pSensorConfigFile):
        return _nvcameratools.INvCameraTools_70_setSensorConfigFile(self, pSensorConfigFile)

    def getNumSupportedSensorEntries(self):
        return _nvcameratools.INvCameraTools_70_getNumSupportedSensorEntries(self)

    def getSensorProperty(self, index, camSProp):
        return _nvcameratools.INvCameraTools_70_getSensorProperty(self, index, camSProp)

    def getCameraOverrideFileSize(self, visionType):
        return _nvcameratools.INvCameraTools_70_getCameraOverrideFileSize(self, visionType)

    def getCameraOverrideFileContents(self, visionType, pBuffer):
        return _nvcameratools.INvCameraTools_70_getCameraOverrideFileContents(self, visionType, pBuffer)

    def setPlugin(self, plugIn):
        return _nvcameratools.INvCameraTools_70_setPlugin(self, plugIn)

    def setExposureMode(self, exposureMode):
        return _nvcameratools.INvCameraTools_70_setExposureMode(self, exposureMode)

    def getNvCameraToolsCapabilitiesSet(self, pCapabilitiesSet):
        return _nvcameratools.INvCameraTools_70_getNvCameraToolsCapabilitiesSet(self, pCapabilitiesSet)

    def setResultImageInfoSet(self, pResultImageInfoSet):
        return _nvcameratools.INvCameraTools_70_setResultImageInfoSet(self, pResultImageInfoSet)

    def setSensorMode(self, *args):
        return _nvcameratools.INvCameraTools_70_setSensorMode(self, *args)

    def getSensorMode(self, usecase):
        return _nvcameratools.INvCameraTools_70_getSensorMode(self, usecase)

    def setNvRawVersion(self, majorVersion):
        return _nvcameratools.INvCameraTools_70_setNvRawVersion(self, majorVersion)

    def getVisionCapabilities(self, *args):
        return _nvcameratools.INvCameraTools_70_getVisionCapabilities(self, *args)
INvCameraTools_70_swigregister = _nvcameratools.INvCameraTools_70_swigregister
INvCameraTools_70_swigregister(INvCameraTools_70)


def getNvCameraToolsVersion():
    return _nvcameratools.getNvCameraToolsVersion()
getNvCameraToolsVersion = _nvcameratools.getNvCameraToolsVersion

def createNvCameraTools(version, outPtr):
    return _nvcameratools.createNvCameraTools(version, outPtr)
createNvCameraTools = _nvcameratools.createNvCameraTools

def createNvCameraTools_50(outPtr):
    return _nvcameratools.createNvCameraTools_50(outPtr)
createNvCameraTools_50 = _nvcameratools.createNvCameraTools_50

def createNvCameraTools_60(outPtr):
    return _nvcameratools.createNvCameraTools_60(outPtr)
createNvCameraTools_60 = _nvcameratools.createNvCameraTools_60

def createNvCameraTools_70(outPtr):
    return _nvcameratools.createNvCameraTools_70(outPtr)
createNvCameraTools_70 = _nvcameratools.createNvCameraTools_70

def SWIG_init():
    return _nvcameratools.SWIG_init()
SWIG_init = _nvcameratools.SWIG_init
class PropertyInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["propId"] = _nvcameratools.PropertyInfo_propId_set
    __swig_getmethods__["propId"] = _nvcameratools.PropertyInfo_propId_get
    if _newclass:
        propId = _swig_property(_nvcameratools.PropertyInfo_propId_get, _nvcameratools.PropertyInfo_propId_set)
    __swig_setmethods__["propType"] = _nvcameratools.PropertyInfo_propType_set
    __swig_getmethods__["propType"] = _nvcameratools.PropertyInfo_propType_get
    if _newclass:
        propType = _swig_property(_nvcameratools.PropertyInfo_propType_get, _nvcameratools.PropertyInfo_propType_set)
    __swig_setmethods__["count"] = _nvcameratools.PropertyInfo_count_set
    __swig_getmethods__["count"] = _nvcameratools.PropertyInfo_count_get
    if _newclass:
        count = _swig_property(_nvcameratools.PropertyInfo_count_get, _nvcameratools.PropertyInfo_count_set)
    __swig_setmethods__["name"] = _nvcameratools.PropertyInfo_name_set
    __swig_getmethods__["name"] = _nvcameratools.PropertyInfo_name_get
    if _newclass:
        name = _swig_property(_nvcameratools.PropertyInfo_name_get, _nvcameratools.PropertyInfo_name_set)

    def __init__(self):
        this = _nvcameratools.new_PropertyInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_PropertyInfo
    __del__ = lambda self: None
PropertyInfo_swigregister = _nvcameratools.PropertyInfo_swigregister
PropertyInfo_swigregister(PropertyInfo)


def createCameraTools():
    return _nvcameratools.createCameraTools()
createCameraTools = _nvcameratools.createCameraTools

def createCameraTools_50():
    return _nvcameratools.createCameraTools_50()
createCameraTools_50 = _nvcameratools.createCameraTools_50

def createCameraTools_60():
    return _nvcameratools.createCameraTools_60()
createCameraTools_60 = _nvcameratools.createCameraTools_60

def createCameraTools_70():
    return _nvcameratools.createCameraTools_70()
createCameraTools_70 = _nvcameratools.createCameraTools_70

def deleteCameraTools(*args):
    return _nvcameratools.deleteCameraTools(*args)
deleteCameraTools = _nvcameratools.deleteCameraTools

def getPropertyString(propertyId):
    return _nvcameratools.getPropertyString(propertyId)
getPropertyString = _nvcameratools.getPropertyString

def createSensorModeArray(count):
    return _nvcameratools.createSensorModeArray(count)
createSensorModeArray = _nvcameratools.createSensorModeArray

def deleteSensorModeArray(array):
    return _nvcameratools.deleteSensorModeArray(array)
deleteSensorModeArray = _nvcameratools.deleteSensorModeArray

def createInfo():
    return _nvcameratools.createInfo()
createInfo = _nvcameratools.createInfo

def getInfoStructure(pInfo):
    return _nvcameratools.getInfoStructure(pInfo)
getInfoStructure = _nvcameratools.getInfoStructure

def deleteInfo(pInfo):
    return _nvcameratools.deleteInfo(pInfo)
deleteInfo = _nvcameratools.deleteInfo

def getPropertyInfo(propertyId):
    return _nvcameratools.getPropertyInfo(propertyId)
getPropertyInfo = _nvcameratools.getPropertyInfo

def getSensorModeAt(array, index):
    return _nvcameratools.getSensorModeAt(array, index)
getSensorModeAt = _nvcameratools.getSensorModeAt

def getHostSensorGuid():
    return _nvcameratools.getHostSensorGuid()
getHostSensorGuid = _nvcameratools.getHostSensorGuid

def NvColorFormatToString(format):
    return _nvcameratools.NvColorFormatToString(format)
NvColorFormatToString = _nvcameratools.NvColorFormatToString
class CaptureHandler(ICaptureHandler):
    __swig_setmethods__ = {}
    for _s in [ICaptureHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaptureHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [ICaptureHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaptureHandler, name)
    __repr__ = _swig_repr

    def __init__(self, previewCallback, stillCallback):
        this = _nvcameratools.new_CaptureHandler(previewCallback, stillCallback)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvcameratools.delete_CaptureHandler
    __del__ = lambda self: None

    def nextPreviewFrame(self, data, size):
        return _nvcameratools.CaptureHandler_nextPreviewFrame(self, data, size)

    def nextCapture(self, data, size):
        return _nvcameratools.CaptureHandler_nextCapture(self, data, size)
CaptureHandler_swigregister = _nvcameratools.CaptureHandler_swigregister
CaptureHandler_swigregister(CaptureHandler)
cvar = _nvcameratools.cvar

attr_anr = _nvcameratools.attr_anr
attr_autofocus = _nvcameratools.attr_autofocus
attr_crop = _nvcameratools.attr_crop
attr_bayergains = _nvcameratools.attr_bayergains
attr_exposuretime = _nvcameratools.attr_exposuretime
attr_exposuretimerange = _nvcameratools.attr_exposuretimerange
attr_focuspos = _nvcameratools.attr_focuspos
attr_pauseaftercapture = _nvcameratools.attr_pauseaftercapture
attr_concurrentrawdumpflag = _nvcameratools.attr_concurrentrawdumpflag
attr_continuousautofocus = _nvcameratools.attr_continuousautofocus
attr_focuspositionphysicalrange = _nvcameratools.attr_focuspositionphysicalrange
attr_focuspositioninf = _nvcameratools.attr_focuspositioninf
attr_focuspositioninfoffset = _nvcameratools.attr_focuspositioninfoffset
attr_focuspositionmacro = _nvcameratools.attr_focuspositionmacro
attr_focuspositionmacrooffset = _nvcameratools.attr_focuspositionmacrooffset
attr_gainrange = _nvcameratools.attr_gainrange
attr_fuseid = _nvcameratools.attr_fuseid
attr_aeoverride = _nvcameratools.attr_aeoverride
attr_enableaohdr = _nvcameratools.attr_enableaohdr
attr_scalesize = _nvcameratools.attr_scalesize
attr_overridelocations = _nvcameratools.attr_overridelocations
attr_hdr_ratio_override = _nvcameratools.attr_hdr_ratio_override
attr_ispdigitalgain = _nvcameratools.attr_ispdigitalgain
attr_ispmaxdigitalgain = _nvcameratools.attr_ispmaxdigitalgain
attr_currentscenelux = _nvcameratools.attr_currentscenelux
attr_sensoranaloggain = _nvcameratools.attr_sensoranaloggain
attr_aemode = _nvcameratools.attr_aemode
attr_afmode = _nvcameratools.attr_afmode
attr_aperturecontrolsavailable = _nvcameratools.attr_aperturecontrolsavailable
attr_aperturefnumber = _nvcameratools.attr_aperturefnumber
attr_aperturemotorstep = _nvcameratools.attr_aperturemotorstep
attr_aperturefnumberrange = _nvcameratools.attr_aperturefnumberrange
attr_aperturemotorsteprange = _nvcameratools.attr_aperturemotorsteprange
attr_focusermotorspeedrange = _nvcameratools.attr_focusermotorspeedrange
attr_shadingmode = _nvcameratools.attr_shadingmode


import sys
import array
import os.path
import stat
from operator import itemgetter, attrgetter

class Singleton(object):
    """ A Pythonic Singleton """
    def __new__(cls, *args, **kwargs):
        if '_inst' not in vars(cls):
            cls._inst = object.__new__(cls, *args, **kwargs)
        return cls._inst

class NvCamera(Singleton):
    """ A singleton wrapper class around NvCameraTools API"""
    _nvcameraToolsOb = None
    _isCaptureHandlerInitialized = False

    def getNvCameraTools(self):
        if (self._nvcameraToolsOb == None):
            self._nvcameraToolsOb = createCameraTools_70()
            if (self._nvcameraToolsOb != None):
                print("getNvCameraTools: createCameraTools_70() success")
                return self._nvcameraToolsOb
            self._nvcameraToolsOb = createCameraTools_60()
            if (self._nvcameraToolsOb != None):
                print("getNvCameraTools: createCameraTools_60() success")
                return self._nvcameraToolsOb
            self._nvcameraToolsOb = createCameraTools_50()
            if (self._nvcameraToolsOb != None):
                print("getNvCameraTools: createCameraTools_50() success")
                return self._nvcameraToolsOb
            self._nvcameraToolsOb = createCameraTools()
            if (self._nvcameraToolsOb != None):
                print("getNvCameraTools: createCameraTools() success")
                return self._nvcameraToolsOb
            else:
                print("getNvCameraTools: Error: createCameraTools() failed")
        return self._nvcameraToolsOb

    def deleteNvCameraTools(self):
        if (self._nvcameraToolsOb == None):
            return
        deleteCameraTools(self._nvcameraToolsOb)
        self._nvcameraToolsOb = None

    def setCaptureHandlerInitFlag(self, value):
         "set to True or False"
         self._isCaptureHandlerInitialized = value

    def getCaptureHandlerInitFlag(self):
         return self._isCaptureHandlerInitialized

class Graph(object):
    "nvcamera Graph class"

    def __init__(self):
        self._previewMode = None
        self._stillMode = None
        self._info = self.getInfo()
        self._isHostSensorMode = False

    def getInfo(self):
        "get the OS and other info from NvCameraTools"

        if (NvCamera().getNvCameraTools() == None):
            raise NvCameraException(NvError_InvalidState, "Couldn't initialize NvCameraTools API")

        pInfo = createInfo()

        err = NvCamera().getNvCameraTools().getInfo(pInfo)

        if (err != NvSuccess):
            raise NvCameraException(err, "Error while calling into getInfo")

        info = getInfoStructure(pInfo)

        deleteInfo(pInfo)

        return info

    def setImager(self, imagerId, sensor_name=None):
        "Sets the camera imager/sensor GUID"

# This function also creates NvCameraTools API object
# because this is the first operation expected from the
# client scripts

        if (NvCamera().getNvCameraTools() == None):
            raise NvCameraException(NvError_InvalidState, "Couldn't initialize NvCameraTools API")

        self._isHostSensorMode = False
        if (imagerId == "host"):
            imagerId = getHostSensorGuid()
            self._isHostSensorMode = True
        elif (imagerId == "primary"):
            imagerId = _nvcameratools.NV_IMAGER_AUTO_BACK
        elif (imagerId == "secondary"):
            imagerId = _nvcameratools.NV_IMAGER_AUTO_FRONT

        err = NvCamera().getNvCameraTools().openImager(imagerId, sensor_name)
        if (err != NvSuccess):
            raise NvCameraException(err, "openImager() on id %d failed" % int(imagerId))


    def setSensorConfigFile(self, sensor_config_file):
        "Sets the Sensor Configuration File"
        if (NvCamera().getNvCameraTools() == None):
            raise NvCameraException(NvError_InvalidState, "Couldn't initialize NvCameraTools API")

        return NvCamera().getNvCameraTools().setSensorConfigFile(sensor_config_file)

    def preview(self, previewWidth = 0, previewHeight = 0, modeNumber = 0):
        "Set preview mode"

        if (previewWidth != 0 or previewHeight != 0):
            print("Warning: in \"Graph.preview()\" : options, \"previewWidth\" and \"previewHeight\" are deprecated and do nothing.")

        if (modeNumber <= -1):
            modeNumber = 0

        previewMode = None
        sensorModesList = self.getSupportedModes()

# if still mode is specified than preview mode will be same as still mode or
# maximum resolution mode will be selected by default which should also be same
# as still mode because default still mode is maximum resolution mode
# so preview mode will always be same as still mode

        if (self._stillMode != None):
# set the preview mode as same as still mode
            previewmode = self._stillMode
        else:
            if (modeNumber >= len(sensorModesList)):
                raise NvCameraException(NvError_BadParameter, "Invalid sensor mode number")
            previewMode = sensorModesList[modeNumber]

        sensorModeIndex = modeNumber

        print("Picking the preview resolution of {0}x{1} sensorModeIndex {2}".format(
            previewMode.Resolution.width, previewMode.Resolution.height, sensorModeIndex))
        print("Warning: preview resolution will be matched to still resolution if change in still resolution is requested!!!")

        if (previewMode == None):
            raise NvCameraException(err, "Invalid Resolution. Is the driver returning a valid list ?")

        self._previewMode = previewMode

        if (self._info.osInfo.osID == NvctOsID_Embedded_Linux or \
            self._info.osInfo.osID == NvctOsID_QNX):
            err =  NvCamera().getNvCameraTools().setSensorMode(NvCameraCoreUseCase_Preview, previewMode)
        else:
#
# On Android and L4T, we go through the sensorModeIndex
#
            err =  NvCamera().getNvCameraTools().setSensorMode(NvctUseCase_Preview, sensorModeIndex)

        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set preview sensor mode!")

# set jpeg resolution
        jpegResolutionPreview = NvSize()
        jpegResolutionPreview.width = previewMode.Resolution.width
        jpegResolutionPreview.height = previewMode.Resolution.height
        err = NvCamera().getNvCameraTools().setJpegResolution(NvCameraCoreUseCase_Preview, jpegResolutionPreview)
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set preview jpeg resolution!")

    def run(self):
        "Inialize NvCameraTools API"

# HACK to disable early graph
#if (sys.platform.startswith("linux-arm")):
#    print "disabling early graph"
#    _disable_early_graph(1)

        return NvCamera().getNvCameraTools().initialize()

    def still(self, stillWidth = 0, stillHeight = 0, graphType = "Jpeg", modeNumber = 0):
        "Set still capture sensor mode"

        print("\n\nstill:  width %d height %d modeNumber %d" % (stillWidth, stillHeight, modeNumber))

        if (graphType != "Jpeg"):
            print("Warning: in \"Graph.still()\" : option, \"graphType\" is deprecated and does nothing.")

        if (modeNumber <= -1):
            modeNumber = 0

        sensorModesList = self.getSupportedModes()
        if (modeNumber >= 0 and not self._isHostSensorMode):
            if (modeNumber >= len(sensorModesList)):
                raise NvCameraException(NvError_BadParameter, "Invalid sensor mode number")
            stillMode = sensorModesList[modeNumber]
        else:
# this does not work for standard capture, but is needed for host capture.
            stillMode = NvCameraToolsSensorMode()
            stillMode.Resolution.width = stillWidth
            stillMode.Resolution.height = stillHeight

# set the still mode
        self._stillMode = stillMode
        sensorModeIndex = modeNumber

# set the preview mode same as still mode
        if (self._previewMode !=  None and self._previewMode != self._stillMode):
            print("Warning: changing the preview resolution to match with the still resolution " \
                  "because only one resolution is supported for all the captures !!!")
            self._previewMode = stillMode
            print("Changing the preview resolution to {0}x{1}".format(stillMode.Resolution.width, stillMode.Resolution.height))

        print("Picking the still resolution of {0}x{1} sensorModeIndex {2}".format(
            stillMode.Resolution.width, stillMode.Resolution.height, sensorModeIndex))
# set jpeg resolution
        jpegResolutionStill = NvSize()
        jpegResolutionStill.width = stillMode.Resolution.width
        jpegResolutionStill.height = stillMode.Resolution.height
        err = NvCamera().getNvCameraTools().setJpegResolution(NvCameraCoreUseCase_Still, jpegResolutionStill)
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set still jpeg resolution!")

# set jpeg quality
        err = NvCamera().getNvCameraTools().setJpegQuality(NvCameraCoreUseCase_Still, 90)
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set still jpeg quality!")

        if (self._info.osInfo.osID == NvctOsID_Embedded_Linux or \
            self._info.osInfo.osID == NvctOsID_QNX or \
            self._isHostSensorMode):
            err = NvCamera().getNvCameraTools().setSensorMode(NvCameraCoreUseCase_Still, stillMode)
        else:
#
# On Android and L4T, we go through the sensorModeIndex
#
            err =  NvCamera().getNvCameraTools().setSensorMode(NvctUseCase_Still, sensorModeIndex)

        if (err != NvSuccess):
            raise NvCameraException(err, "setSensorMode() on still resolution failed")

    def video(self, *args):
        "Add video capture graph"
        return NvError_NotImplemented

    def stop(self):
        "shutdown NvCameraTools API"
        err = NvCamera().getNvCameraTools().shutdown()

        NvCamera().setCaptureHandlerInitFlag(False)

# HACK to enable early graph
        if (sys.platform.startswith("linux-arm")):
            _disable_early_graph(0)

        return err

    def close(self):
        "Closes the graph"

        err = NvCamera().getNvCameraTools().closeImager()
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't close the imager")

# this function also deletes NvCameaTools API object
# because this is the last call expected from the
# client scripts
        NvCamera().deleteNvCameraTools()

    def getSupportedModes(self):
        """ Gets sorted list supported sensor modes and store
            it locally as well. Sort order is descending with
            respect to (width, height) key
        """

# get the supported sensor modes
        count = NvCamera().getNvCameraTools().getNumSupportedModes()

# Allocate memory for sizeof(NvCameraToolsSensorMode) * count
# and pass this to getSupportedModes
        sensorModesArray = createSensorModeArray(count)

        err = NvCamera().getNvCameraTools().getSupportedModes(sensorModesArray)

        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't get supported sensor modes!!")

        sensorModesList = []
        for i in range(count):
            sensorModesList.append(getSensorModeAt(sensorModesArray,i))

#print "Index     Res       FPS      ColorFormat HDR OutputDataFomat"
#for i in range(count):
#    print "%d     %dx%d    %3.2f       %lX    %d      %d" % (i, \
#            sensorModesList[i].Resolution.width, sensorModesList[i].Resolution.height, \
#            sensorModesList[i].FrameRate, sensorModesList[i].ColorFormat,   \
#            sensorModesList[i].hdrMode, sensorModesList[i].OutputDataFormat)

        deleteSensorModeArray(sensorModesArray)
        return sensorModesList

    def getCurrentPreviewMode(self):
        if (self._previewMode == None):
            raise NvCameraException(nvcamera.NvError_InvalidState, "preview mode is not set yet!!")

        return self._previewMode

    def getCurrentStillMode(self):
        if (self._stillMode == None):
            raise NvCameraException(nvcamera.NvError_InvalidState, "still mode is not set yet!!")

        return self._stillMode

    def getNumSupportedSensorEntries(self):
        """ gets the number of entries in the supported mode table
        """
        count = NvCamera().getNvCameraTools().getNumSupportedSensorEntries()

#print "python: getNumSupportedSensorEntries: " + str(count)
        return count;

    def getSensorProperty(self, index, camSProperty):
        """ Returns the value for the requested sensor property
        """

        err = NvCamera().getNvCameraTools().getSensorProperty(index, camSProperty)

        if (err != NvSuccess):
            raise NvCameraException(err, "Error while calling into getSensorProperty")

        return camSProperty

    def getCameraOverrideFileSize(self, visionType):
        """ gets the size of the buffer needed for getCameraOverrideFileContents
        """
        size = NvCamera().getNvCameraTools().getCameraOverrideFileSize(visionType)

# print "python: getCameraOverrideFileSize: " + str(size)
        return size

    def getCameraOverrideFileContents(self, visionType, pBuffer):
        """ gets the override file contents for the requested vision type
        """
        ret = NvCamera().getNvCameraTools().getCameraOverrideFileContents(visionType, pBuffer)

        return ret

    def setPlugin(self, plugIn):
        """ sets the plugin type
        """
        ret = NvCamera().getNvCameraTools().setPlugin(plugin)

        return ret

    def setExposureMode(self, exposureMode):
        """ sets exposure mode
        """
        ret = NvCamera().getNvCameraTools().setExposureMode(exposureMode)

        return ret

    def getHdrCapabilities(self, hdrCapabilities):
        """ get HDR capabilities
        """
        err = NvCamera().getNvCameraTools().getHdrCapabilities(hdrCapabilities)
        if (err != NvSuccess):
            raise NvCameraException(err, "getHdrCapabilities failure!")
        return hdrCapabilities

    def getHdrCurrentMode(self):
        """ get HDR current mode
        """
        mode = _nvcameratools.NvHdrMode_Last
        err, mode = NvCamera().getNvCameraTools().getHdrCurrentMode()
        if (err != NvSuccess):
            raise NvCameraException(err, "getHdrCurrentMode failure!")
        return mode

    def setNvRawVersion(self, *args):
        "Set NvRaw Version"
        err = NvCamera().getNvCameraTools().setNvRawVersion(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set NvRaw Version")

class NvCameraPropertyOperationType(object):
    PROP_OP_TYPE_GET = 1
    PROP_OP_TYPE_SET = 2

class Camera(object):
    "nvcamera Camera Class"

    def __init__(self):

        self._stillImageName = None

        NvCamera().getNvCameraTools()
        self.registerCaptureHandler()
        self._propertyManager = NvCameraPropertyManager()

    def registerCaptureHandler(self):
        print("Registering capture handler...")
        self._captureHandler = CaptureHandler(self.__nextPreviewFrame, self.__nextStillFrame)
        NvCamera().getNvCameraTools().registerCaptureHandler(self._captureHandler)
        NvCamera().setCaptureHandlerInitFlag(True)

    def startPreview(self, *args):
        "Start camera preview"

        if (not NvCamera().getCaptureHandlerInitFlag()):
            self.registerCaptureHandler()

        err = NvCamera().getNvCameraTools().startPreview()
        if (err != NvSuccess):
            raise NvCameraException(err, "Failed to start preview!")

    def setAttr(self, attrID, *args):
        "Sets camera attribute"
        if (args == None):
            raise NvCameraException(NvError_BadValue, "Invalid attribute value!")

        propertyId = self._propertyManager._getPropertyIdFromAttributeId(attrID)

        if (propertyId == PROP_NONE):
# this is NOOP property. dont't do anything
            return

        retVal =  self._propertyManager.handleProperty( \
                   NvCameraPropertyOperationType.PROP_OP_TYPE_SET, \
                   propertyId, \
                   *args \
               )
        return retVal

    def setAttr_delete(self, attrID, *args):
        "Sets camera attribute - variable number of arguments or list"
        if (isinstance(args[0], int) and len(args) == 1):
# print "Type is int. Value " + str(args[0])
            return self.setAttribute(attrID, args[0])
        elif (isinstance(args[0], float)):
# print "Type is variable number of float arguments"
            vlf = NvVLF32()
            vlf.count = len(args)
            for i in range(0, len(args)):
# print "Value " + str(i) + " = " + str(args[i])
                vlf.set(i, float(str(args[i])))
            return self.setAttribute(attrID, vlf)
        elif (isinstance(args[0], NvVLF32)):
# print "Type is NvVLF32"
            vlf = args[0]
            return self.setAttribute(attrID, vlf)
        else:
# print "Type is list. Argument " + str(args[0])
            return self.setAttribute(attrID, args[0])

    def getAttr(self, attrID):
        "Gets camera attribute"
        propertyId = self._propertyManager._getPropertyIdFromAttributeId(attrID)

        if (propertyId == PROP_NONE):
# this is NOOP property. dont't do anything
            return

        return self._propertyManager.handleProperty( \
                      NvCameraPropertyOperationType.PROP_OP_TYPE_GET, \
                      propertyId \
               )

    def getCamPropertyObject(self, attrId, value):
        "Gets CamProperty object from attribute id and value"
        return self._propertyManager.getCamPropertyObject(attrId, value)

    def stopPreview(self):
        "Stops the camera preview"
        err = NvCamera().getNvCameraTools().stopPreview()
        if (err != NvSuccess):
            raise NvCameraException(err, "Failed to stop preview!")

    def setRawImage(self, header, pixelData, iteration):
        "Sets the raw image header and data"
        return NvCamera().getNvCameraTools().setRawImage(header, pixelData, iteration)

    def still(self, imageName, timeout = 10000):
        "capture still image"

        self._stillImageName = imageName
# parse "imageName" to get the capture type (Bayer or YUV).
        (fileName, suffix) = os.path.splitext(imageName)

        if (not NvCamera().getCaptureHandlerInitFlag()):
            self.registerCaptureHandler()

        if (suffix == ".jpg" or suffix == ".jpeg" or suffix == ".yuv"):
# do a YUV capture
            err = NvCamera().getNvCameraTools().captureRequest(timeout)
            if (err != NvSuccess):
                raise NvCameraException(err, "ERROR: Couldn't capture YUV image!")
        elif (suffix == ".nvraw"):
# do a Bayer capture
            err = NvCamera().getNvCameraTools().captureRequestBayer(timeout)
            if (err != NvSuccess):
                raise NvCameraException(err, "ERROR: Couldn't capture Bayer image!")
        elif (suffix == ".yuv16"):
# do a YUV16 capture
            err = NvCamera().getNvCameraTools().captureRequestGeneric(timeout, _nvcameratools.NV_CAMERA_HAL3_COLOR_YUV16_PLANAR_2020_PQ_ER)
            if (err != NvSuccess):
                raise NvCameraException(err, "ERROR: Couldn't capture YUV16 image!")
        else:
# unrecognized file format
            raise NvCameraException(NvError_BadValue, "ERROR: unrecognized file format!")

    def waitForEvent(self, *args):
        "wait for event(s)"
# combine the list of events into event mask
        eventMask = 0
        timeout = args[0]
        for event in args[1:]:
            eventMask = eventMask | event

# clear and ignore CAP_FILE_READY event because it is not going to be
# sent by nvcameratools API
        if ((eventMask != _nvcameratools.CamConst_ALGS) and \
            (eventMask & _nvcameratools.CamConst_CAP_FILE_READY)):
            eventMask = eventMask & ~_nvcameratools.CamConst_CAP_FILE_READY

        err = NvCamera().getNvCameraTools().waitForEvent(timeout, eventMask)
        if (err != NvSuccess):
            raise NvCameraException(err, "Failed to wait for event(s)!")

    def halfpress(self, *args):
        "execute halfpress"
        err = NvCamera().getNvCameraTools().halfPress(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "halfpress failure!")

    def hp_release(self):
        "releases half press"
        err = NvCamera().getNvCameraTools().halfPressRelease()
        if (err != NvSuccess):
            raise NvCameraException(err, "halfpress release failure!")

    def getHdrCapabilities(self, hdrCapabilities):
        "get HDR capabilities"
        err = NvCamera().getNvCameraTools().getHdrCapabilities(hdrCapabilities)
        if (err != NvSuccess):
            raise NvCameraException(err, "getHdrCapabilities failure!")

    def enableHdr(self, mode):
        "enable HDR mode"
        err = NvCamera().getNvCameraTools().enableHdr(mode)
        if (err != NvSuccess):
            raise NvCameraException(err, "enableHdr failure!")

    def getHdrCurrentMode(self):
        "get HDR current mode"
        mode = _nvcameratools.NvHdrMode_Last
        err, mode = NvCamera().getNvCameraTools().getHdrCurrentMode()
        if (err != NvSuccess):
            raise NvCameraException(err, "getHdrCurrentMode failure!")
        return mode

    def getDctCapabilities(self, dctCapabilities):
        "get DCT capabilities"
        err = NvCamera().getNvCameraTools().GetDctCapabilities(dctCapabilities)
        if (err != NvSuccess):
            raise NvCameraException(err, "GetDctCapabilities failure!")

    def PFP_enable(self, *args):
        "Per Frame Property Control - Enable/Disable"
        NvCamera().getNvCameraTools().PFP_enable(args[0])

    def PFP_loadFile(self, *args):
        "Per Frame Property Control - Load File"
        err = NvCamera().getNvCameraTools().PFP_loadFile(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "PFP_loadFile failure!")

    def PFP_dumpFile(self, *args):
        "Per Frame Property Control - Dump File"
        err = NvCamera().getNvCameraTools().PFP_dumpFile(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "PFP_dumpFile failure!")

    def PFP_addFrameProperty(self, *args):
        "Per Frame Property Control - Add Frame Property"
        err = NvCamera().getNvCameraTools().PFP_addFrameProperty(args[0], args[1], args[2])
        if (err != NvSuccess):
            raise NvCameraException(err, "PFP_addFrameProperty failure!")

    def PFP_removeProperty(self, *args):
        "Per Frame Property Control - Remove Property by Property number"
        err = NvCamera().getNvCameraTools().PFP_removeProperty(args[0], args[1])
        if (err != NvSuccess):
            raise NvCameraException(err, "PFP_removeProperty failure!")

    def PFP_removeFrame(self, *args):
        "Per Frame Property Control - Remove Frame"
        err = NvCamera().getNvCameraTools().PFP_removeFrame(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "PFP_removeFrame failure!")

    def PFP_removeAll(self, *args):
        "Per Frame Property Control - Remove All"
        err = NvCamera().getNvCameraTools().PFP_removeAll()
        if (err != NvSuccess):
            raise NvCameraException(err, "PFP_removeAll failure!")

    def PFP_setFrameLoopCount(self, *args):
        "Per Frame Property Control - Set Frame Loop count"
        err = NvCamera().getNvCameraTools().PFP_setFrameLoopCount(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "PFP_setFrameLoopCount failure!")

    def setStreamingParameters(self, *args):
        "Set streaming parameters"
        err = NvCamera().getNvCameraTools().setStreamingParameters(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set streaming parameters!")

    def getStreamingStats(self, *args):
        "Set streaming parameters"
        err = NvCamera().getNvCameraTools().getStreamingStats(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't get streaming stats!")

    def setExposureMode(self, *args):
        "Set Exposure Mode"
        err = NvCamera().getNvCameraTools().setExposureMode(args[0])
        if (err != NvSuccess):
            raise NvCameraException(err, "Couldn't set Exposure Mode")

    def startVideoRecording(self):
        "start video recording"
#return self._oCameraImpl.operation(_nvcameratools.cop_start_video)
        pass

    def stopVideoRecording(self):
        "stop video recording"
#return self._oCameraImpl.operation(_nvcameratools.cop_stop_video)
        pass

    def __nextStillFrame(self, data):
        f = open(self._stillImageName, "wb")
        f.write(data)
        f.close()

# File mode/permission = 0666
        mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IWGRP | stat.S_IROTH | stat.S_IWOTH
        os.chmod(self._stillImageName, mode)
        st = os.stat(self._stillImageName)
        if (st.st_mode & mode != mode):
            raise NvCameraException(NvError_BadParameter, "Error: Setting file %s to mode to %o" % (self._stillImageName, mode))

# special handling for concurrent raw capture
# two consecutive buffers will be send by Tools API
# jpeg buffer followed by raw buffer
        if (self.getAttr(_nvcameratools.attr_concurrentrawdumpflag) == 7):
            (fileName, ext) = os.path.splitext(self._stillImageName)
            self._stillImageName = fileName + "." +"nvraw"

    def __nextPreviewFrame(self, data):
        pass

class NvCameraException(Exception):
    """ this exception is raised when error occurs during
        graph/camera operations
    """

    def __init__(self, errorCode, msg = ""):
        self.value = errorCode
        self.msg = msg

    def __str__(self):
        return "ERROR: %s\nErrorCode: %s: %s" % \
                (self.msg, repr(self.value), _nvcameratools.getErrorString(self.value))

def _disable_early_graph(state):
    """disables early graph if it is not already disabled.
       This function assumes that if the nv-camera-disable-early-graph
       property is set to 1 that means that the functionality is
       disabled in mediaserver and hence it won't restart media server
       in that case
    """
    earlyGraphState = 0
    try:
        earlyGraphState = _execute_cmd(["getprop", "nv-camera-disable-early-graph"])
        if (earlyGraphState.strip() == ""):
            earlyGraphState = 0
    except RuntimeError as err:
        pass

    if (state == int(earlyGraphState)):
        return

    _execute_cmd(["setprop", "nv-camera-disable-early-graph", str(state)])
    _restart_media_server()

def _restart_media_server():
    import re
    task_info = _execute_cmd(['ps', 'mediaserver'])

    m = re.search('^\S+\s+(\d+)\s+',task_info,re.MULTILINE)

    if (m == None):
        return

    pid = m.group(1)
    print("restarting media server")
    try:
        _execute_cmd(['kill', pid])
    except RuntimeError as err:
# HACK
# ignore run time error while killing the media server
# sometimes it seems to exit with 255 status code
       print("WARNING: {0}".format(err))

def _execute_cmd(args, silent = False):
    """Execute the command as a subprocess.

       Returns the exit code of the process on success
       Exit the script on failure
    """
    import subprocess

    sys.stdout.flush()

# For Windows we need to use the shell so the path is searched (Python/Windows bug)
# For Android, using the shell complicates things
    p = subprocess.Popen(args, shell=sys.platform.startswith('win'), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (std_out_str, std_err_str) = p.communicate()
    returncode = p.returncode

    clean_std_out_str = std_out_str.decode().replace('\r', '')
    clean_std_err_str = std_err_str.decode().replace('\r', '')

    if (returncode != 0):
        raise RuntimeError("Error (%d) executing command: %s" % (returncode, " ".join(args)))

    return clean_std_out_str



class NvCameraPropertyManager(object):
    """Property manager class
    """
    def __init__(self):
        self.__initPropHandlerDict()

    def __initPropHandlerDict(self):
        self.propHandlerDict = { \
            PROP_EXPOSURE_TIME     : self._exposureTimeHandler, \
            PROP_FUSE_ID           : self._fuseIdHandler, \
            PROP_SENSOR_ANALOG_GAIN: self._sensorAnalogGainHandler, \
            PROP_OVERRIDE_LOCATIONS: self._overrideLocationsHandler \
        }

    def setPropery(self, camProp):
        return NvCamera().getNvCameraTools().setProperty(camProp)

    def getPropery(self, camProp):
        return NvCamera().getNvCameraTools().getProperty(camProp)

    def getCamPropertyObject(self, attrType, value):

        propId = self._getPropertyIdFromAttributeId(attrType)

# get the property info [type, count, handler]
        propInfo = self._getPropertyInfo(propId)

# create CamPropery object
        camProp = self.createCamPropertyObject(propId, propInfo.propType, propInfo.count)

# set the property value
        self.setCamPropertyValue(camProp, value)

        return camProp

    def createCamPropertyObject(self, propertyId, type, count):
# create the CamProperty Object
        camProp = CamProperty()
        camProp.id = propertyId
        camProp.type = type
        camProp.count = count

        return camProp

    def setCamPropertyValue(self, camProp, value):

        propValueArray = self._createAndAssignCamPropertyValueArray(camProp)

# assign the value
        if (camProp.type == PROP_TYPE_VLFLOAT):
            if (camProp.count > 1):
                for vlfList in value:
                    length = len(vlfList)
                    propValueArray[0].count = length
                    for i in range(length):
                        propValueArray[0].set(i, vlfList[i])
            else:
                if (not isinstance(value, list)):
                    propValueArray.count = 1
                    propValueArray.set(0, value)
                else:
                    length = len(value)
                    propValueArray.count = length
                    for i in range(length):
                        propValueArray.set(i, value[i])
        elif(camProp.count > 1):
# array of values
            for i in range(camProp.count):
                propValueArray[i] = value[i]
        else:
            propValueArray[0] = value

        return propValueArray

    def handleProperty(self, propOpType, propertyId, value = None):
        """ creates CamProperty object for a given
        Operation type (get/set), NVCS attribute and value
        """
# check for property specific handler if any
# call property specific handler if found or call
# default property handler
        if (propertyId in self.propHandlerDict and self.propHandlerDict[propertyId] != None):
            return self.propHandlerDict[propertyId](propertyId, value, propOpType)
        else:
            return self._genericPropertyHandler(propertyId, value, propOpType)

    def convertCamPropertyToPyType(self, camProp):
        if(camProp.count > 1):
            retListVal = []
            for i in range(camProp.count):
                if (camProp.type == PROP_TYPE_UINT32):
                    retListVal.append(camProp.getUint32ElementAtIndex(i))
                if (camProp.type == PROP_TYPE_SINT32):
                    retListVal.append(camProp.getSint32ElementAtIndex(i))
                elif (camProp.type == PROP_TYPE_FLOAT):
                    retListVal.append(camProp.getFloatElementAtIndex(i))
                elif (camProp.type == PROP_TYPE_VLFLOAT):
                    vlfElem = camProp.getVlfElementAtIndex(i)
# convert it to list
                    vlfList = []
                    for j in range(vlfElem.count):
                        vlfList.append(vlfElem.get(j))
                    retListVal.append(vlfList)
            return retListVal
        elif(camProp.type == PROP_TYPE_UINT32):
            return camProp.getUint32ElementAtIndex(0)
        elif(camProp.type == PROP_TYPE_SINT32):
            return camProp.getSint32ElementAtIndex(0)
        elif(camProp.type == PROP_TYPE_UINT8):
            return camProp.value.u8 # this is not tested..
        elif(camProp.type == PROP_TYPE_FLOAT):
            return camProp.getFloatElementAtIndex(0)
        elif(camProp.type == PROP_TYPE_VLFLOAT):
            vlfElem = camProp.getVlfPointer()
            retList = []
            for i in range(vlfElem.count):
                retList.append(vlfElem.get(i))
            return retList

    def checkPropertyType(self, propValue, propType, count):
        nativePropType = self.__getNativeTypeFromPropertyType(propType)
        if (propType == PROP_TYPE_VLFLOAT and count > 1):
            if (len(propValue) !=  count):
                return False
            for l in propValue:
                if (not isinstance(l, list)):
                    return False
                if ((not isinstance(l[0], nativePropType)) and (not isinstance(l[0], int))):
                    return False
            return True
        elif (propType == PROP_TYPE_VLFLOAT or propType == PROP_TYPE_FLOAT):
            if (not isinstance(propValue, list)):
                if ((not isinstance(propValue, nativePropType)) and \
                    (not isinstance(propValue, int))):
                    return False
                else:
                    return True
            else:
                for i in range(len(propValue)):
                    if ((not isinstance(propValue[i], nativePropType)) and \
                        (not isinstance(propValue[i], int))):
                        return False
                return True
        elif (isinstance(propValue, list)):
# assumes list of homegeneous types
            if (isinstance(propValue[0], nativePropType)):
                return True
            else:
                return False
        elif (isinstance(propValue, nativePropType)):
            return True
        else:
            return False

    def assignPyTypeToCamProperty(self, propValueArray, camProp):
        if (camProp.type == PROP_TYPE_UINT32):
            camProp.value.u32 = propValueArray.cast()
        elif (camProp.type == PROP_TYPE_UINT64):
            camProp.value.u64 = propValueArray.cast()
        elif (camProp.type == PROP_TYPE_UINT8):
            camProp.value.u8 = propValueArray.cast()
        elif (camProp.type == PROP_TYPE_FLOAT):
            camProp.value.f = propValueArray.cast()
        elif (camProp.type == PROP_TYPE_BOOL):
# at present we pass 1 for True and 0 for False
            camProp.value.u32 = propValueArray.cast()
        elif (camProp.type == PROP_TYPE_SINT32):
            camProp.value.i32 = propValueArray.cast()
        elif (camProp.type == PROP_TYPE_VLFLOAT and camProp.count > 1):
            camProp.value.vlf = propValueArray.cast()
        elif (camProp.type == PROP_TYPE_VLFLOAT):
            camProp.value.vlf = propValueArray

    def __getNativeTypeFromPropertyType(self, propType):
        if (propType == PROP_TYPE_UINT32 or propType == PROP_TYPE_SINT32):
            return int
        elif (propType == PROP_TYPE_UINT64):
            try:
# Handle a special case where numbers >= 2**63 are converted to long in Python 2
                return (int, long)
            except NameError:
# Handle deprecation of long type in Python 3
                return int
        elif (propType == PROP_TYPE_UINT8):
            return str
        elif (propType == PROP_TYPE_FLOAT or propType == PROP_TYPE_VLFLOAT):
            return float
        elif (propType == PROP_TYPE_BOOL):
# at present we pass 1 for True and 0 for False
             return int

    def getPropertyString(self, propertyId):
        return getPropertyString(propertyId)

####################Property Handler Functions #####################
#handler functions are called to handle special cases like setting the
#dependent properties etc..

    def _genericPropertyHandler(self, propertyId, value, propOpType):
# get the property info [type, count, handler]
        propInfo = self._getPropertyInfo(propertyId)

# print "propId " +  str(propInfo.propId) + " propType " + str(propInfo.propType) + " count " +  str(propInfo.count) + " str " + propInfo.name

# check the property type
        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_SET):
            bType = self.checkPropertyType(value, propInfo.propType, propInfo.count)
            if (bType == False):
                raise NvCameraException(NvError_BadValue, "Invalid property type!")

        camProp = self.createCamPropertyObject(propertyId, propInfo.propType, propInfo.count)

# create and assign CamPropery ValueArray
        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_SET):
            propValueArray = self.setCamPropertyValue(camProp, value)
        else:
            propValueArray = self._createAndAssignCamPropertyValueArray(camProp)

        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_SET):
            err = NvCamera().getNvCameraTools().setProperty(camProp)
            if (err != NvSuccess):
                raise NvCameraException(err, "Unable to set property %s" % self.getPropertyString(propertyId))
        else:
            err = NvCamera().getNvCameraTools().getProperty(camProp)
            if (err != NvSuccess):
                raise NvCameraException(err, "Unable to get property %s" % self.getPropertyString(propertyId))
            return self.convertCamPropertyToPyType(camProp)

    def _exposureTimeHandler(self, propertyId, value, propOpType):
# dependent property PROP_AE_MODE
# PROP_AE_MODE should be off in order to set manual exposure time

        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_SET):
# set PROP_AE_MODE to AeMode_Off
            self._genericPropertyHandler( \
                PROP_AE_MODE, \
                AeMode_Off, \
                NvCameraPropertyOperationType.PROP_OP_TYPE_SET \
             )

# set exposure time
        return self._genericPropertyHandler(propertyId, value, propOpType)

    def _fuseIdHandler(self, propertyId, value, propOpType):
# client scripts expects fuse id in the form
# [x, [i1, i2, ...]] where x is the size of the fuzeId bytes
# and i1, i2 are the fuze id unsinged integers
# and tools API retuns in the form [x, i1, i2, ...], so we need
# to convert it to the client expected form
        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_GET):
            fuseIdData = self._genericPropertyHandler(propertyId, value, propOpType)
            retList = []

            if (0 != fuseIdData):
                retList.append(fuseIdData[0])
                retList.append(fuseIdData[1:])
            return retList

        else:
            return self._genericPropertyHandler(propertyId, value, propOpType)

    def _sensorAnalogGainHandler(self, propertyId, value, propOpType):
# driver only sets single gain for all four channels

        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_GET):
            return self._genericPropertyHandler(propertyId, value, propOpType)
        else:
            return self._genericPropertyHandler(propertyId, value, propOpType)

    def _overrideLocationsHandler(self, propertyId, value, propOpType):
# converts data returned by tools API from an array of numbers
# into a structure that is easier to process.
# [[<path1type>, <path1>], [<path2type>, <path2>], ...]

        if (propOpType == NvCameraPropertyOperationType.PROP_OP_TYPE_GET):
            overrideLocations = self._genericPropertyHandler(propertyId, value, propOpType)

            retList = []

# expected type is list, otherwise something has gone wrong
            if(not isinstance(overrideLocations, list)):
                raise NvCameraException("Could not fetch override locations!")

# max path length
            pathLength = overrideLocations[1]
            typeSize = 1
            headerSize = 2

# append as elements [<path_type>, <path>] to retList
            for i in range(overrideLocations[0]):
                element = []
                element.append(overrideLocations[(i*(pathLength+typeSize)+headerSize)])
                string = map(chr, overrideLocations[(i*(pathLength+typeSize)+headerSize+typeSize):
                                  (i+1)*(pathLength+typeSize)])
                element.append("".join(string).split("\x00")[0])
                retList.append(element)

            return retList

        else:
            return self._genericPropertyHandler(propertyId, value, propOpType);

######################################################################
    def _getPropertyIdFromAttributeId(self, attributeId):
# attribute id to property id mapping
# attribute id which maps to property id PROP_NONE are not supported
# right now
        if (attributeId == attr_anr): return PROP_NOISE_REDUCTION_MODE
        elif (attributeId == attr_autofocus): return PROP_AUTOFOCUS
        elif (attributeId == attr_exposuretime): return PROP_EXPOSURE_TIME
        elif (attributeId == attr_exposuretimerange): return PROP_EXPOSURE_TIMERANGE
        elif (attributeId == attr_focuspos): return PROP_FOCUS_POS
        elif (attributeId == attr_pauseaftercapture): return PROP_PAUSE_AFTER_CAPTURE
        elif (attributeId == attr_concurrentrawdumpflag): return PROP_CONCURRENT_RAW_DUMP_FLAG
        elif (attributeId == attr_continuousautofocus): return PROP_CONTINUOUS_AUTOFOCUS
        elif (attributeId == attr_focuspositionphysicalrange): return PROP_FOCUSINFO_PHYSRANGE
        elif (attributeId == attr_focuspositioninf): return PROP_FOCUSINFO_INF
        elif (attributeId == attr_focuspositioninfoffset):return PROP_FOCUSINFO_INF_OFFSET
        elif (attributeId == attr_focuspositionmacro): return PROP_FOCUSINFO_MACRO
        elif (attributeId == attr_focuspositionmacrooffset): return PROP_FOCUSINFO_MACRO_OFFSET
        elif (attributeId == attr_gainrange): return PROP_GAIN_RANGE
        elif (attributeId == attr_crop): return PROP_CROP_REGION
        elif (attributeId == attr_fuseid): return PROP_FUSE_ID
        elif (attributeId == attr_enableaohdr): return PROP_AOHDR_MODE
        elif (attributeId == attr_bayergains): return PROP_SENSOR_ANALOG_GAIN
        elif (attributeId == attr_scalesize): return PROP_SCALE_SIZE
        elif (attributeId == attr_overridelocations): return PROP_OVERRIDE_LOCATIONS
        elif (attributeId == attr_hdr_ratio_override): return PROP_HDR_RATIO_OVERRIDE
        elif (attributeId == attr_ispdigitalgain): return PROP_ISP_DIGITAL_GAIN
        elif (attributeId == attr_ispmaxdigitalgain): return PROP_ISP_MAX_DIGITAL_GAIN
        elif (attributeId == attr_currentscenelux): return PROP_CURRENT_SCENE_LUX
        elif (attributeId == attr_sensoranaloggain): return PROP_SENSOR_ANALOG_GAIN
        elif (attributeId == attr_aemode): return PROP_AE_MODE
        elif (attributeId == attr_afmode): return PROP_AF_MODE
        elif (attributeId == attr_aperturecontrolsavailable): return PROP_APERTURE_CONTROLS_AVAILABLE
        elif (attributeId == attr_aperturefnumber): return PROP_APERTURE_FNUMBER
        elif (attributeId == attr_aperturemotorstep): return PROP_APERTURE_MOTOR_STEP
        elif (attributeId == attr_aperturefnumberrange): return PROP_APERTURE_FNUMBER_RANGE
        elif (attributeId == attr_aperturemotorsteprange): return PROP_APERTURE_MOTOR_STEP_RANGE
        elif (attributeId == attr_focusermotorspeedrange): return PROP_FOCUSINFO_MOTOR_SPEED_RANGE
        elif (attributeId == attr_shadingmode): return PROP_SHADING_MODE
        elif (attributeId == attr_aeoverride): \
            raise NvCameraException(NvError_NotImplemented, "attribute is not implemented!")
        else:
            raise NvCameraException(NvError_BadParameter, "Invalid attribute id!")

    def _getPropertyInfo(self, propertyId):
        """ function to NvCameraTools property info
        from property id
        """
        retList = []
# this information might need to be implemented and requested from
# NvCameraTools(?)
# property type, count

        propInfo = getPropertyInfo(propertyId)
        if (propInfo != None):
            return propInfo
        else:
            raise NvCameraException(NvError_BadValue, "Invalid property id!")

    def _createAndAssignCamPropertyValueArray(self, camProp):
# create an array
        propValueArray = None
        if (camProp.type == PROP_TYPE_FLOAT):
            propValueArray = f32_array(camProp.count)
        elif (camProp.type == PROP_TYPE_SINT32):
            propValueArray = sint32_array(camProp.count)
        elif (camProp.type == PROP_TYPE_UINT32 or camProp.type == PROP_TYPE_BOOL):
            propValueArray = uint32_array(camProp.count)
        elif (camProp.type == PROP_TYPE_VLFLOAT and camProp.count > 1):
            propValueArray = vlf32_array(camProp.count)
        elif (camProp.type == PROP_TYPE_VLFLOAT):
            propValueArray = NvVLF32()

        self.assignPyTypeToCamProperty(propValueArray, camProp)

        return propValueArray


# This file is compatible with both classic and new-style classes.


