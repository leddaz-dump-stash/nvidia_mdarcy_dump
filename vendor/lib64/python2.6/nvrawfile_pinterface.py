# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


# Copyright (c) 2017-2020, NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nvrawfile_pinterface')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nvrawfile_pinterface')
    _nvrawfile_pinterface = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nvrawfile_pinterface', [dirname(__file__)])
        except ImportError:
            import _nvrawfile_pinterface
            return _nvrawfile_pinterface
        try:
            _mod = imp.load_module('_nvrawfile_pinterface', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nvrawfile_pinterface = swig_import_helper()
    del swig_import_helper
else:
    import _nvrawfile_pinterface
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

NV_FALSE = _nvrawfile_pinterface.NV_FALSE
NV_TRUE = _nvrawfile_pinterface.NV_TRUE
__FLT_MAX__ = _nvrawfile_pinterface.__FLT_MAX__
FLT_MAX = _nvrawfile_pinterface.FLT_MAX
NVRAWFILE_MAX_AF_INPUT = _nvrawfile_pinterface.NVRAWFILE_MAX_AF_INPUT
NVRAWFILE_MAX_M3_DATA = _nvrawfile_pinterface.NVRAWFILE_MAX_M3_DATA
NVRAWFILE_MAX_SHARPNESS = _nvrawfile_pinterface.NVRAWFILE_MAX_SHARPNESS
class NvUuid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvUuid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvUuid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes"] = _nvrawfile_pinterface.NvUuid_bytes_set
    __swig_getmethods__["bytes"] = _nvrawfile_pinterface.NvUuid_bytes_get
    if _newclass:
        bytes = _swig_property(_nvrawfile_pinterface.NvUuid_bytes_get, _nvrawfile_pinterface.NvUuid_bytes_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvUuid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvUuid
    __del__ = lambda self: None
NvUuid_swigregister = _nvrawfile_pinterface.NvUuid_swigregister
NvUuid_swigregister(NvUuid)


def NvUuid_equal(a, b):
    return _nvrawfile_pinterface.NvUuid_equal(a, b)
NvUuid_equal = _nvrawfile_pinterface.NvUuid_equal
class NvChunkHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvChunkHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvChunkHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _nvrawfile_pinterface.NvChunkHeader_type_set
    __swig_getmethods__["type"] = _nvrawfile_pinterface.NvChunkHeader_type_get
    if _newclass:
        type = _swig_property(_nvrawfile_pinterface.NvChunkHeader_type_get, _nvrawfile_pinterface.NvChunkHeader_type_set)
    __swig_setmethods__["md5digest"] = _nvrawfile_pinterface.NvChunkHeader_md5digest_set
    __swig_getmethods__["md5digest"] = _nvrawfile_pinterface.NvChunkHeader_md5digest_get
    if _newclass:
        md5digest = _swig_property(_nvrawfile_pinterface.NvChunkHeader_md5digest_get, _nvrawfile_pinterface.NvChunkHeader_md5digest_set)
    __swig_setmethods__["length"] = _nvrawfile_pinterface.NvChunkHeader_length_set
    __swig_getmethods__["length"] = _nvrawfile_pinterface.NvChunkHeader_length_get
    if _newclass:
        length = _swig_property(_nvrawfile_pinterface.NvChunkHeader_length_get, _nvrawfile_pinterface.NvChunkHeader_length_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvChunkHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvChunkHeader
    __del__ = lambda self: None
NvChunkHeader_swigregister = _nvrawfile_pinterface.NvChunkHeader_swigregister
NvChunkHeader_swigregister(NvChunkHeader)


def NvRawFile_newChunk(type, dataLength):
    return _nvrawfile_pinterface.NvRawFile_newChunk(type, dataLength)
NvRawFile_newChunk = _nvrawfile_pinterface.NvRawFile_newChunk
class NvRawFileHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _nvrawfile_pinterface.NvRawFileHeader_width_set
    __swig_getmethods__["width"] = _nvrawfile_pinterface.NvRawFileHeader_width_get
    if _newclass:
        width = _swig_property(_nvrawfile_pinterface.NvRawFileHeader_width_get, _nvrawfile_pinterface.NvRawFileHeader_width_set)
    __swig_setmethods__["height"] = _nvrawfile_pinterface.NvRawFileHeader_height_set
    __swig_getmethods__["height"] = _nvrawfile_pinterface.NvRawFileHeader_height_get
    if _newclass:
        height = _swig_property(_nvrawfile_pinterface.NvRawFileHeader_height_get, _nvrawfile_pinterface.NvRawFileHeader_height_set)
    __swig_setmethods__["dataFormat"] = _nvrawfile_pinterface.NvRawFileHeader_dataFormat_set
    __swig_getmethods__["dataFormat"] = _nvrawfile_pinterface.NvRawFileHeader_dataFormat_get
    if _newclass:
        dataFormat = _swig_property(_nvrawfile_pinterface.NvRawFileHeader_dataFormat_get, _nvrawfile_pinterface.NvRawFileHeader_dataFormat_set)
    __swig_setmethods__["bitsPerSample"] = _nvrawfile_pinterface.NvRawFileHeader_bitsPerSample_set
    __swig_getmethods__["bitsPerSample"] = _nvrawfile_pinterface.NvRawFileHeader_bitsPerSample_get
    if _newclass:
        bitsPerSample = _swig_property(_nvrawfile_pinterface.NvRawFileHeader_bitsPerSample_get, _nvrawfile_pinterface.NvRawFileHeader_bitsPerSample_set)
    __swig_setmethods__["samplesPerPixel"] = _nvrawfile_pinterface.NvRawFileHeader_samplesPerPixel_set
    __swig_getmethods__["samplesPerPixel"] = _nvrawfile_pinterface.NvRawFileHeader_samplesPerPixel_get
    if _newclass:
        samplesPerPixel = _swig_property(_nvrawfile_pinterface.NvRawFileHeader_samplesPerPixel_get, _nvrawfile_pinterface.NvRawFileHeader_samplesPerPixel_set)
    __swig_setmethods__["numberOfImages"] = _nvrawfile_pinterface.NvRawFileHeader_numberOfImages_set
    __swig_getmethods__["numberOfImages"] = _nvrawfile_pinterface.NvRawFileHeader_numberOfImages_get
    if _newclass:
        numberOfImages = _swig_property(_nvrawfile_pinterface.NvRawFileHeader_numberOfImages_get, _nvrawfile_pinterface.NvRawFileHeader_numberOfImages_set)
    __swig_setmethods__["timeSeconds"] = _nvrawfile_pinterface.NvRawFileHeader_timeSeconds_set
    __swig_getmethods__["timeSeconds"] = _nvrawfile_pinterface.NvRawFileHeader_timeSeconds_get
    if _newclass:
        timeSeconds = _swig_property(_nvrawfile_pinterface.NvRawFileHeader_timeSeconds_get, _nvrawfile_pinterface.NvRawFileHeader_timeSeconds_set)
    __swig_setmethods__["timeMicroseconds"] = _nvrawfile_pinterface.NvRawFileHeader_timeMicroseconds_set
    __swig_getmethods__["timeMicroseconds"] = _nvrawfile_pinterface.NvRawFileHeader_timeMicroseconds_get
    if _newclass:
        timeMicroseconds = _swig_property(_nvrawfile_pinterface.NvRawFileHeader_timeMicroseconds_get, _nvrawfile_pinterface.NvRawFileHeader_timeMicroseconds_set)
    __swig_setmethods__["processingFlags"] = _nvrawfile_pinterface.NvRawFileHeader_processingFlags_set
    __swig_getmethods__["processingFlags"] = _nvrawfile_pinterface.NvRawFileHeader_processingFlags_get
    if _newclass:
        processingFlags = _swig_property(_nvrawfile_pinterface.NvRawFileHeader_processingFlags_get, _nvrawfile_pinterface.NvRawFileHeader_processingFlags_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileHeader
    __del__ = lambda self: None
NvRawFileHeader_swigregister = _nvrawfile_pinterface.NvRawFileHeader_swigregister
NvRawFileHeader_swigregister(NvRawFileHeader)

NvRawFileRGGBDataFormat = _nvrawfile_pinterface.NvRawFileRGGBDataFormat
NvRawFileBGGRDataFormat = _nvrawfile_pinterface.NvRawFileBGGRDataFormat
NvRawFileGRBGDataFormat = _nvrawfile_pinterface.NvRawFileGRBGDataFormat
NvRawFileGBRGDataFormat = _nvrawfile_pinterface.NvRawFileGBRGDataFormat
NvRawFileYUVDataFormat = _nvrawfile_pinterface.NvRawFileYUVDataFormat
NvRawFileRCCBDataFormat = _nvrawfile_pinterface.NvRawFileRCCBDataFormat
NvRawFileBCCRDataFormat = _nvrawfile_pinterface.NvRawFileBCCRDataFormat
NvRawFileCBRCDataFormat = _nvrawfile_pinterface.NvRawFileCBRCDataFormat
NvRawFileCRBCDataFormat = _nvrawfile_pinterface.NvRawFileCRBCDataFormat
class NvRawFileHeaderChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileHeaderChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileHeaderChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileHeaderChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileHeaderChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileHeaderChunk_chunk_get, _nvrawfile_pinterface.NvRawFileHeaderChunk_chunk_set)
    __swig_setmethods__["header"] = _nvrawfile_pinterface.NvRawFileHeaderChunk_header_set
    __swig_getmethods__["header"] = _nvrawfile_pinterface.NvRawFileHeaderChunk_header_get
    if _newclass:
        header = _swig_property(_nvrawfile_pinterface.NvRawFileHeaderChunk_header_get, _nvrawfile_pinterface.NvRawFileHeaderChunk_header_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileHeaderChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileHeaderChunk
    __del__ = lambda self: None
NvRawFileHeaderChunk_swigregister = _nvrawfile_pinterface.NvRawFileHeaderChunk_swigregister
NvRawFileHeaderChunk_swigregister(NvRawFileHeaderChunk)


def NvRawFileHeader_new():
    return _nvrawfile_pinterface.NvRawFileHeader_new()
NvRawFileHeader_new = _nvrawfile_pinterface.NvRawFileHeader_new

def NvRawFileHeader_size(hdr):
    return _nvrawfile_pinterface.NvRawFileHeader_size(hdr)
NvRawFileHeader_size = _nvrawfile_pinterface.NvRawFileHeader_size

def NvRawFileHeader_fwrite(hdr, f):
    return _nvrawfile_pinterface.NvRawFileHeader_fwrite(hdr, f)
NvRawFileHeader_fwrite = _nvrawfile_pinterface.NvRawFileHeader_fwrite

def NvRawFileHeader_mwrite(hdr, dest):
    return _nvrawfile_pinterface.NvRawFileHeader_mwrite(hdr, dest)
NvRawFileHeader_mwrite = _nvrawfile_pinterface.NvRawFileHeader_mwrite

def NvRawFileHeader_delete(hdr):
    return _nvrawfile_pinterface.NvRawFileHeader_delete(hdr)
NvRawFileHeader_delete = _nvrawfile_pinterface.NvRawFileHeader_delete
class NvRawFileData_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileData_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileData_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileData_v1_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileData_v1_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileData_v1_version_get, _nvrawfile_pinterface.NvRawFileData_v1_version_set)
    __swig_setmethods__["ordinal"] = _nvrawfile_pinterface.NvRawFileData_v1_ordinal_set
    __swig_getmethods__["ordinal"] = _nvrawfile_pinterface.NvRawFileData_v1_ordinal_get
    if _newclass:
        ordinal = _swig_property(_nvrawfile_pinterface.NvRawFileData_v1_ordinal_get, _nvrawfile_pinterface.NvRawFileData_v1_ordinal_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileData_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileData_v1
    __del__ = lambda self: None
NvRawFileData_v1_swigregister = _nvrawfile_pinterface.NvRawFileData_v1_swigregister
NvRawFileData_v1_swigregister(NvRawFileData_v1)
cvar = _nvrawfile_pinterface.cvar
NvRawFileHeaderChunkUuid = cvar.NvRawFileHeaderChunkUuid

NVRF_DATA_VERSION = _nvrawfile_pinterface.NVRF_DATA_VERSION
class NvRawFileDataChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileDataChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileDataChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileDataChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileDataChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileDataChunk_chunk_get, _nvrawfile_pinterface.NvRawFileDataChunk_chunk_set)
    __swig_setmethods__["data"] = _nvrawfile_pinterface.NvRawFileDataChunk_data_set
    __swig_getmethods__["data"] = _nvrawfile_pinterface.NvRawFileDataChunk_data_get
    if _newclass:
        data = _swig_property(_nvrawfile_pinterface.NvRawFileDataChunk_data_get, _nvrawfile_pinterface.NvRawFileDataChunk_data_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileDataChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileDataChunk
    __del__ = lambda self: None
NvRawFileDataChunk_swigregister = _nvrawfile_pinterface.NvRawFileDataChunk_swigregister
NvRawFileDataChunk_swigregister(NvRawFileDataChunk)


def NvRawFileData_new(dataLength, shouldAlloc):
    return _nvrawfile_pinterface.NvRawFileData_new(dataLength, shouldAlloc)
NvRawFileData_new = _nvrawfile_pinterface.NvRawFileData_new

def NvRawFileData_size(dc):
    return _nvrawfile_pinterface.NvRawFileData_size(dc)
NvRawFileData_size = _nvrawfile_pinterface.NvRawFileData_size

def NvRawFileData_fwrite(dc, f, writePixels):
    return _nvrawfile_pinterface.NvRawFileData_fwrite(dc, f, writePixels)
NvRawFileData_fwrite = _nvrawfile_pinterface.NvRawFileData_fwrite

def NvRawFileData_mwrite(dc, dest, writePixels):
    return _nvrawfile_pinterface.NvRawFileData_mwrite(dc, dest, writePixels)
NvRawFileData_mwrite = _nvrawfile_pinterface.NvRawFileData_mwrite

def NvRawFileData_getData(nrfd):
    return _nvrawfile_pinterface.NvRawFileData_getData(nrfd)
NvRawFileData_getData = _nvrawfile_pinterface.NvRawFileData_getData

def NvRawFileData_delete(dc):
    return _nvrawfile_pinterface.NvRawFileData_delete(dc)
NvRawFileData_delete = _nvrawfile_pinterface.NvRawFileData_delete
class NvRawFileBlob(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileBlob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileBlob, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _nvrawfile_pinterface.NvRawFileBlob_length_set
    __swig_getmethods__["length"] = _nvrawfile_pinterface.NvRawFileBlob_length_get
    if _newclass:
        length = _swig_property(_nvrawfile_pinterface.NvRawFileBlob_length_get, _nvrawfile_pinterface.NvRawFileBlob_length_set)
    __swig_setmethods__["data"] = _nvrawfile_pinterface.NvRawFileBlob_data_set
    __swig_getmethods__["data"] = _nvrawfile_pinterface.NvRawFileBlob_data_get
    if _newclass:
        data = _swig_property(_nvrawfile_pinterface.NvRawFileBlob_data_get, _nvrawfile_pinterface.NvRawFileBlob_data_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileBlob()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileBlob
    __del__ = lambda self: None
NvRawFileBlob_swigregister = _nvrawfile_pinterface.NvRawFileBlob_swigregister
NvRawFileBlob_swigregister(NvRawFileBlob)
NvRawFileDataChunkUuid = cvar.NvRawFileDataChunkUuid


def NvRawFileBlob_new():
    return _nvrawfile_pinterface.NvRawFileBlob_new()
NvRawFileBlob_new = _nvrawfile_pinterface.NvRawFileBlob_new

def NvRawFileBlob_unmarshal(blob, rawData):
    return _nvrawfile_pinterface.NvRawFileBlob_unmarshal(blob, rawData)
NvRawFileBlob_unmarshal = _nvrawfile_pinterface.NvRawFileBlob_unmarshal

def NvRawFileBlob_set(blob, length, newData):
    return _nvrawfile_pinterface.NvRawFileBlob_set(blob, length, newData)
NvRawFileBlob_set = _nvrawfile_pinterface.NvRawFileBlob_set

def NvRawFileBlob_size(blob):
    return _nvrawfile_pinterface.NvRawFileBlob_size(blob)
NvRawFileBlob_size = _nvrawfile_pinterface.NvRawFileBlob_size

def NvRawFileBlob_fwrite(blob, f):
    return _nvrawfile_pinterface.NvRawFileBlob_fwrite(blob, f)
NvRawFileBlob_fwrite = _nvrawfile_pinterface.NvRawFileBlob_fwrite

def NvRawFileBlob_mwrite(blob, dest):
    return _nvrawfile_pinterface.NvRawFileBlob_mwrite(blob, dest)
NvRawFileBlob_mwrite = _nvrawfile_pinterface.NvRawFileBlob_mwrite

def NvRawFileBlob_delete(blob):
    return _nvrawfile_pinterface.NvRawFileBlob_delete(blob)
NvRawFileBlob_delete = _nvrawfile_pinterface.NvRawFileBlob_delete
NvRawFileOutputDataFormat_10BitLinear = _nvrawfile_pinterface.NvRawFileOutputDataFormat_10BitLinear
NvRawFileOutputDataFormat_2x11_1 = _nvrawfile_pinterface.NvRawFileOutputDataFormat_2x11_1
NvRawFileOutputDataFormat_3x12 = _nvrawfile_pinterface.NvRawFileOutputDataFormat_3x12
NvRawFileOutputDataFormat_12BitLinear = _nvrawfile_pinterface.NvRawFileOutputDataFormat_12BitLinear
NvRawFileOutputDataFormat_12BitCombinedCompressed = _nvrawfile_pinterface.NvRawFileOutputDataFormat_12BitCombinedCompressed
NvRawFileOutputDataFormat_12BitCombinedCompressedExtended = _nvrawfile_pinterface.NvRawFileOutputDataFormat_12BitCombinedCompressedExtended
NvRawFileOutputDataFormat_16bitLinear = _nvrawfile_pinterface.NvRawFileOutputDataFormat_16bitLinear
NvRawFileOutputDataFormat_16BitLogDomain = _nvrawfile_pinterface.NvRawFileOutputDataFormat_16BitLogDomain
NvRawFileOutputDataFormat_16BitLogDomainExtended = _nvrawfile_pinterface.NvRawFileOutputDataFormat_16BitLogDomainExtended
NvRawFileOutputDataFormat_20BitLinear = _nvrawfile_pinterface.NvRawFileOutputDataFormat_20BitLinear
NvRawFileOutputDataFormat_20BitLinearExtended = _nvrawfile_pinterface.NvRawFileOutputDataFormat_20BitLinearExtended
NvRawFileOutputDataFormat_12BitCompressed = _nvrawfile_pinterface.NvRawFileOutputDataFormat_12BitCompressed
NvRawFileOutputDataFormat_FP16 = _nvrawfile_pinterface.NvRawFileOutputDataFormat_FP16
NvRawFileOutputDataFormat_16BitCombinedCompressed = _nvrawfile_pinterface.NvRawFileOutputDataFormat_16BitCombinedCompressed
NvRawFileOutputDataFormat_Last = _nvrawfile_pinterface.NvRawFileOutputDataFormat_Last
NvRawFileSensorModeType_Unspecified = _nvrawfile_pinterface.NvRawFileSensorModeType_Unspecified
NvRawFileSensorModeType_Depth = _nvrawfile_pinterface.NvRawFileSensorModeType_Depth
NvRawFileSensorModeType_Yuv = _nvrawfile_pinterface.NvRawFileSensorModeType_Yuv
NvRawFileSensorModeType_Rgb = _nvrawfile_pinterface.NvRawFileSensorModeType_Rgb
NvRawFileSensorModeType_Bayer = _nvrawfile_pinterface.NvRawFileSensorModeType_Bayer
NvRawFileSensorModeType_Bayer_Wdr_Pwl = _nvrawfile_pinterface.NvRawFileSensorModeType_Bayer_Wdr_Pwl
NvRawFileSensorModeType_Bayer_Wdr_Dol = _nvrawfile_pinterface.NvRawFileSensorModeType_Bayer_Wdr_Dol
NvRawFileSensorModeType_Bayer_Wdr_Interleave = _nvrawfile_pinterface.NvRawFileSensorModeType_Bayer_Wdr_Interleave
NVRAWFILE_PIXEL_FORMAT_INT16 = _nvrawfile_pinterface.NVRAWFILE_PIXEL_FORMAT_INT16
NVRAWFILE_PIXEL_FORMAT_S114 = _nvrawfile_pinterface.NVRAWFILE_PIXEL_FORMAT_S114
NVRAWFILE_PIXEL_FORMAT_IEEE_FP16 = _nvrawfile_pinterface.NVRAWFILE_PIXEL_FORMAT_IEEE_FP16
NVRAWFILE_PIXEL_FORMAT_ISPFP = _nvrawfile_pinterface.NVRAWFILE_PIXEL_FORMAT_ISPFP
NVRAWFILE_PIXEL_FORMAT_U16 = _nvrawfile_pinterface.NVRAWFILE_PIXEL_FORMAT_U16
class NvRawFileCapture_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCapture_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCapture_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v1_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v1_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v1_version_get, _nvrawfile_pinterface.NvRawFileCapture_v1_version_set)
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v1_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v1_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v1_exposureTime_get, _nvrawfile_pinterface.NvRawFileCapture_v1_exposureTime_set)
    __swig_setmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v1_exposureCompensation_set
    __swig_getmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v1_exposureCompensation_get
    if _newclass:
        exposureCompensation = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v1_exposureCompensation_get, _nvrawfile_pinterface.NvRawFileCapture_v1_exposureCompensation_set)
    __swig_setmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v1_iso_set
    __swig_getmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v1_iso_get
    if _newclass:
        iso = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v1_iso_get, _nvrawfile_pinterface.NvRawFileCapture_v1_iso_set)
    __swig_setmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v1_focusPosition_set
    __swig_getmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v1_focusPosition_get
    if _newclass:
        focusPosition = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v1_focusPosition_get, _nvrawfile_pinterface.NvRawFileCapture_v1_focusPosition_set)
    __swig_setmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v1_snr_set
    __swig_getmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v1_snr_get
    if _newclass:
        snr = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v1_snr_get, _nvrawfile_pinterface.NvRawFileCapture_v1_snr_set)
    __swig_setmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v1_lux_set
    __swig_getmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v1_lux_get
    if _newclass:
        lux = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v1_lux_get, _nvrawfile_pinterface.NvRawFileCapture_v1_lux_set)
    __swig_setmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v1_sensorGains_set
    __swig_getmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v1_sensorGains_get
    if _newclass:
        sensorGains = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v1_sensorGains_get, _nvrawfile_pinterface.NvRawFileCapture_v1_sensorGains_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCapture_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCapture_v1
    __del__ = lambda self: None
NvRawFileCapture_v1_swigregister = _nvrawfile_pinterface.NvRawFileCapture_v1_swigregister
NvRawFileCapture_v1_swigregister(NvRawFileCapture_v1)

class NvRawFileCapture_v2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCapture_v2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCapture_v2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v2_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v2_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_version_get, _nvrawfile_pinterface.NvRawFileCapture_v2_version_set)
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v2_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v2_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_exposureTime_get, _nvrawfile_pinterface.NvRawFileCapture_v2_exposureTime_set)
    __swig_setmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v2_exposureCompensation_set
    __swig_getmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v2_exposureCompensation_get
    if _newclass:
        exposureCompensation = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_exposureCompensation_get, _nvrawfile_pinterface.NvRawFileCapture_v2_exposureCompensation_set)
    __swig_setmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v2_iso_set
    __swig_getmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v2_iso_get
    if _newclass:
        iso = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_iso_get, _nvrawfile_pinterface.NvRawFileCapture_v2_iso_set)
    __swig_setmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v2_focusPosition_set
    __swig_getmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v2_focusPosition_get
    if _newclass:
        focusPosition = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_focusPosition_get, _nvrawfile_pinterface.NvRawFileCapture_v2_focusPosition_set)
    __swig_setmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v2_snr_set
    __swig_getmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v2_snr_get
    if _newclass:
        snr = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_snr_get, _nvrawfile_pinterface.NvRawFileCapture_v2_snr_set)
    __swig_setmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v2_lux_set
    __swig_getmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v2_lux_get
    if _newclass:
        lux = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_lux_get, _nvrawfile_pinterface.NvRawFileCapture_v2_lux_set)
    __swig_setmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v2_sensorGains_set
    __swig_getmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v2_sensorGains_get
    if _newclass:
        sensorGains = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_sensorGains_get, _nvrawfile_pinterface.NvRawFileCapture_v2_sensorGains_set)
    __swig_setmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v2_flashPower_set
    __swig_getmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v2_flashPower_get
    if _newclass:
        flashPower = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_flashPower_get, _nvrawfile_pinterface.NvRawFileCapture_v2_flashPower_set)
    __swig_setmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v2_flashToAmbientLightRatio_set
    __swig_getmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v2_flashToAmbientLightRatio_get
    if _newclass:
        flashToAmbientLightRatio = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_flashToAmbientLightRatio_get, _nvrawfile_pinterface.NvRawFileCapture_v2_flashToAmbientLightRatio_set)
    __swig_setmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v2_frameRate_set
    __swig_getmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v2_frameRate_get
    if _newclass:
        frameRate = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v2_frameRate_get, _nvrawfile_pinterface.NvRawFileCapture_v2_frameRate_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCapture_v2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCapture_v2
    __del__ = lambda self: None
NvRawFileCapture_v2_swigregister = _nvrawfile_pinterface.NvRawFileCapture_v2_swigregister
NvRawFileCapture_v2_swigregister(NvRawFileCapture_v2)

class NvRawFileCapture_v3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCapture_v3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCapture_v3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v3_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v3_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_version_get, _nvrawfile_pinterface.NvRawFileCapture_v3_version_set)
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v3_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v3_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_exposureTime_get, _nvrawfile_pinterface.NvRawFileCapture_v3_exposureTime_set)
    __swig_setmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v3_exposureCompensation_set
    __swig_getmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v3_exposureCompensation_get
    if _newclass:
        exposureCompensation = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_exposureCompensation_get, _nvrawfile_pinterface.NvRawFileCapture_v3_exposureCompensation_set)
    __swig_setmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v3_iso_set
    __swig_getmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v3_iso_get
    if _newclass:
        iso = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_iso_get, _nvrawfile_pinterface.NvRawFileCapture_v3_iso_set)
    __swig_setmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v3_focusPosition_set
    __swig_getmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v3_focusPosition_get
    if _newclass:
        focusPosition = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_focusPosition_get, _nvrawfile_pinterface.NvRawFileCapture_v3_focusPosition_set)
    __swig_setmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v3_snr_set
    __swig_getmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v3_snr_get
    if _newclass:
        snr = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_snr_get, _nvrawfile_pinterface.NvRawFileCapture_v3_snr_set)
    __swig_setmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v3_lux_set
    __swig_getmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v3_lux_get
    if _newclass:
        lux = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_lux_get, _nvrawfile_pinterface.NvRawFileCapture_v3_lux_set)
    __swig_setmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v3_sensorGains_set
    __swig_getmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v3_sensorGains_get
    if _newclass:
        sensorGains = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_sensorGains_get, _nvrawfile_pinterface.NvRawFileCapture_v3_sensorGains_set)
    __swig_setmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v3_flashPower_set
    __swig_getmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v3_flashPower_get
    if _newclass:
        flashPower = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_flashPower_get, _nvrawfile_pinterface.NvRawFileCapture_v3_flashPower_set)
    __swig_setmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v3_flashToAmbientLightRatio_set
    __swig_getmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v3_flashToAmbientLightRatio_get
    if _newclass:
        flashToAmbientLightRatio = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_flashToAmbientLightRatio_get, _nvrawfile_pinterface.NvRawFileCapture_v3_flashToAmbientLightRatio_set)
    __swig_setmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v3_frameRate_set
    __swig_getmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v3_frameRate_get
    if _newclass:
        frameRate = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_frameRate_get, _nvrawfile_pinterface.NvRawFileCapture_v3_frameRate_set)
    __swig_setmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v3_rollingShutterLength_set
    __swig_getmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v3_rollingShutterLength_get
    if _newclass:
        rollingShutterLength = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v3_rollingShutterLength_get, _nvrawfile_pinterface.NvRawFileCapture_v3_rollingShutterLength_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCapture_v3()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCapture_v3
    __del__ = lambda self: None
NvRawFileCapture_v3_swigregister = _nvrawfile_pinterface.NvRawFileCapture_v3_swigregister
NvRawFileCapture_v3_swigregister(NvRawFileCapture_v3)

class NvRawFileCapture_v4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCapture_v4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCapture_v4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v4_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v4_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_version_get, _nvrawfile_pinterface.NvRawFileCapture_v4_version_set)
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v4_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v4_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_exposureTime_get, _nvrawfile_pinterface.NvRawFileCapture_v4_exposureTime_set)
    __swig_setmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v4_exposureCompensation_set
    __swig_getmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v4_exposureCompensation_get
    if _newclass:
        exposureCompensation = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_exposureCompensation_get, _nvrawfile_pinterface.NvRawFileCapture_v4_exposureCompensation_set)
    __swig_setmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v4_iso_set
    __swig_getmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v4_iso_get
    if _newclass:
        iso = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_iso_get, _nvrawfile_pinterface.NvRawFileCapture_v4_iso_set)
    __swig_setmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v4_focusPosition_set
    __swig_getmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v4_focusPosition_get
    if _newclass:
        focusPosition = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_focusPosition_get, _nvrawfile_pinterface.NvRawFileCapture_v4_focusPosition_set)
    __swig_setmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v4_snr_set
    __swig_getmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v4_snr_get
    if _newclass:
        snr = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_snr_get, _nvrawfile_pinterface.NvRawFileCapture_v4_snr_set)
    __swig_setmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v4_lux_set
    __swig_getmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v4_lux_get
    if _newclass:
        lux = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_lux_get, _nvrawfile_pinterface.NvRawFileCapture_v4_lux_set)
    __swig_setmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v4_sensorGains_set
    __swig_getmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v4_sensorGains_get
    if _newclass:
        sensorGains = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_sensorGains_get, _nvrawfile_pinterface.NvRawFileCapture_v4_sensorGains_set)
    __swig_setmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v4_flashPower_set
    __swig_getmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v4_flashPower_get
    if _newclass:
        flashPower = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_flashPower_get, _nvrawfile_pinterface.NvRawFileCapture_v4_flashPower_set)
    __swig_setmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v4_flashToAmbientLightRatio_set
    __swig_getmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v4_flashToAmbientLightRatio_get
    if _newclass:
        flashToAmbientLightRatio = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_flashToAmbientLightRatio_get, _nvrawfile_pinterface.NvRawFileCapture_v4_flashToAmbientLightRatio_set)
    __swig_setmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v4_frameRate_set
    __swig_getmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v4_frameRate_get
    if _newclass:
        frameRate = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_frameRate_get, _nvrawfile_pinterface.NvRawFileCapture_v4_frameRate_set)
    __swig_setmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v4_rollingShutterLength_set
    __swig_getmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v4_rollingShutterLength_get
    if _newclass:
        rollingShutterLength = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_rollingShutterLength_get, _nvrawfile_pinterface.NvRawFileCapture_v4_rollingShutterLength_set)
    __swig_setmethods__["pixelFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v4_pixelFormat_set
    __swig_getmethods__["pixelFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v4_pixelFormat_get
    if _newclass:
        pixelFormat = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v4_pixelFormat_get, _nvrawfile_pinterface.NvRawFileCapture_v4_pixelFormat_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCapture_v4()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCapture_v4
    __del__ = lambda self: None
NvRawFileCapture_v4_swigregister = _nvrawfile_pinterface.NvRawFileCapture_v4_swigregister
NvRawFileCapture_v4_swigregister(NvRawFileCapture_v4)

class NvRawFileCapture_v5(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCapture_v5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCapture_v5, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v5_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v5_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_version_get, _nvrawfile_pinterface.NvRawFileCapture_v5_version_set)
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v5_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v5_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_exposureTime_get, _nvrawfile_pinterface.NvRawFileCapture_v5_exposureTime_set)
    __swig_setmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v5_exposureCompensation_set
    __swig_getmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v5_exposureCompensation_get
    if _newclass:
        exposureCompensation = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_exposureCompensation_get, _nvrawfile_pinterface.NvRawFileCapture_v5_exposureCompensation_set)
    __swig_setmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v5_iso_set
    __swig_getmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v5_iso_get
    if _newclass:
        iso = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_iso_get, _nvrawfile_pinterface.NvRawFileCapture_v5_iso_set)
    __swig_setmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v5_focusPosition_set
    __swig_getmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v5_focusPosition_get
    if _newclass:
        focusPosition = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_focusPosition_get, _nvrawfile_pinterface.NvRawFileCapture_v5_focusPosition_set)
    __swig_setmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v5_snr_set
    __swig_getmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v5_snr_get
    if _newclass:
        snr = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_snr_get, _nvrawfile_pinterface.NvRawFileCapture_v5_snr_set)
    __swig_setmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v5_lux_set
    __swig_getmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v5_lux_get
    if _newclass:
        lux = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_lux_get, _nvrawfile_pinterface.NvRawFileCapture_v5_lux_set)
    __swig_setmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v5_sensorGains_set
    __swig_getmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v5_sensorGains_get
    if _newclass:
        sensorGains = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_sensorGains_get, _nvrawfile_pinterface.NvRawFileCapture_v5_sensorGains_set)
    __swig_setmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v5_flashPower_set
    __swig_getmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v5_flashPower_get
    if _newclass:
        flashPower = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_flashPower_get, _nvrawfile_pinterface.NvRawFileCapture_v5_flashPower_set)
    __swig_setmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v5_flashToAmbientLightRatio_set
    __swig_getmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v5_flashToAmbientLightRatio_get
    if _newclass:
        flashToAmbientLightRatio = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_flashToAmbientLightRatio_get, _nvrawfile_pinterface.NvRawFileCapture_v5_flashToAmbientLightRatio_set)
    __swig_setmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v5_frameRate_set
    __swig_getmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v5_frameRate_get
    if _newclass:
        frameRate = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_frameRate_get, _nvrawfile_pinterface.NvRawFileCapture_v5_frameRate_set)
    __swig_setmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v5_rollingShutterLength_set
    __swig_getmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v5_rollingShutterLength_get
    if _newclass:
        rollingShutterLength = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_rollingShutterLength_get, _nvrawfile_pinterface.NvRawFileCapture_v5_rollingShutterLength_set)
    __swig_setmethods__["pixelFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v5_pixelFormat_set
    __swig_getmethods__["pixelFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v5_pixelFormat_get
    if _newclass:
        pixelFormat = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_pixelFormat_get, _nvrawfile_pinterface.NvRawFileCapture_v5_pixelFormat_set)
    __swig_setmethods__["ispDigitalGain"] = _nvrawfile_pinterface.NvRawFileCapture_v5_ispDigitalGain_set
    __swig_getmethods__["ispDigitalGain"] = _nvrawfile_pinterface.NvRawFileCapture_v5_ispDigitalGain_get
    if _newclass:
        ispDigitalGain = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v5_ispDigitalGain_get, _nvrawfile_pinterface.NvRawFileCapture_v5_ispDigitalGain_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCapture_v5()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCapture_v5
    __del__ = lambda self: None
NvRawFileCapture_v5_swigregister = _nvrawfile_pinterface.NvRawFileCapture_v5_swigregister
NvRawFileCapture_v5_swigregister(NvRawFileCapture_v5)

class NvRawFileCapture_v6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCapture_v6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCapture_v6, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v6_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v6_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_version_get, _nvrawfile_pinterface.NvRawFileCapture_v6_version_set)
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v6_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v6_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_exposureTime_get, _nvrawfile_pinterface.NvRawFileCapture_v6_exposureTime_set)
    __swig_setmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v6_exposureCompensation_set
    __swig_getmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v6_exposureCompensation_get
    if _newclass:
        exposureCompensation = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_exposureCompensation_get, _nvrawfile_pinterface.NvRawFileCapture_v6_exposureCompensation_set)
    __swig_setmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v6_iso_set
    __swig_getmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v6_iso_get
    if _newclass:
        iso = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_iso_get, _nvrawfile_pinterface.NvRawFileCapture_v6_iso_set)
    __swig_setmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v6_focusPosition_set
    __swig_getmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v6_focusPosition_get
    if _newclass:
        focusPosition = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_focusPosition_get, _nvrawfile_pinterface.NvRawFileCapture_v6_focusPosition_set)
    __swig_setmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v6_snr_set
    __swig_getmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v6_snr_get
    if _newclass:
        snr = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_snr_get, _nvrawfile_pinterface.NvRawFileCapture_v6_snr_set)
    __swig_setmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v6_lux_set
    __swig_getmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v6_lux_get
    if _newclass:
        lux = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_lux_get, _nvrawfile_pinterface.NvRawFileCapture_v6_lux_set)
    __swig_setmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v6_sensorGains_set
    __swig_getmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v6_sensorGains_get
    if _newclass:
        sensorGains = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_sensorGains_get, _nvrawfile_pinterface.NvRawFileCapture_v6_sensorGains_set)
    __swig_setmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v6_flashPower_set
    __swig_getmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v6_flashPower_get
    if _newclass:
        flashPower = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_flashPower_get, _nvrawfile_pinterface.NvRawFileCapture_v6_flashPower_set)
    __swig_setmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v6_flashToAmbientLightRatio_set
    __swig_getmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v6_flashToAmbientLightRatio_get
    if _newclass:
        flashToAmbientLightRatio = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_flashToAmbientLightRatio_get, _nvrawfile_pinterface.NvRawFileCapture_v6_flashToAmbientLightRatio_set)
    __swig_setmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v6_frameRate_set
    __swig_getmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v6_frameRate_get
    if _newclass:
        frameRate = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_frameRate_get, _nvrawfile_pinterface.NvRawFileCapture_v6_frameRate_set)
    __swig_setmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v6_rollingShutterLength_set
    __swig_getmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v6_rollingShutterLength_get
    if _newclass:
        rollingShutterLength = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_rollingShutterLength_get, _nvrawfile_pinterface.NvRawFileCapture_v6_rollingShutterLength_set)
    __swig_setmethods__["pixelFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v6_pixelFormat_set
    __swig_getmethods__["pixelFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v6_pixelFormat_get
    if _newclass:
        pixelFormat = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_pixelFormat_get, _nvrawfile_pinterface.NvRawFileCapture_v6_pixelFormat_set)
    __swig_setmethods__["ispDigitalGain"] = _nvrawfile_pinterface.NvRawFileCapture_v6_ispDigitalGain_set
    __swig_getmethods__["ispDigitalGain"] = _nvrawfile_pinterface.NvRawFileCapture_v6_ispDigitalGain_get
    if _newclass:
        ispDigitalGain = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_ispDigitalGain_get, _nvrawfile_pinterface.NvRawFileCapture_v6_ispDigitalGain_set)
    __swig_setmethods__["outputDataFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v6_outputDataFormat_set
    __swig_getmethods__["outputDataFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v6_outputDataFormat_get
    if _newclass:
        outputDataFormat = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_outputDataFormat_get, _nvrawfile_pinterface.NvRawFileCapture_v6_outputDataFormat_set)
    __swig_setmethods__["bPixelLittleEndian"] = _nvrawfile_pinterface.NvRawFileCapture_v6_bPixelLittleEndian_set
    __swig_getmethods__["bPixelLittleEndian"] = _nvrawfile_pinterface.NvRawFileCapture_v6_bPixelLittleEndian_get
    if _newclass:
        bPixelLittleEndian = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_bPixelLittleEndian_get, _nvrawfile_pinterface.NvRawFileCapture_v6_bPixelLittleEndian_set)
    __swig_setmethods__["embeddedLineCountTop"] = _nvrawfile_pinterface.NvRawFileCapture_v6_embeddedLineCountTop_set
    __swig_getmethods__["embeddedLineCountTop"] = _nvrawfile_pinterface.NvRawFileCapture_v6_embeddedLineCountTop_get
    if _newclass:
        embeddedLineCountTop = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_embeddedLineCountTop_get, _nvrawfile_pinterface.NvRawFileCapture_v6_embeddedLineCountTop_set)
    __swig_setmethods__["embeddedLineCountBottom"] = _nvrawfile_pinterface.NvRawFileCapture_v6_embeddedLineCountBottom_set
    __swig_getmethods__["embeddedLineCountBottom"] = _nvrawfile_pinterface.NvRawFileCapture_v6_embeddedLineCountBottom_get
    if _newclass:
        embeddedLineCountBottom = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_embeddedLineCountBottom_get, _nvrawfile_pinterface.NvRawFileCapture_v6_embeddedLineCountBottom_set)
    __swig_setmethods__["pLut"] = _nvrawfile_pinterface.NvRawFileCapture_v6_pLut_set
    __swig_getmethods__["pLut"] = _nvrawfile_pinterface.NvRawFileCapture_v6_pLut_get
    if _newclass:
        pLut = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v6_pLut_get, _nvrawfile_pinterface.NvRawFileCapture_v6_pLut_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCapture_v6()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCapture_v6
    __del__ = lambda self: None
NvRawFileCapture_v6_swigregister = _nvrawfile_pinterface.NvRawFileCapture_v6_swigregister
NvRawFileCapture_v6_swigregister(NvRawFileCapture_v6)

class NvRawFileCapture_v7(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCapture_v7, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCapture_v7, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v7_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileCapture_v7_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_version_get, _nvrawfile_pinterface.NvRawFileCapture_v7_version_set)
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v7_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileCapture_v7_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_exposureTime_get, _nvrawfile_pinterface.NvRawFileCapture_v7_exposureTime_set)
    __swig_setmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v7_exposureCompensation_set
    __swig_getmethods__["exposureCompensation"] = _nvrawfile_pinterface.NvRawFileCapture_v7_exposureCompensation_get
    if _newclass:
        exposureCompensation = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_exposureCompensation_get, _nvrawfile_pinterface.NvRawFileCapture_v7_exposureCompensation_set)
    __swig_setmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v7_iso_set
    __swig_getmethods__["iso"] = _nvrawfile_pinterface.NvRawFileCapture_v7_iso_get
    if _newclass:
        iso = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_iso_get, _nvrawfile_pinterface.NvRawFileCapture_v7_iso_set)
    __swig_setmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v7_focusPosition_set
    __swig_getmethods__["focusPosition"] = _nvrawfile_pinterface.NvRawFileCapture_v7_focusPosition_get
    if _newclass:
        focusPosition = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_focusPosition_get, _nvrawfile_pinterface.NvRawFileCapture_v7_focusPosition_set)
    __swig_setmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v7_snr_set
    __swig_getmethods__["snr"] = _nvrawfile_pinterface.NvRawFileCapture_v7_snr_get
    if _newclass:
        snr = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_snr_get, _nvrawfile_pinterface.NvRawFileCapture_v7_snr_set)
    __swig_setmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v7_lux_set
    __swig_getmethods__["lux"] = _nvrawfile_pinterface.NvRawFileCapture_v7_lux_get
    if _newclass:
        lux = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_lux_get, _nvrawfile_pinterface.NvRawFileCapture_v7_lux_set)
    __swig_setmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v7_sensorGains_set
    __swig_getmethods__["sensorGains"] = _nvrawfile_pinterface.NvRawFileCapture_v7_sensorGains_get
    if _newclass:
        sensorGains = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_sensorGains_get, _nvrawfile_pinterface.NvRawFileCapture_v7_sensorGains_set)
    __swig_setmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v7_flashPower_set
    __swig_getmethods__["flashPower"] = _nvrawfile_pinterface.NvRawFileCapture_v7_flashPower_get
    if _newclass:
        flashPower = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_flashPower_get, _nvrawfile_pinterface.NvRawFileCapture_v7_flashPower_set)
    __swig_setmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v7_flashToAmbientLightRatio_set
    __swig_getmethods__["flashToAmbientLightRatio"] = _nvrawfile_pinterface.NvRawFileCapture_v7_flashToAmbientLightRatio_get
    if _newclass:
        flashToAmbientLightRatio = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_flashToAmbientLightRatio_get, _nvrawfile_pinterface.NvRawFileCapture_v7_flashToAmbientLightRatio_set)
    __swig_setmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v7_frameRate_set
    __swig_getmethods__["frameRate"] = _nvrawfile_pinterface.NvRawFileCapture_v7_frameRate_get
    if _newclass:
        frameRate = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_frameRate_get, _nvrawfile_pinterface.NvRawFileCapture_v7_frameRate_set)
    __swig_setmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v7_rollingShutterLength_set
    __swig_getmethods__["rollingShutterLength"] = _nvrawfile_pinterface.NvRawFileCapture_v7_rollingShutterLength_get
    if _newclass:
        rollingShutterLength = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_rollingShutterLength_get, _nvrawfile_pinterface.NvRawFileCapture_v7_rollingShutterLength_set)
    __swig_setmethods__["pixelFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v7_pixelFormat_set
    __swig_getmethods__["pixelFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v7_pixelFormat_get
    if _newclass:
        pixelFormat = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_pixelFormat_get, _nvrawfile_pinterface.NvRawFileCapture_v7_pixelFormat_set)
    __swig_setmethods__["ispDigitalGain"] = _nvrawfile_pinterface.NvRawFileCapture_v7_ispDigitalGain_set
    __swig_getmethods__["ispDigitalGain"] = _nvrawfile_pinterface.NvRawFileCapture_v7_ispDigitalGain_get
    if _newclass:
        ispDigitalGain = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_ispDigitalGain_get, _nvrawfile_pinterface.NvRawFileCapture_v7_ispDigitalGain_set)
    __swig_setmethods__["outputDataFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v7_outputDataFormat_set
    __swig_getmethods__["outputDataFormat"] = _nvrawfile_pinterface.NvRawFileCapture_v7_outputDataFormat_get
    if _newclass:
        outputDataFormat = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_outputDataFormat_get, _nvrawfile_pinterface.NvRawFileCapture_v7_outputDataFormat_set)
    __swig_setmethods__["bPixelLittleEndian"] = _nvrawfile_pinterface.NvRawFileCapture_v7_bPixelLittleEndian_set
    __swig_getmethods__["bPixelLittleEndian"] = _nvrawfile_pinterface.NvRawFileCapture_v7_bPixelLittleEndian_get
    if _newclass:
        bPixelLittleEndian = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_bPixelLittleEndian_get, _nvrawfile_pinterface.NvRawFileCapture_v7_bPixelLittleEndian_set)
    __swig_setmethods__["embeddedLineCountTop"] = _nvrawfile_pinterface.NvRawFileCapture_v7_embeddedLineCountTop_set
    __swig_getmethods__["embeddedLineCountTop"] = _nvrawfile_pinterface.NvRawFileCapture_v7_embeddedLineCountTop_get
    if _newclass:
        embeddedLineCountTop = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_embeddedLineCountTop_get, _nvrawfile_pinterface.NvRawFileCapture_v7_embeddedLineCountTop_set)
    __swig_setmethods__["embeddedLineCountBottom"] = _nvrawfile_pinterface.NvRawFileCapture_v7_embeddedLineCountBottom_set
    __swig_getmethods__["embeddedLineCountBottom"] = _nvrawfile_pinterface.NvRawFileCapture_v7_embeddedLineCountBottom_get
    if _newclass:
        embeddedLineCountBottom = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_embeddedLineCountBottom_get, _nvrawfile_pinterface.NvRawFileCapture_v7_embeddedLineCountBottom_set)
    __swig_setmethods__["pLut"] = _nvrawfile_pinterface.NvRawFileCapture_v7_pLut_set
    __swig_getmethods__["pLut"] = _nvrawfile_pinterface.NvRawFileCapture_v7_pLut_get
    if _newclass:
        pLut = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_pLut_get, _nvrawfile_pinterface.NvRawFileCapture_v7_pLut_set)
    __swig_setmethods__["csiPixelBitDepth"] = _nvrawfile_pinterface.NvRawFileCapture_v7_csiPixelBitDepth_set
    __swig_getmethods__["csiPixelBitDepth"] = _nvrawfile_pinterface.NvRawFileCapture_v7_csiPixelBitDepth_get
    if _newclass:
        csiPixelBitDepth = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_csiPixelBitDepth_get, _nvrawfile_pinterface.NvRawFileCapture_v7_csiPixelBitDepth_set)
    __swig_setmethods__["dynamicPixelBitDepth"] = _nvrawfile_pinterface.NvRawFileCapture_v7_dynamicPixelBitDepth_set
    __swig_getmethods__["dynamicPixelBitDepth"] = _nvrawfile_pinterface.NvRawFileCapture_v7_dynamicPixelBitDepth_get
    if _newclass:
        dynamicPixelBitDepth = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_dynamicPixelBitDepth_get, _nvrawfile_pinterface.NvRawFileCapture_v7_dynamicPixelBitDepth_set)
    __swig_setmethods__["sensorModeType"] = _nvrawfile_pinterface.NvRawFileCapture_v7_sensorModeType_set
    __swig_getmethods__["sensorModeType"] = _nvrawfile_pinterface.NvRawFileCapture_v7_sensorModeType_get
    if _newclass:
        sensorModeType = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_sensorModeType_get, _nvrawfile_pinterface.NvRawFileCapture_v7_sensorModeType_set)
    __swig_setmethods__["zoomMotorStep"] = _nvrawfile_pinterface.NvRawFileCapture_v7_zoomMotorStep_set
    __swig_getmethods__["zoomMotorStep"] = _nvrawfile_pinterface.NvRawFileCapture_v7_zoomMotorStep_get
    if _newclass:
        zoomMotorStep = _swig_property(_nvrawfile_pinterface.NvRawFileCapture_v7_zoomMotorStep_get, _nvrawfile_pinterface.NvRawFileCapture_v7_zoomMotorStep_set)

    def get_sensorGains(self, index):
        return _nvrawfile_pinterface.NvRawFileCapture_v7_get_sensorGains(self, index)

    def get_pixelFormat(self):
        return _nvrawfile_pinterface.NvRawFileCapture_v7_get_pixelFormat(self)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCapture_v7()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCapture_v7
    __del__ = lambda self: None
NvRawFileCapture_v7_swigregister = _nvrawfile_pinterface.NvRawFileCapture_v7_swigregister
NvRawFileCapture_v7_swigregister(NvRawFileCapture_v7)

NVRF_CAPTURE_VERSION = _nvrawfile_pinterface.NVRF_CAPTURE_VERSION
class NvRawFileCaptureChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCaptureChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCaptureChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileCaptureChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileCaptureChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileCaptureChunk_chunk_get, _nvrawfile_pinterface.NvRawFileCaptureChunk_chunk_set)
    __swig_setmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileCaptureChunk_unknown_set
    __swig_getmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileCaptureChunk_unknown_get
    if _newclass:
        unknown = _swig_property(_nvrawfile_pinterface.NvRawFileCaptureChunk_unknown_get, _nvrawfile_pinterface.NvRawFileCaptureChunk_unknown_set)
    __swig_setmethods__["capture"] = _nvrawfile_pinterface.NvRawFileCaptureChunk_capture_set
    __swig_getmethods__["capture"] = _nvrawfile_pinterface.NvRawFileCaptureChunk_capture_get
    if _newclass:
        capture = _swig_property(_nvrawfile_pinterface.NvRawFileCaptureChunk_capture_get, _nvrawfile_pinterface.NvRawFileCaptureChunk_capture_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCaptureChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCaptureChunk
    __del__ = lambda self: None
NvRawFileCaptureChunk_swigregister = _nvrawfile_pinterface.NvRawFileCaptureChunk_swigregister
NvRawFileCaptureChunk_swigregister(NvRawFileCaptureChunk)


def NvRawFileCapture_new():
    return _nvrawfile_pinterface.NvRawFileCapture_new()
NvRawFileCapture_new = _nvrawfile_pinterface.NvRawFileCapture_new

def NvRawFileCapture_unmarshal(readChunk):
    return _nvrawfile_pinterface.NvRawFileCapture_unmarshal(readChunk)
NvRawFileCapture_unmarshal = _nvrawfile_pinterface.NvRawFileCapture_unmarshal

def NvRawFileCapture_upgrade(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_upgrade(cc)
NvRawFileCapture_upgrade = _nvrawfile_pinterface.NvRawFileCapture_upgrade

def NvRawFileCapture_version(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_version(cc)
NvRawFileCapture_version = _nvrawfile_pinterface.NvRawFileCapture_version

def NvRawFileCapture_size(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_size(cc)
NvRawFileCapture_size = _nvrawfile_pinterface.NvRawFileCapture_size

def NvRawFileCapture_fwrite(cc, f):
    return _nvrawfile_pinterface.NvRawFileCapture_fwrite(cc, f)
NvRawFileCapture_fwrite = _nvrawfile_pinterface.NvRawFileCapture_fwrite

def NvRawFileCapture_mwrite(cc, dest):
    return _nvrawfile_pinterface.NvRawFileCapture_mwrite(cc, dest)
NvRawFileCapture_mwrite = _nvrawfile_pinterface.NvRawFileCapture_mwrite

def NvRawFileCapture_delete(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_delete(cc)
NvRawFileCapture_delete = _nvrawfile_pinterface.NvRawFileCapture_delete

def NvRawFileCapture_getRollingShutterLength(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getRollingShutterLength(cc)
NvRawFileCapture_getRollingShutterLength = _nvrawfile_pinterface.NvRawFileCapture_getRollingShutterLength

def NvRawFileCapture_setRollingShutterLength(cc, rsl):
    return _nvrawfile_pinterface.NvRawFileCapture_setRollingShutterLength(cc, rsl)
NvRawFileCapture_setRollingShutterLength = _nvrawfile_pinterface.NvRawFileCapture_setRollingShutterLength

def NvRawFileCapture_invalidateExposure(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_invalidateExposure(cc)
NvRawFileCapture_invalidateExposure = _nvrawfile_pinterface.NvRawFileCapture_invalidateExposure

def NvRawFileCapture_setPixelFormat(cc, formatString):
    return _nvrawfile_pinterface.NvRawFileCapture_setPixelFormat(cc, formatString)
NvRawFileCapture_setPixelFormat = _nvrawfile_pinterface.NvRawFileCapture_setPixelFormat

def NvRawFileCapture_getPixelFormat(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getPixelFormat(cc)
NvRawFileCapture_getPixelFormat = _nvrawfile_pinterface.NvRawFileCapture_getPixelFormat

def NvRawFileCapture_setIspDigitalGain(cc, ispDigitalGain):
    return _nvrawfile_pinterface.NvRawFileCapture_setIspDigitalGain(cc, ispDigitalGain)
NvRawFileCapture_setIspDigitalGain = _nvrawfile_pinterface.NvRawFileCapture_setIspDigitalGain

def NvRawFileCapture_getIspDigitalGain(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getIspDigitalGain(cc)
NvRawFileCapture_getIspDigitalGain = _nvrawfile_pinterface.NvRawFileCapture_getIspDigitalGain

def NvRawFileCapture_setOutputDataFormat(cc, outputDataFormat):
    return _nvrawfile_pinterface.NvRawFileCapture_setOutputDataFormat(cc, outputDataFormat)
NvRawFileCapture_setOutputDataFormat = _nvrawfile_pinterface.NvRawFileCapture_setOutputDataFormat

def NvRawFileCapture_getOutputDataFormat(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getOutputDataFormat(cc)
NvRawFileCapture_getOutputDataFormat = _nvrawfile_pinterface.NvRawFileCapture_getOutputDataFormat

def NvRawFileCapture_setPixelEndianness(cc, bPixelLittleEndian):
    return _nvrawfile_pinterface.NvRawFileCapture_setPixelEndianness(cc, bPixelLittleEndian)
NvRawFileCapture_setPixelEndianness = _nvrawfile_pinterface.NvRawFileCapture_setPixelEndianness

def NvRawFileCapture_getPixelEndianness(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getPixelEndianness(cc)
NvRawFileCapture_getPixelEndianness = _nvrawfile_pinterface.NvRawFileCapture_getPixelEndianness

def NvRawFileCapture_setEmbeddedLineCountTop(cc, embeddedLineCount):
    return _nvrawfile_pinterface.NvRawFileCapture_setEmbeddedLineCountTop(cc, embeddedLineCount)
NvRawFileCapture_setEmbeddedLineCountTop = _nvrawfile_pinterface.NvRawFileCapture_setEmbeddedLineCountTop

def NvRawFileCapture_getEmbeddedLineCountTop(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getEmbeddedLineCountTop(cc)
NvRawFileCapture_getEmbeddedLineCountTop = _nvrawfile_pinterface.NvRawFileCapture_getEmbeddedLineCountTop

def NvRawFileCapture_setEmbeddedLineCountBottom(cc, embeddedLineCount):
    return _nvrawfile_pinterface.NvRawFileCapture_setEmbeddedLineCountBottom(cc, embeddedLineCount)
NvRawFileCapture_setEmbeddedLineCountBottom = _nvrawfile_pinterface.NvRawFileCapture_setEmbeddedLineCountBottom

def NvRawFileCapture_getEmbeddedLineCountBottom(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getEmbeddedLineCountBottom(cc)
NvRawFileCapture_getEmbeddedLineCountBottom = _nvrawfile_pinterface.NvRawFileCapture_getEmbeddedLineCountBottom

def NvRawFileCapture_setLut(cc, pBuffer, size):
    return _nvrawfile_pinterface.NvRawFileCapture_setLut(cc, pBuffer, size)
NvRawFileCapture_setLut = _nvrawfile_pinterface.NvRawFileCapture_setLut

def NvRawFileCapture_getLut(cc, ppBuffer, pSize):
    return _nvrawfile_pinterface.NvRawFileCapture_getLut(cc, ppBuffer, pSize)
NvRawFileCapture_getLut = _nvrawfile_pinterface.NvRawFileCapture_getLut

def NvRawFileCapture_getCsiPixelBitDepth(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getCsiPixelBitDepth(cc)
NvRawFileCapture_getCsiPixelBitDepth = _nvrawfile_pinterface.NvRawFileCapture_getCsiPixelBitDepth

def NvRawFileCapture_setCsiPixelBitDepth(cc, csiPixelBitDepth):
    return _nvrawfile_pinterface.NvRawFileCapture_setCsiPixelBitDepth(cc, csiPixelBitDepth)
NvRawFileCapture_setCsiPixelBitDepth = _nvrawfile_pinterface.NvRawFileCapture_setCsiPixelBitDepth

def NvRawFileCapture_getDynamicPixelBitDepth(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getDynamicPixelBitDepth(cc)
NvRawFileCapture_getDynamicPixelBitDepth = _nvrawfile_pinterface.NvRawFileCapture_getDynamicPixelBitDepth

def NvRawFileCapture_setDynamicPixelBitDepth(cc, dynPixelBitDepth):
    return _nvrawfile_pinterface.NvRawFileCapture_setDynamicPixelBitDepth(cc, dynPixelBitDepth)
NvRawFileCapture_setDynamicPixelBitDepth = _nvrawfile_pinterface.NvRawFileCapture_setDynamicPixelBitDepth

def NvRawFileCapture_getSensorModeType(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getSensorModeType(cc)
NvRawFileCapture_getSensorModeType = _nvrawfile_pinterface.NvRawFileCapture_getSensorModeType

def NvRawFileCapture_setSensorModeType(cc, sensorModeType):
    return _nvrawfile_pinterface.NvRawFileCapture_setSensorModeType(cc, sensorModeType)
NvRawFileCapture_setSensorModeType = _nvrawfile_pinterface.NvRawFileCapture_setSensorModeType

def NvRawFileCapture_getZoomMotorStep(cc):
    return _nvrawfile_pinterface.NvRawFileCapture_getZoomMotorStep(cc)
NvRawFileCapture_getZoomMotorStep = _nvrawfile_pinterface.NvRawFileCapture_getZoomMotorStep

def NvRawFileCapture_setZoomMotorStep(cc, zoomMotorStep):
    return _nvrawfile_pinterface.NvRawFileCapture_setZoomMotorStep(cc, zoomMotorStep)
NvRawFileCapture_setZoomMotorStep = _nvrawfile_pinterface.NvRawFileCapture_setZoomMotorStep
class NvRawFileCameraState_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCameraState_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCameraState_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileCameraState_v1_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileCameraState_v1_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileCameraState_v1_version_get, _nvrawfile_pinterface.NvRawFileCameraState_v1_version_set)
    __swig_setmethods__["awbConvergeStatus"] = _nvrawfile_pinterface.NvRawFileCameraState_v1_awbConvergeStatus_set
    __swig_getmethods__["awbConvergeStatus"] = _nvrawfile_pinterface.NvRawFileCameraState_v1_awbConvergeStatus_get
    if _newclass:
        awbConvergeStatus = _swig_property(_nvrawfile_pinterface.NvRawFileCameraState_v1_awbConvergeStatus_get, _nvrawfile_pinterface.NvRawFileCameraState_v1_awbConvergeStatus_set)
    __swig_setmethods__["awbGains"] = _nvrawfile_pinterface.NvRawFileCameraState_v1_awbGains_set
    __swig_getmethods__["awbGains"] = _nvrawfile_pinterface.NvRawFileCameraState_v1_awbGains_get
    if _newclass:
        awbGains = _swig_property(_nvrawfile_pinterface.NvRawFileCameraState_v1_awbGains_get, _nvrawfile_pinterface.NvRawFileCameraState_v1_awbGains_set)

    def get_awbGains(self, index):
        return _nvrawfile_pinterface.NvRawFileCameraState_v1_get_awbGains(self, index)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCameraState_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCameraState_v1
    __del__ = lambda self: None
NvRawFileCameraState_v1_swigregister = _nvrawfile_pinterface.NvRawFileCameraState_v1_swigregister
NvRawFileCameraState_v1_swigregister(NvRawFileCameraState_v1)
NvRawFileCaptureChunkUuid = cvar.NvRawFileCaptureChunkUuid

NVRF_CAMERASTATE_VERSION = _nvrawfile_pinterface.NVRF_CAMERASTATE_VERSION
class NvRawFileCameraStateChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCameraStateChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCameraStateChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileCameraStateChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileCameraStateChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileCameraStateChunk_chunk_get, _nvrawfile_pinterface.NvRawFileCameraStateChunk_chunk_set)
    __swig_setmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileCameraStateChunk_unknown_set
    __swig_getmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileCameraStateChunk_unknown_get
    if _newclass:
        unknown = _swig_property(_nvrawfile_pinterface.NvRawFileCameraStateChunk_unknown_get, _nvrawfile_pinterface.NvRawFileCameraStateChunk_unknown_set)
    __swig_setmethods__["state"] = _nvrawfile_pinterface.NvRawFileCameraStateChunk_state_set
    __swig_getmethods__["state"] = _nvrawfile_pinterface.NvRawFileCameraStateChunk_state_get
    if _newclass:
        state = _swig_property(_nvrawfile_pinterface.NvRawFileCameraStateChunk_state_get, _nvrawfile_pinterface.NvRawFileCameraStateChunk_state_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCameraStateChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCameraStateChunk
    __del__ = lambda self: None
NvRawFileCameraStateChunk_swigregister = _nvrawfile_pinterface.NvRawFileCameraStateChunk_swigregister
NvRawFileCameraStateChunk_swigregister(NvRawFileCameraStateChunk)


def NvRawFileCameraState_new():
    return _nvrawfile_pinterface.NvRawFileCameraState_new()
NvRawFileCameraState_new = _nvrawfile_pinterface.NvRawFileCameraState_new

def NvRawFileCameraState_unmarshal(readChunk):
    return _nvrawfile_pinterface.NvRawFileCameraState_unmarshal(readChunk)
NvRawFileCameraState_unmarshal = _nvrawfile_pinterface.NvRawFileCameraState_unmarshal

def NvRawFileCameraState_size(ec):
    return _nvrawfile_pinterface.NvRawFileCameraState_size(ec)
NvRawFileCameraState_size = _nvrawfile_pinterface.NvRawFileCameraState_size

def NvRawFileCameraState_fwrite(ec, f):
    return _nvrawfile_pinterface.NvRawFileCameraState_fwrite(ec, f)
NvRawFileCameraState_fwrite = _nvrawfile_pinterface.NvRawFileCameraState_fwrite

def NvRawFileCameraState_mwrite(ec, dest):
    return _nvrawfile_pinterface.NvRawFileCameraState_mwrite(ec, dest)
NvRawFileCameraState_mwrite = _nvrawfile_pinterface.NvRawFileCameraState_mwrite

def NvRawFileCameraState_delete(ec):
    return _nvrawfile_pinterface.NvRawFileCameraState_delete(ec)
NvRawFileCameraState_delete = _nvrawfile_pinterface.NvRawFileCameraState_delete
class NvRawFileM3Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileM3Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileM3Data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _nvrawfile_pinterface.NvRawFileM3Data_data_set
    __swig_getmethods__["data"] = _nvrawfile_pinterface.NvRawFileM3Data_data_get
    if _newclass:
        data = _swig_property(_nvrawfile_pinterface.NvRawFileM3Data_data_get, _nvrawfile_pinterface.NvRawFileM3Data_data_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileM3Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileM3Data
    __del__ = lambda self: None
NvRawFileM3Data_swigregister = _nvrawfile_pinterface.NvRawFileM3Data_swigregister
NvRawFileM3Data_swigregister(NvRawFileM3Data)
NvRawFileCameraStateChunkUuid = cvar.NvRawFileCameraStateChunkUuid

class NvRawFileM3DataChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileM3DataChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileM3DataChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileM3DataChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileM3DataChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileM3DataChunk_chunk_get, _nvrawfile_pinterface.NvRawFileM3DataChunk_chunk_set)
    __swig_setmethods__["m3data"] = _nvrawfile_pinterface.NvRawFileM3DataChunk_m3data_set
    __swig_getmethods__["m3data"] = _nvrawfile_pinterface.NvRawFileM3DataChunk_m3data_get
    if _newclass:
        m3data = _swig_property(_nvrawfile_pinterface.NvRawFileM3DataChunk_m3data_get, _nvrawfile_pinterface.NvRawFileM3DataChunk_m3data_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileM3DataChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileM3DataChunk
    __del__ = lambda self: None
NvRawFileM3DataChunk_swigregister = _nvrawfile_pinterface.NvRawFileM3DataChunk_swigregister
NvRawFileM3DataChunk_swigregister(NvRawFileM3DataChunk)


def NvRawFileM3Data_new():
    return _nvrawfile_pinterface.NvRawFileM3Data_new()
NvRawFileM3Data_new = _nvrawfile_pinterface.NvRawFileM3Data_new

def NvRawFileM3Data_size(m3d):
    return _nvrawfile_pinterface.NvRawFileM3Data_size(m3d)
NvRawFileM3Data_size = _nvrawfile_pinterface.NvRawFileM3Data_size

def NvRawFileM3Data_fwrite(m3d, f):
    return _nvrawfile_pinterface.NvRawFileM3Data_fwrite(m3d, f)
NvRawFileM3Data_fwrite = _nvrawfile_pinterface.NvRawFileM3Data_fwrite

def NvRawFileM3Data_mwrite(m3d, dest):
    return _nvrawfile_pinterface.NvRawFileM3Data_mwrite(m3d, dest)
NvRawFileM3Data_mwrite = _nvrawfile_pinterface.NvRawFileM3Data_mwrite

def NvRawFileM3Data_delete(m3d):
    return _nvrawfile_pinterface.NvRawFileM3Data_delete(m3d)
NvRawFileM3Data_delete = _nvrawfile_pinterface.NvRawFileM3Data_delete
class NvRawFileAFInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileAFInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileAFInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["afinput"] = _nvrawfile_pinterface.NvRawFileAFInput_afinput_set
    __swig_getmethods__["afinput"] = _nvrawfile_pinterface.NvRawFileAFInput_afinput_get
    if _newclass:
        afinput = _swig_property(_nvrawfile_pinterface.NvRawFileAFInput_afinput_get, _nvrawfile_pinterface.NvRawFileAFInput_afinput_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileAFInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileAFInput
    __del__ = lambda self: None
NvRawFileAFInput_swigregister = _nvrawfile_pinterface.NvRawFileAFInput_swigregister
NvRawFileAFInput_swigregister(NvRawFileAFInput)
NvRawFileM3DataChunkUuid = cvar.NvRawFileM3DataChunkUuid

class NvRawFileAFInputChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileAFInputChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileAFInputChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileAFInputChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileAFInputChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileAFInputChunk_chunk_get, _nvrawfile_pinterface.NvRawFileAFInputChunk_chunk_set)
    __swig_setmethods__["afinput"] = _nvrawfile_pinterface.NvRawFileAFInputChunk_afinput_set
    __swig_getmethods__["afinput"] = _nvrawfile_pinterface.NvRawFileAFInputChunk_afinput_get
    if _newclass:
        afinput = _swig_property(_nvrawfile_pinterface.NvRawFileAFInputChunk_afinput_get, _nvrawfile_pinterface.NvRawFileAFInputChunk_afinput_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileAFInputChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileAFInputChunk
    __del__ = lambda self: None
NvRawFileAFInputChunk_swigregister = _nvrawfile_pinterface.NvRawFileAFInputChunk_swigregister
NvRawFileAFInputChunk_swigregister(NvRawFileAFInputChunk)


def NvRawFileAFInput_new():
    return _nvrawfile_pinterface.NvRawFileAFInput_new()
NvRawFileAFInput_new = _nvrawfile_pinterface.NvRawFileAFInput_new

def NvRawFileAFInput_size(afi):
    return _nvrawfile_pinterface.NvRawFileAFInput_size(afi)
NvRawFileAFInput_size = _nvrawfile_pinterface.NvRawFileAFInput_size

def NvRawFileAFInput_fwrite(afi, f):
    return _nvrawfile_pinterface.NvRawFileAFInput_fwrite(afi, f)
NvRawFileAFInput_fwrite = _nvrawfile_pinterface.NvRawFileAFInput_fwrite

def NvRawFileAFInput_mwrite(afi, dest):
    return _nvrawfile_pinterface.NvRawFileAFInput_mwrite(afi, dest)
NvRawFileAFInput_mwrite = _nvrawfile_pinterface.NvRawFileAFInput_mwrite

def NvRawFileAFInput_delete(afi):
    return _nvrawfile_pinterface.NvRawFileAFInput_delete(afi)
NvRawFileAFInput_delete = _nvrawfile_pinterface.NvRawFileAFInput_delete
class NvRawFileSharpness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileSharpness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileSharpness, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sharpness"] = _nvrawfile_pinterface.NvRawFileSharpness_sharpness_set
    __swig_getmethods__["sharpness"] = _nvrawfile_pinterface.NvRawFileSharpness_sharpness_get
    if _newclass:
        sharpness = _swig_property(_nvrawfile_pinterface.NvRawFileSharpness_sharpness_get, _nvrawfile_pinterface.NvRawFileSharpness_sharpness_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileSharpness()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileSharpness
    __del__ = lambda self: None
NvRawFileSharpness_swigregister = _nvrawfile_pinterface.NvRawFileSharpness_swigregister
NvRawFileSharpness_swigregister(NvRawFileSharpness)
NvRawFileAFInputChunkUuid = cvar.NvRawFileAFInputChunkUuid

class NvRawFileSharpnessChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileSharpnessChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileSharpnessChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileSharpnessChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileSharpnessChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileSharpnessChunk_chunk_get, _nvrawfile_pinterface.NvRawFileSharpnessChunk_chunk_set)
    __swig_setmethods__["sharpness"] = _nvrawfile_pinterface.NvRawFileSharpnessChunk_sharpness_set
    __swig_getmethods__["sharpness"] = _nvrawfile_pinterface.NvRawFileSharpnessChunk_sharpness_get
    if _newclass:
        sharpness = _swig_property(_nvrawfile_pinterface.NvRawFileSharpnessChunk_sharpness_get, _nvrawfile_pinterface.NvRawFileSharpnessChunk_sharpness_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileSharpnessChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileSharpnessChunk
    __del__ = lambda self: None
NvRawFileSharpnessChunk_swigregister = _nvrawfile_pinterface.NvRawFileSharpnessChunk_swigregister
NvRawFileSharpnessChunk_swigregister(NvRawFileSharpnessChunk)


def NvRawFileSharpness_new():
    return _nvrawfile_pinterface.NvRawFileSharpness_new()
NvRawFileSharpness_new = _nvrawfile_pinterface.NvRawFileSharpness_new

def NvRawFileSharpness_size(sc):
    return _nvrawfile_pinterface.NvRawFileSharpness_size(sc)
NvRawFileSharpness_size = _nvrawfile_pinterface.NvRawFileSharpness_size

def NvRawFileSharpness_fwrite(sc, f):
    return _nvrawfile_pinterface.NvRawFileSharpness_fwrite(sc, f)
NvRawFileSharpness_fwrite = _nvrawfile_pinterface.NvRawFileSharpness_fwrite

def NvRawFileSharpness_mwrite(sc, dest):
    return _nvrawfile_pinterface.NvRawFileSharpness_mwrite(sc, dest)
NvRawFileSharpness_mwrite = _nvrawfile_pinterface.NvRawFileSharpness_mwrite

def NvRawFileSharpness_delete(sc):
    return _nvrawfile_pinterface.NvRawFileSharpness_delete(sc)
NvRawFileSharpness_delete = _nvrawfile_pinterface.NvRawFileSharpness_delete
class NvRawFileComment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileComment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileComment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["comment"] = _nvrawfile_pinterface.NvRawFileComment_comment_set
    __swig_getmethods__["comment"] = _nvrawfile_pinterface.NvRawFileComment_comment_get
    if _newclass:
        comment = _swig_property(_nvrawfile_pinterface.NvRawFileComment_comment_get, _nvrawfile_pinterface.NvRawFileComment_comment_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileComment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileComment
    __del__ = lambda self: None
NvRawFileComment_swigregister = _nvrawfile_pinterface.NvRawFileComment_swigregister
NvRawFileComment_swigregister(NvRawFileComment)
NvRawFileSharpnessChunkUuid = cvar.NvRawFileSharpnessChunkUuid

class NvRawFileCommentChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileCommentChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileCommentChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileCommentChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileCommentChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileCommentChunk_chunk_get, _nvrawfile_pinterface.NvRawFileCommentChunk_chunk_set)
    __swig_setmethods__["comment"] = _nvrawfile_pinterface.NvRawFileCommentChunk_comment_set
    __swig_getmethods__["comment"] = _nvrawfile_pinterface.NvRawFileCommentChunk_comment_get
    if _newclass:
        comment = _swig_property(_nvrawfile_pinterface.NvRawFileCommentChunk_comment_get, _nvrawfile_pinterface.NvRawFileCommentChunk_comment_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileCommentChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileCommentChunk
    __del__ = lambda self: None
NvRawFileCommentChunk_swigregister = _nvrawfile_pinterface.NvRawFileCommentChunk_swigregister
NvRawFileCommentChunk_swigregister(NvRawFileCommentChunk)


def NvRawFileComment_new():
    return _nvrawfile_pinterface.NvRawFileComment_new()
NvRawFileComment_new = _nvrawfile_pinterface.NvRawFileComment_new

def NvRawFileComment_unmarshal(readChunk):
    return _nvrawfile_pinterface.NvRawFileComment_unmarshal(readChunk)
NvRawFileComment_unmarshal = _nvrawfile_pinterface.NvRawFileComment_unmarshal

def NvRawFileComment_size(cc):
    return _nvrawfile_pinterface.NvRawFileComment_size(cc)
NvRawFileComment_size = _nvrawfile_pinterface.NvRawFileComment_size

def NvRawFileComment_set(cc, newString):
    return _nvrawfile_pinterface.NvRawFileComment_set(cc, newString)
NvRawFileComment_set = _nvrawfile_pinterface.NvRawFileComment_set

def NvRawFileComment_fwrite(cc, f):
    return _nvrawfile_pinterface.NvRawFileComment_fwrite(cc, f)
NvRawFileComment_fwrite = _nvrawfile_pinterface.NvRawFileComment_fwrite

def NvRawFileComment_mwrite(cc, dest):
    return _nvrawfile_pinterface.NvRawFileComment_mwrite(cc, dest)
NvRawFileComment_mwrite = _nvrawfile_pinterface.NvRawFileComment_mwrite

def NvRawFileComment_delete(cc):
    return _nvrawfile_pinterface.NvRawFileComment_delete(cc)
NvRawFileComment_delete = _nvrawfile_pinterface.NvRawFileComment_delete
class NvRawFileMakernote(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileMakernote, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileMakernote, name)
    __repr__ = _swig_repr
    __swig_setmethods__["makernote"] = _nvrawfile_pinterface.NvRawFileMakernote_makernote_set
    __swig_getmethods__["makernote"] = _nvrawfile_pinterface.NvRawFileMakernote_makernote_get
    if _newclass:
        makernote = _swig_property(_nvrawfile_pinterface.NvRawFileMakernote_makernote_get, _nvrawfile_pinterface.NvRawFileMakernote_makernote_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileMakernote()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileMakernote
    __del__ = lambda self: None
NvRawFileMakernote_swigregister = _nvrawfile_pinterface.NvRawFileMakernote_swigregister
NvRawFileMakernote_swigregister(NvRawFileMakernote)
NvRawFileCommentChunkUuid = cvar.NvRawFileCommentChunkUuid

class NvRawFileMakernoteChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileMakernoteChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileMakernoteChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileMakernoteChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileMakernoteChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileMakernoteChunk_chunk_get, _nvrawfile_pinterface.NvRawFileMakernoteChunk_chunk_set)
    __swig_setmethods__["makernote"] = _nvrawfile_pinterface.NvRawFileMakernoteChunk_makernote_set
    __swig_getmethods__["makernote"] = _nvrawfile_pinterface.NvRawFileMakernoteChunk_makernote_get
    if _newclass:
        makernote = _swig_property(_nvrawfile_pinterface.NvRawFileMakernoteChunk_makernote_get, _nvrawfile_pinterface.NvRawFileMakernoteChunk_makernote_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileMakernoteChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileMakernoteChunk
    __del__ = lambda self: None
NvRawFileMakernoteChunk_swigregister = _nvrawfile_pinterface.NvRawFileMakernoteChunk_swigregister
NvRawFileMakernoteChunk_swigregister(NvRawFileMakernoteChunk)


def NvRawFileMakernote_new():
    return _nvrawfile_pinterface.NvRawFileMakernote_new()
NvRawFileMakernote_new = _nvrawfile_pinterface.NvRawFileMakernote_new

def NvRawFileMakernote_unmarshal(readChunk):
    return _nvrawfile_pinterface.NvRawFileMakernote_unmarshal(readChunk)
NvRawFileMakernote_unmarshal = _nvrawfile_pinterface.NvRawFileMakernote_unmarshal

def NvRawFileMakernote_size(mc):
    return _nvrawfile_pinterface.NvRawFileMakernote_size(mc)
NvRawFileMakernote_size = _nvrawfile_pinterface.NvRawFileMakernote_size

def NvRawFileMakernote_set(mc, length, newNote):
    return _nvrawfile_pinterface.NvRawFileMakernote_set(mc, length, newNote)
NvRawFileMakernote_set = _nvrawfile_pinterface.NvRawFileMakernote_set

def NvRawFileMakernote_fwrite(mc, f):
    return _nvrawfile_pinterface.NvRawFileMakernote_fwrite(mc, f)
NvRawFileMakernote_fwrite = _nvrawfile_pinterface.NvRawFileMakernote_fwrite

def NvRawFileMakernote_mwrite(mc, dest):
    return _nvrawfile_pinterface.NvRawFileMakernote_mwrite(mc, dest)
NvRawFileMakernote_mwrite = _nvrawfile_pinterface.NvRawFileMakernote_mwrite

def NvRawFileMakernote_delete(mc):
    return _nvrawfile_pinterface.NvRawFileMakernote_delete(mc)
NvRawFileMakernote_delete = _nvrawfile_pinterface.NvRawFileMakernote_delete
class NvRawFileSensorInfo_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileSensorInfo_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileSensorInfo_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileSensorInfo_v1_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileSensorInfo_v1_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileSensorInfo_v1_version_get, _nvrawfile_pinterface.NvRawFileSensorInfo_v1_version_set)
    __swig_setmethods__["sensor"] = _nvrawfile_pinterface.NvRawFileSensorInfo_v1_sensor_set
    __swig_getmethods__["sensor"] = _nvrawfile_pinterface.NvRawFileSensorInfo_v1_sensor_get
    if _newclass:
        sensor = _swig_property(_nvrawfile_pinterface.NvRawFileSensorInfo_v1_sensor_get, _nvrawfile_pinterface.NvRawFileSensorInfo_v1_sensor_set)
    __swig_setmethods__["fuse"] = _nvrawfile_pinterface.NvRawFileSensorInfo_v1_fuse_set
    __swig_getmethods__["fuse"] = _nvrawfile_pinterface.NvRawFileSensorInfo_v1_fuse_get
    if _newclass:
        fuse = _swig_property(_nvrawfile_pinterface.NvRawFileSensorInfo_v1_fuse_get, _nvrawfile_pinterface.NvRawFileSensorInfo_v1_fuse_set)
    __swig_setmethods__["module"] = _nvrawfile_pinterface.NvRawFileSensorInfo_v1_module_set
    __swig_getmethods__["module"] = _nvrawfile_pinterface.NvRawFileSensorInfo_v1_module_get
    if _newclass:
        module = _swig_property(_nvrawfile_pinterface.NvRawFileSensorInfo_v1_module_get, _nvrawfile_pinterface.NvRawFileSensorInfo_v1_module_set)

    def get_sensor(self):
        return _nvrawfile_pinterface.NvRawFileSensorInfo_v1_get_sensor(self)

    def get_fuse(self):
        return _nvrawfile_pinterface.NvRawFileSensorInfo_v1_get_fuse(self)

    def get_module(self):
        return _nvrawfile_pinterface.NvRawFileSensorInfo_v1_get_module(self)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileSensorInfo_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileSensorInfo_v1
    __del__ = lambda self: None
NvRawFileSensorInfo_v1_swigregister = _nvrawfile_pinterface.NvRawFileSensorInfo_v1_swigregister
NvRawFileSensorInfo_v1_swigregister(NvRawFileSensorInfo_v1)
NvRawFileMakernoteChunkUuid = cvar.NvRawFileMakernoteChunkUuid

NVRF_SENSORINFO_VERSION = _nvrawfile_pinterface.NVRF_SENSORINFO_VERSION
class NvRawFileSensorInfoChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileSensorInfoChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileSensorInfoChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileSensorInfoChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileSensorInfoChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileSensorInfoChunk_chunk_get, _nvrawfile_pinterface.NvRawFileSensorInfoChunk_chunk_set)
    __swig_setmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileSensorInfoChunk_unknown_set
    __swig_getmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileSensorInfoChunk_unknown_get
    if _newclass:
        unknown = _swig_property(_nvrawfile_pinterface.NvRawFileSensorInfoChunk_unknown_get, _nvrawfile_pinterface.NvRawFileSensorInfoChunk_unknown_set)
    __swig_setmethods__["sensor"] = _nvrawfile_pinterface.NvRawFileSensorInfoChunk_sensor_set
    __swig_getmethods__["sensor"] = _nvrawfile_pinterface.NvRawFileSensorInfoChunk_sensor_get
    if _newclass:
        sensor = _swig_property(_nvrawfile_pinterface.NvRawFileSensorInfoChunk_sensor_get, _nvrawfile_pinterface.NvRawFileSensorInfoChunk_sensor_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileSensorInfoChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileSensorInfoChunk
    __del__ = lambda self: None
NvRawFileSensorInfoChunk_swigregister = _nvrawfile_pinterface.NvRawFileSensorInfoChunk_swigregister
NvRawFileSensorInfoChunk_swigregister(NvRawFileSensorInfoChunk)


def NvRawFileSensorInfo_new():
    return _nvrawfile_pinterface.NvRawFileSensorInfo_new()
NvRawFileSensorInfo_new = _nvrawfile_pinterface.NvRawFileSensorInfo_new

def NvRawFileSensorInfo_unmarshal(readChunk):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_unmarshal(readChunk)
NvRawFileSensorInfo_unmarshal = _nvrawfile_pinterface.NvRawFileSensorInfo_unmarshal

def NvRawFileSensorInfo_size(sc):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_size(sc)
NvRawFileSensorInfo_size = _nvrawfile_pinterface.NvRawFileSensorInfo_size

def NvRawFileSensorInfo_setSensor(sc, sensorString):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_setSensor(sc, sensorString)
NvRawFileSensorInfo_setSensor = _nvrawfile_pinterface.NvRawFileSensorInfo_setSensor

def NvRawFileSensorInfo_setFuse(sc, fuseString):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_setFuse(sc, fuseString)
NvRawFileSensorInfo_setFuse = _nvrawfile_pinterface.NvRawFileSensorInfo_setFuse

def NvRawFileSensorInfo_setModule(sc, moduleString):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_setModule(sc, moduleString)
NvRawFileSensorInfo_setModule = _nvrawfile_pinterface.NvRawFileSensorInfo_setModule

def NvRawFileSensorInfo_fwrite(sc, f):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_fwrite(sc, f)
NvRawFileSensorInfo_fwrite = _nvrawfile_pinterface.NvRawFileSensorInfo_fwrite

def NvRawFileSensorInfo_mwrite(sc, dest):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_mwrite(sc, dest)
NvRawFileSensorInfo_mwrite = _nvrawfile_pinterface.NvRawFileSensorInfo_mwrite

def NvRawFileSensorInfo_delete(sc):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_delete(sc)
NvRawFileSensorInfo_delete = _nvrawfile_pinterface.NvRawFileSensorInfo_delete

def NvRawFileSensorInfo_getSensor(sc):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_getSensor(sc)
NvRawFileSensorInfo_getSensor = _nvrawfile_pinterface.NvRawFileSensorInfo_getSensor

def NvRawFileSensorInfo_getFuse(sc):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_getFuse(sc)
NvRawFileSensorInfo_getFuse = _nvrawfile_pinterface.NvRawFileSensorInfo_getFuse

def NvRawFileSensorInfo_getModule(sc):
    return _nvrawfile_pinterface.NvRawFileSensorInfo_getModule(sc)
NvRawFileSensorInfo_getModule = _nvrawfile_pinterface.NvRawFileSensorInfo_getModule
class NvRawFileHDRExposureInfo_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileHDRExposureInfo_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileHDRExposureInfo_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbol"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_symbol_set
    __swig_getmethods__["symbol"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_symbol_get
    if _newclass:
        symbol = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_symbol_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_symbol_set)
    __swig_setmethods__["_unused0"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused0_set
    __swig_getmethods__["_unused0"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused0_get
    if _newclass:
        _unused0 = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused0_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused0_set)
    __swig_setmethods__["_unused1"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused1_set
    __swig_getmethods__["_unused1"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused1_get
    if _newclass:
        _unused1 = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused1_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused1_set)
    __swig_setmethods__["_unused2"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused2_set
    __swig_getmethods__["_unused2"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused2_get
    if _newclass:
        _unused2 = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused2_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1__unused2_set)
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_exposureTime_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_exposureTime_set)
    __swig_setmethods__["analogGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_analogGains_set
    __swig_getmethods__["analogGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_analogGains_get
    if _newclass:
        analogGains = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_analogGains_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_analogGains_set)
    __swig_setmethods__["digitalGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_digitalGains_set
    __swig_getmethods__["digitalGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_digitalGains_get
    if _newclass:
        digitalGains = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_digitalGains_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_digitalGains_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileHDRExposureInfo_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileHDRExposureInfo_v1
    __del__ = lambda self: None
NvRawFileHDRExposureInfo_v1_swigregister = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v1_swigregister
NvRawFileHDRExposureInfo_v1_swigregister(NvRawFileHDRExposureInfo_v1)
NvRawFileSensorInfoChunkUuid = cvar.NvRawFileSensorInfoChunkUuid

class NvRawFileHDRExposureInfo_v2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileHDRExposureInfo_v2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileHDRExposureInfo_v2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbol"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_symbol_set
    __swig_getmethods__["symbol"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_symbol_get
    if _newclass:
        symbol = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_symbol_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_symbol_set)
    __swig_setmethods__["_unused0"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused0_set
    __swig_getmethods__["_unused0"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused0_get
    if _newclass:
        _unused0 = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused0_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused0_set)
    __swig_setmethods__["_unused1"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused1_set
    __swig_getmethods__["_unused1"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused1_get
    if _newclass:
        _unused1 = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused1_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused1_set)
    __swig_setmethods__["_unused2"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused2_set
    __swig_getmethods__["_unused2"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused2_get
    if _newclass:
        _unused2 = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused2_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2__unused2_set)
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_exposureTime_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_exposureTime_set)
    __swig_setmethods__["analogGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_analogGains_set
    __swig_getmethods__["analogGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_analogGains_get
    if _newclass:
        analogGains = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_analogGains_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_analogGains_set)
    __swig_setmethods__["digitalGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_digitalGains_set
    __swig_getmethods__["digitalGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_digitalGains_get
    if _newclass:
        digitalGains = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_digitalGains_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_digitalGains_set)
    __swig_setmethods__["awbGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_awbGains_set
    __swig_getmethods__["awbGains"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_awbGains_get
    if _newclass:
        awbGains = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_awbGains_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_awbGains_set)
    __swig_setmethods__["bConversionGain"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_bConversionGain_set
    __swig_getmethods__["bConversionGain"] = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_bConversionGain_get
    if _newclass:
        bConversionGain = _swig_property(_nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_bConversionGain_get, _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_bConversionGain_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileHDRExposureInfo_v2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileHDRExposureInfo_v2
    __del__ = lambda self: None
NvRawFileHDRExposureInfo_v2_swigregister = _nvrawfile_pinterface.NvRawFileHDRExposureInfo_v2_swigregister
NvRawFileHDRExposureInfo_v2_swigregister(NvRawFileHDRExposureInfo_v2)

class NvRawFileHDR_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileHDR_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileHDR_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileHDR_v1_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileHDR_v1_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileHDR_v1_version_get, _nvrawfile_pinterface.NvRawFileHDR_v1_version_set)
    __swig_setmethods__["numberOfExposures"] = _nvrawfile_pinterface.NvRawFileHDR_v1_numberOfExposures_set
    __swig_getmethods__["numberOfExposures"] = _nvrawfile_pinterface.NvRawFileHDR_v1_numberOfExposures_get
    if _newclass:
        numberOfExposures = _swig_property(_nvrawfile_pinterface.NvRawFileHDR_v1_numberOfExposures_get, _nvrawfile_pinterface.NvRawFileHDR_v1_numberOfExposures_set)
    __swig_setmethods__["readoutScheme"] = _nvrawfile_pinterface.NvRawFileHDR_v1_readoutScheme_set
    __swig_getmethods__["readoutScheme"] = _nvrawfile_pinterface.NvRawFileHDR_v1_readoutScheme_get
    if _newclass:
        readoutScheme = _swig_property(_nvrawfile_pinterface.NvRawFileHDR_v1_readoutScheme_get, _nvrawfile_pinterface.NvRawFileHDR_v1_readoutScheme_set)
    __swig_setmethods__["exposureInfos"] = _nvrawfile_pinterface.NvRawFileHDR_v1_exposureInfos_set
    __swig_getmethods__["exposureInfos"] = _nvrawfile_pinterface.NvRawFileHDR_v1_exposureInfos_get
    if _newclass:
        exposureInfos = _swig_property(_nvrawfile_pinterface.NvRawFileHDR_v1_exposureInfos_get, _nvrawfile_pinterface.NvRawFileHDR_v1_exposureInfos_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileHDR_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileHDR_v1
    __del__ = lambda self: None
NvRawFileHDR_v1_swigregister = _nvrawfile_pinterface.NvRawFileHDR_v1_swigregister
NvRawFileHDR_v1_swigregister(NvRawFileHDR_v1)

class NvRawFileHDR_v2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileHDR_v2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileHDR_v2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileHDR_v2_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileHDR_v2_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileHDR_v2_version_get, _nvrawfile_pinterface.NvRawFileHDR_v2_version_set)
    __swig_setmethods__["numberOfExposures"] = _nvrawfile_pinterface.NvRawFileHDR_v2_numberOfExposures_set
    __swig_getmethods__["numberOfExposures"] = _nvrawfile_pinterface.NvRawFileHDR_v2_numberOfExposures_get
    if _newclass:
        numberOfExposures = _swig_property(_nvrawfile_pinterface.NvRawFileHDR_v2_numberOfExposures_get, _nvrawfile_pinterface.NvRawFileHDR_v2_numberOfExposures_set)
    __swig_setmethods__["readoutScheme"] = _nvrawfile_pinterface.NvRawFileHDR_v2_readoutScheme_set
    __swig_getmethods__["readoutScheme"] = _nvrawfile_pinterface.NvRawFileHDR_v2_readoutScheme_get
    if _newclass:
        readoutScheme = _swig_property(_nvrawfile_pinterface.NvRawFileHDR_v2_readoutScheme_get, _nvrawfile_pinterface.NvRawFileHDR_v2_readoutScheme_set)
    __swig_setmethods__["exposureInfos"] = _nvrawfile_pinterface.NvRawFileHDR_v2_exposureInfos_set
    __swig_getmethods__["exposureInfos"] = _nvrawfile_pinterface.NvRawFileHDR_v2_exposureInfos_get
    if _newclass:
        exposureInfos = _swig_property(_nvrawfile_pinterface.NvRawFileHDR_v2_exposureInfos_get, _nvrawfile_pinterface.NvRawFileHDR_v2_exposureInfos_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileHDR_v2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileHDR_v2
    __del__ = lambda self: None
NvRawFileHDR_v2_swigregister = _nvrawfile_pinterface.NvRawFileHDR_v2_swigregister
NvRawFileHDR_v2_swigregister(NvRawFileHDR_v2)

NVRF_HDR_VERSION = _nvrawfile_pinterface.NVRF_HDR_VERSION
class NvRawFileHDRChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileHDRChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileHDRChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileHDRChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileHDRChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileHDRChunk_chunk_get, _nvrawfile_pinterface.NvRawFileHDRChunk_chunk_set)
    __swig_setmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileHDRChunk_unknown_set
    __swig_getmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileHDRChunk_unknown_get
    if _newclass:
        unknown = _swig_property(_nvrawfile_pinterface.NvRawFileHDRChunk_unknown_get, _nvrawfile_pinterface.NvRawFileHDRChunk_unknown_set)
    __swig_setmethods__["hdr"] = _nvrawfile_pinterface.NvRawFileHDRChunk_hdr_set
    __swig_getmethods__["hdr"] = _nvrawfile_pinterface.NvRawFileHDRChunk_hdr_get
    if _newclass:
        hdr = _swig_property(_nvrawfile_pinterface.NvRawFileHDRChunk_hdr_get, _nvrawfile_pinterface.NvRawFileHDRChunk_hdr_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileHDRChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileHDRChunk
    __del__ = lambda self: None
NvRawFileHDRChunk_swigregister = _nvrawfile_pinterface.NvRawFileHDRChunk_swigregister
NvRawFileHDRChunk_swigregister(NvRawFileHDRChunk)


def NvRawFileHDR_new():
    return _nvrawfile_pinterface.NvRawFileHDR_new()
NvRawFileHDR_new = _nvrawfile_pinterface.NvRawFileHDR_new

def NvRawFileHDR_unmarshal(readChunk):
    return _nvrawfile_pinterface.NvRawFileHDR_unmarshal(readChunk)
NvRawFileHDR_unmarshal = _nvrawfile_pinterface.NvRawFileHDR_unmarshal

def NvRawFileHDR_size(hc):
    return _nvrawfile_pinterface.NvRawFileHDR_size(hc)
NvRawFileHDR_size = _nvrawfile_pinterface.NvRawFileHDR_size

def NvRawFileHDR_fwrite(hc, f):
    return _nvrawfile_pinterface.NvRawFileHDR_fwrite(hc, f)
NvRawFileHDR_fwrite = _nvrawfile_pinterface.NvRawFileHDR_fwrite

def NvRawFileHDR_mwrite(hc, dest):
    return _nvrawfile_pinterface.NvRawFileHDR_mwrite(hc, dest)
NvRawFileHDR_mwrite = _nvrawfile_pinterface.NvRawFileHDR_mwrite

def NvRawFileHDR_delete(hc):
    return _nvrawfile_pinterface.NvRawFileHDR_delete(hc)
NvRawFileHDR_delete = _nvrawfile_pinterface.NvRawFileHDR_delete

def NvRawFileHDR_setReadoutScheme(hc, scheme):
    return _nvrawfile_pinterface.NvRawFileHDR_setReadoutScheme(hc, scheme)
NvRawFileHDR_setReadoutScheme = _nvrawfile_pinterface.NvRawFileHDR_setReadoutScheme

def NvRawFileHDR_getReadoutScheme(hc):
    return _nvrawfile_pinterface.NvRawFileHDR_getReadoutScheme(hc)
NvRawFileHDR_getReadoutScheme = _nvrawfile_pinterface.NvRawFileHDR_getReadoutScheme

def NvRawFileHDR_setNumberOfExposures(hc, count):
    return _nvrawfile_pinterface.NvRawFileHDR_setNumberOfExposures(hc, count)
NvRawFileHDR_setNumberOfExposures = _nvrawfile_pinterface.NvRawFileHDR_setNumberOfExposures

def NvRawFileHDR_exposures(hc):
    return _nvrawfile_pinterface.NvRawFileHDR_exposures(hc)
NvRawFileHDR_exposures = _nvrawfile_pinterface.NvRawFileHDR_exposures

def NvRawFileHDR_exposureInfoSize(hc):
    return _nvrawfile_pinterface.NvRawFileHDR_exposureInfoSize(hc)
NvRawFileHDR_exposureInfoSize = _nvrawfile_pinterface.NvRawFileHDR_exposureInfoSize
class NvRawFileWDRExposureInfo_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileWDRExposureInfo_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileWDRExposureInfo_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_exposureTime_set
    __swig_getmethods__["exposureTime"] = _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_exposureTime_get
    if _newclass:
        exposureTime = _swig_property(_nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_exposureTime_get, _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_exposureTime_set)
    __swig_setmethods__["analogGains"] = _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_analogGains_set
    __swig_getmethods__["analogGains"] = _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_analogGains_get
    if _newclass:
        analogGains = _swig_property(_nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_analogGains_get, _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_analogGains_set)
    __swig_setmethods__["digitalGains"] = _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_digitalGains_set
    __swig_getmethods__["digitalGains"] = _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_digitalGains_get
    if _newclass:
        digitalGains = _swig_property(_nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_digitalGains_get, _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_digitalGains_set)
    __swig_setmethods__["awbGains"] = _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_awbGains_set
    __swig_getmethods__["awbGains"] = _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_awbGains_get
    if _newclass:
        awbGains = _swig_property(_nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_awbGains_get, _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_awbGains_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileWDRExposureInfo_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileWDRExposureInfo_v1
    __del__ = lambda self: None
NvRawFileWDRExposureInfo_v1_swigregister = _nvrawfile_pinterface.NvRawFileWDRExposureInfo_v1_swigregister
NvRawFileWDRExposureInfo_v1_swigregister(NvRawFileWDRExposureInfo_v1)
NvRawFileHDRChunkUuid = cvar.NvRawFileHDRChunkUuid

WDR_TYPE_PWL = _nvrawfile_pinterface.WDR_TYPE_PWL
WDR_TYPE_DOL = _nvrawfile_pinterface.WDR_TYPE_DOL
WDR_TYPE_INTERLEAVED = _nvrawfile_pinterface.WDR_TYPE_INTERLEAVED
WDR_TYPE_UNKNOWN = _nvrawfile_pinterface.WDR_TYPE_UNKNOWN
class NvRawFileWDR_Pwl_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileWDR_Pwl_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileWDR_Pwl_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numberOfPoints"] = _nvrawfile_pinterface.NvRawFileWDR_Pwl_v1_numberOfPoints_set
    __swig_getmethods__["numberOfPoints"] = _nvrawfile_pinterface.NvRawFileWDR_Pwl_v1_numberOfPoints_get
    if _newclass:
        numberOfPoints = _swig_property(_nvrawfile_pinterface.NvRawFileWDR_Pwl_v1_numberOfPoints_get, _nvrawfile_pinterface.NvRawFileWDR_Pwl_v1_numberOfPoints_set)
    __swig_setmethods__["points"] = _nvrawfile_pinterface.NvRawFileWDR_Pwl_v1_points_set
    __swig_getmethods__["points"] = _nvrawfile_pinterface.NvRawFileWDR_Pwl_v1_points_get
    if _newclass:
        points = _swig_property(_nvrawfile_pinterface.NvRawFileWDR_Pwl_v1_points_get, _nvrawfile_pinterface.NvRawFileWDR_Pwl_v1_points_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileWDR_Pwl_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileWDR_Pwl_v1
    __del__ = lambda self: None
NvRawFileWDR_Pwl_v1_swigregister = _nvrawfile_pinterface.NvRawFileWDR_Pwl_v1_swigregister
NvRawFileWDR_Pwl_v1_swigregister(NvRawFileWDR_Pwl_v1)

class NvRawFileWDR_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileWDR_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileWDR_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileWDR_v1_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileWDR_v1_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileWDR_v1_version_get, _nvrawfile_pinterface.NvRawFileWDR_v1_version_set)
    __swig_setmethods__["numberOfExposures"] = _nvrawfile_pinterface.NvRawFileWDR_v1_numberOfExposures_set
    __swig_getmethods__["numberOfExposures"] = _nvrawfile_pinterface.NvRawFileWDR_v1_numberOfExposures_get
    if _newclass:
        numberOfExposures = _swig_property(_nvrawfile_pinterface.NvRawFileWDR_v1_numberOfExposures_get, _nvrawfile_pinterface.NvRawFileWDR_v1_numberOfExposures_set)
    __swig_setmethods__["exposureInfos"] = _nvrawfile_pinterface.NvRawFileWDR_v1_exposureInfos_set
    __swig_getmethods__["exposureInfos"] = _nvrawfile_pinterface.NvRawFileWDR_v1_exposureInfos_get
    if _newclass:
        exposureInfos = _swig_property(_nvrawfile_pinterface.NvRawFileWDR_v1_exposureInfos_get, _nvrawfile_pinterface.NvRawFileWDR_v1_exposureInfos_set)
    __swig_setmethods__["type"] = _nvrawfile_pinterface.NvRawFileWDR_v1_type_set
    __swig_getmethods__["type"] = _nvrawfile_pinterface.NvRawFileWDR_v1_type_get
    if _newclass:
        type = _swig_property(_nvrawfile_pinterface.NvRawFileWDR_v1_type_get, _nvrawfile_pinterface.NvRawFileWDR_v1_type_set)
    __swig_setmethods__["pwl"] = _nvrawfile_pinterface.NvRawFileWDR_v1_pwl_set
    __swig_getmethods__["pwl"] = _nvrawfile_pinterface.NvRawFileWDR_v1_pwl_get
    if _newclass:
        pwl = _swig_property(_nvrawfile_pinterface.NvRawFileWDR_v1_pwl_get, _nvrawfile_pinterface.NvRawFileWDR_v1_pwl_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileWDR_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileWDR_v1
    __del__ = lambda self: None
NvRawFileWDR_v1_swigregister = _nvrawfile_pinterface.NvRawFileWDR_v1_swigregister
NvRawFileWDR_v1_swigregister(NvRawFileWDR_v1)

NVRF_WDR_VERSION = _nvrawfile_pinterface.NVRF_WDR_VERSION
class NvRawFileWDRChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileWDRChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileWDRChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileWDRChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileWDRChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileWDRChunk_chunk_get, _nvrawfile_pinterface.NvRawFileWDRChunk_chunk_set)
    __swig_setmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileWDRChunk_unknown_set
    __swig_getmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileWDRChunk_unknown_get
    if _newclass:
        unknown = _swig_property(_nvrawfile_pinterface.NvRawFileWDRChunk_unknown_get, _nvrawfile_pinterface.NvRawFileWDRChunk_unknown_set)
    __swig_setmethods__["wdr"] = _nvrawfile_pinterface.NvRawFileWDRChunk_wdr_set
    __swig_getmethods__["wdr"] = _nvrawfile_pinterface.NvRawFileWDRChunk_wdr_get
    if _newclass:
        wdr = _swig_property(_nvrawfile_pinterface.NvRawFileWDRChunk_wdr_get, _nvrawfile_pinterface.NvRawFileWDRChunk_wdr_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileWDRChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileWDRChunk
    __del__ = lambda self: None
NvRawFileWDRChunk_swigregister = _nvrawfile_pinterface.NvRawFileWDRChunk_swigregister
NvRawFileWDRChunk_swigregister(NvRawFileWDRChunk)


def NvRawFileWDR_new():
    return _nvrawfile_pinterface.NvRawFileWDR_new()
NvRawFileWDR_new = _nvrawfile_pinterface.NvRawFileWDR_new

def NvRawFileWDR_unmarshal(readChunk):
    return _nvrawfile_pinterface.NvRawFileWDR_unmarshal(readChunk)
NvRawFileWDR_unmarshal = _nvrawfile_pinterface.NvRawFileWDR_unmarshal

def NvRawFileWDR_size(wdrc):
    return _nvrawfile_pinterface.NvRawFileWDR_size(wdrc)
NvRawFileWDR_size = _nvrawfile_pinterface.NvRawFileWDR_size

def NvRawFileWDR_fwrite(wdrc, f):
    return _nvrawfile_pinterface.NvRawFileWDR_fwrite(wdrc, f)
NvRawFileWDR_fwrite = _nvrawfile_pinterface.NvRawFileWDR_fwrite

def NvRawFileWDR_mwrite(wdrc, dest):
    return _nvrawfile_pinterface.NvRawFileWDR_mwrite(wdrc, dest)
NvRawFileWDR_mwrite = _nvrawfile_pinterface.NvRawFileWDR_mwrite

def NvRawFileWDR_delete(wdrc):
    return _nvrawfile_pinterface.NvRawFileWDR_delete(wdrc)
NvRawFileWDR_delete = _nvrawfile_pinterface.NvRawFileWDR_delete

def NvRawFileWDR_setNumberOfExposures(wdrc, count):
    return _nvrawfile_pinterface.NvRawFileWDR_setNumberOfExposures(wdrc, count)
NvRawFileWDR_setNumberOfExposures = _nvrawfile_pinterface.NvRawFileWDR_setNumberOfExposures

def NvRawFileWDR_exposures(wdrc):
    return _nvrawfile_pinterface.NvRawFileWDR_exposures(wdrc)
NvRawFileWDR_exposures = _nvrawfile_pinterface.NvRawFileWDR_exposures

def NvRawFileWDR_exposureInfoSize(wdrc):
    return _nvrawfile_pinterface.NvRawFileWDR_exposureInfoSize(wdrc)
NvRawFileWDR_exposureInfoSize = _nvrawfile_pinterface.NvRawFileWDR_exposureInfoSize

def NvRawFileWDR_setNumberOfPwlPoints(wdrc, count):
    return _nvrawfile_pinterface.NvRawFileWDR_setNumberOfPwlPoints(wdrc, count)
NvRawFileWDR_setNumberOfPwlPoints = _nvrawfile_pinterface.NvRawFileWDR_setNumberOfPwlPoints

def NvRawFileWDR_PwlSize(wdrc):
    return _nvrawfile_pinterface.NvRawFileWDR_PwlSize(wdrc)
NvRawFileWDR_PwlSize = _nvrawfile_pinterface.NvRawFileWDR_PwlSize

def NvRawFileWDR_PwlControlPointsSize(wdrc):
    return _nvrawfile_pinterface.NvRawFileWDR_PwlControlPointsSize(wdrc)
NvRawFileWDR_PwlControlPointsSize = _nvrawfile_pinterface.NvRawFileWDR_PwlControlPointsSize

def NvRawFileWDR_PwlControlPoints(wdrc):
    return _nvrawfile_pinterface.NvRawFileWDR_PwlControlPoints(wdrc)
NvRawFileWDR_PwlControlPoints = _nvrawfile_pinterface.NvRawFileWDR_PwlControlPoints
class NvRawFileAperture_v1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileAperture_v1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileAperture_v1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _nvrawfile_pinterface.NvRawFileAperture_v1_version_set
    __swig_getmethods__["version"] = _nvrawfile_pinterface.NvRawFileAperture_v1_version_get
    if _newclass:
        version = _swig_property(_nvrawfile_pinterface.NvRawFileAperture_v1_version_get, _nvrawfile_pinterface.NvRawFileAperture_v1_version_set)
    __swig_setmethods__["motorStep"] = _nvrawfile_pinterface.NvRawFileAperture_v1_motorStep_set
    __swig_getmethods__["motorStep"] = _nvrawfile_pinterface.NvRawFileAperture_v1_motorStep_get
    if _newclass:
        motorStep = _swig_property(_nvrawfile_pinterface.NvRawFileAperture_v1_motorStep_get, _nvrawfile_pinterface.NvRawFileAperture_v1_motorStep_set)
    __swig_setmethods__["fNumber"] = _nvrawfile_pinterface.NvRawFileAperture_v1_fNumber_set
    __swig_getmethods__["fNumber"] = _nvrawfile_pinterface.NvRawFileAperture_v1_fNumber_get
    if _newclass:
        fNumber = _swig_property(_nvrawfile_pinterface.NvRawFileAperture_v1_fNumber_get, _nvrawfile_pinterface.NvRawFileAperture_v1_fNumber_set)
    __swig_setmethods__["motorSpeed"] = _nvrawfile_pinterface.NvRawFileAperture_v1_motorSpeed_set
    __swig_getmethods__["motorSpeed"] = _nvrawfile_pinterface.NvRawFileAperture_v1_motorSpeed_get
    if _newclass:
        motorSpeed = _swig_property(_nvrawfile_pinterface.NvRawFileAperture_v1_motorSpeed_get, _nvrawfile_pinterface.NvRawFileAperture_v1_motorSpeed_set)
    __swig_setmethods__["motorStatus"] = _nvrawfile_pinterface.NvRawFileAperture_v1_motorStatus_set
    __swig_getmethods__["motorStatus"] = _nvrawfile_pinterface.NvRawFileAperture_v1_motorStatus_get
    if _newclass:
        motorStatus = _swig_property(_nvrawfile_pinterface.NvRawFileAperture_v1_motorStatus_get, _nvrawfile_pinterface.NvRawFileAperture_v1_motorStatus_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileAperture_v1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileAperture_v1
    __del__ = lambda self: None
NvRawFileAperture_v1_swigregister = _nvrawfile_pinterface.NvRawFileAperture_v1_swigregister
NvRawFileAperture_v1_swigregister(NvRawFileAperture_v1)
NvRawFileWDRChunkUuid = cvar.NvRawFileWDRChunkUuid

NVRF_APERTURE_VERSION = _nvrawfile_pinterface.NVRF_APERTURE_VERSION
class NvRawFileApertureChunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFileApertureChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFileApertureChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileApertureChunk_chunk_set
    __swig_getmethods__["chunk"] = _nvrawfile_pinterface.NvRawFileApertureChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_nvrawfile_pinterface.NvRawFileApertureChunk_chunk_get, _nvrawfile_pinterface.NvRawFileApertureChunk_chunk_set)
    __swig_setmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileApertureChunk_unknown_set
    __swig_getmethods__["unknown"] = _nvrawfile_pinterface.NvRawFileApertureChunk_unknown_get
    if _newclass:
        unknown = _swig_property(_nvrawfile_pinterface.NvRawFileApertureChunk_unknown_get, _nvrawfile_pinterface.NvRawFileApertureChunk_unknown_set)
    __swig_setmethods__["aperture"] = _nvrawfile_pinterface.NvRawFileApertureChunk_aperture_set
    __swig_getmethods__["aperture"] = _nvrawfile_pinterface.NvRawFileApertureChunk_aperture_get
    if _newclass:
        aperture = _swig_property(_nvrawfile_pinterface.NvRawFileApertureChunk_aperture_get, _nvrawfile_pinterface.NvRawFileApertureChunk_aperture_set)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFileApertureChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFileApertureChunk
    __del__ = lambda self: None
NvRawFileApertureChunk_swigregister = _nvrawfile_pinterface.NvRawFileApertureChunk_swigregister
NvRawFileApertureChunk_swigregister(NvRawFileApertureChunk)


def NvRawFileAperture_new():
    return _nvrawfile_pinterface.NvRawFileAperture_new()
NvRawFileAperture_new = _nvrawfile_pinterface.NvRawFileAperture_new

def NvRawFileAperture_unmarshal(readChunk):
    return _nvrawfile_pinterface.NvRawFileAperture_unmarshal(readChunk)
NvRawFileAperture_unmarshal = _nvrawfile_pinterface.NvRawFileAperture_unmarshal

def NvRawFileAperture_size(ac):
    return _nvrawfile_pinterface.NvRawFileAperture_size(ac)
NvRawFileAperture_size = _nvrawfile_pinterface.NvRawFileAperture_size

def NvRawFileAperture_setMotorStatus(ac, motorStatusString):
    return _nvrawfile_pinterface.NvRawFileAperture_setMotorStatus(ac, motorStatusString)
NvRawFileAperture_setMotorStatus = _nvrawfile_pinterface.NvRawFileAperture_setMotorStatus

def NvRawFileAperture_getMotorStatus(ac):
    return _nvrawfile_pinterface.NvRawFileAperture_getMotorStatus(ac)
NvRawFileAperture_getMotorStatus = _nvrawfile_pinterface.NvRawFileAperture_getMotorStatus

def NvRawFileAperture_fwrite(ac, f):
    return _nvrawfile_pinterface.NvRawFileAperture_fwrite(ac, f)
NvRawFileAperture_fwrite = _nvrawfile_pinterface.NvRawFileAperture_fwrite

def NvRawFileAperture_mwrite(ac, dest):
    return _nvrawfile_pinterface.NvRawFileAperture_mwrite(ac, dest)
NvRawFileAperture_mwrite = _nvrawfile_pinterface.NvRawFileAperture_mwrite

def NvRawFileAperture_delete(ac):
    return _nvrawfile_pinterface.NvRawFileAperture_delete(ac)
NvRawFileAperture_delete = _nvrawfile_pinterface.NvRawFileAperture_delete
class NvRawFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NvRawFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NvRawFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _nvrawfile_pinterface.NvRawFile_header_set
    __swig_getmethods__["header"] = _nvrawfile_pinterface.NvRawFile_header_get
    if _newclass:
        header = _swig_property(_nvrawfile_pinterface.NvRawFile_header_get, _nvrawfile_pinterface.NvRawFile_header_set)
    __swig_setmethods__["data"] = _nvrawfile_pinterface.NvRawFile_data_set
    __swig_getmethods__["data"] = _nvrawfile_pinterface.NvRawFile_data_get
    if _newclass:
        data = _swig_property(_nvrawfile_pinterface.NvRawFile_data_get, _nvrawfile_pinterface.NvRawFile_data_set)
    __swig_setmethods__["numChunks"] = _nvrawfile_pinterface.NvRawFile_numChunks_set
    __swig_getmethods__["numChunks"] = _nvrawfile_pinterface.NvRawFile_numChunks_get
    if _newclass:
        numChunks = _swig_property(_nvrawfile_pinterface.NvRawFile_numChunks_get, _nvrawfile_pinterface.NvRawFile_numChunks_set)
    __swig_setmethods__["rawVersion"] = _nvrawfile_pinterface.NvRawFile_rawVersion_set
    __swig_getmethods__["rawVersion"] = _nvrawfile_pinterface.NvRawFile_rawVersion_get
    if _newclass:
        rawVersion = _swig_property(_nvrawfile_pinterface.NvRawFile_rawVersion_get, _nvrawfile_pinterface.NvRawFile_rawVersion_set)
    __swig_setmethods__["chunks"] = _nvrawfile_pinterface.NvRawFile_chunks_set
    __swig_getmethods__["chunks"] = _nvrawfile_pinterface.NvRawFile_chunks_get
    if _newclass:
        chunks = _swig_property(_nvrawfile_pinterface.NvRawFile_chunks_get, _nvrawfile_pinterface.NvRawFile_chunks_set)

    def get_NvChunkHeader(self, index):
        return _nvrawfile_pinterface.NvRawFile_get_NvChunkHeader(self, index)

    def get_NvRawFileHeader(self, index):
        return _nvrawfile_pinterface.NvRawFile_get_NvRawFileHeader(self, index)

    def get_NvRawFileCapture(self, index):
        return _nvrawfile_pinterface.NvRawFile_get_NvRawFileCapture(self, index)

    def get_NvRawFileCameraState(self, index):
        return _nvrawfile_pinterface.NvRawFile_get_NvRawFileCameraState(self, index)

    def get_NvRawFileSensorInfo(self, index):
        return _nvrawfile_pinterface.NvRawFile_get_NvRawFileSensorInfo(self, index)

    def __init__(self):
        this = _nvrawfile_pinterface.new_NvRawFile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nvrawfile_pinterface.delete_NvRawFile
    __del__ = lambda self: None
NvRawFile_swigregister = _nvrawfile_pinterface.NvRawFile_swigregister
NvRawFile_swigregister(NvRawFile)
NvRawFileApertureChunkUuid = cvar.NvRawFileApertureChunkUuid
NVRF_MAX_CHUNKS = _nvrawfile_pinterface.NVRF_MAX_CHUNKS


def NvRawFile_new():
    return _nvrawfile_pinterface.NvRawFile_new()
NvRawFile_new = _nvrawfile_pinterface.NvRawFile_new

def NvRawFile_readFile(filename):
    return _nvrawfile_pinterface.NvRawFile_readFile(filename)
NvRawFile_readFile = _nvrawfile_pinterface.NvRawFile_readFile

def NvRawFile_delete(nrf):
    return _nvrawfile_pinterface.NvRawFile_delete(nrf)
NvRawFile_delete = _nvrawfile_pinterface.NvRawFile_delete

def NvRawFile_addChunk(nrf, chunk):
    return _nvrawfile_pinterface.NvRawFile_addChunk(nrf, chunk)
NvRawFile_addChunk = _nvrawfile_pinterface.NvRawFile_addChunk

def NvRawFile_deleteChunk(nrf, chunk):
    return _nvrawfile_pinterface.NvRawFile_deleteChunk(nrf, chunk)
NvRawFile_deleteChunk = _nvrawfile_pinterface.NvRawFile_deleteChunk

def NvRawFile_copyChunk(chunk):
    return _nvrawfile_pinterface.NvRawFile_copyChunk(chunk)
NvRawFile_copyChunk = _nvrawfile_pinterface.NvRawFile_copyChunk

def NvRawFile_setHeader(nrf, header):
    return _nvrawfile_pinterface.NvRawFile_setHeader(nrf, header)
NvRawFile_setHeader = _nvrawfile_pinterface.NvRawFile_setHeader

def NvRawFile_setData(nrf, dataChunk):
    return _nvrawfile_pinterface.NvRawFile_setData(nrf, dataChunk)
NvRawFile_setData = _nvrawfile_pinterface.NvRawFile_setData

def NvRawFile_findChunk(nrf, chunkType):
    return _nvrawfile_pinterface.NvRawFile_findChunk(nrf, chunkType)
NvRawFile_findChunk = _nvrawfile_pinterface.NvRawFile_findChunk

def NvRawFile_getSize(nrf):
    return _nvrawfile_pinterface.NvRawFile_getSize(nrf)
NvRawFile_getSize = _nvrawfile_pinterface.NvRawFile_getSize

def NvRawFile_writeFile(nrf, filename):
    return _nvrawfile_pinterface.NvRawFile_writeFile(nrf, filename)
NvRawFile_writeFile = _nvrawfile_pinterface.NvRawFile_writeFile

def NvRawFile_writeMemory(nrf, dest):
    return _nvrawfile_pinterface.NvRawFile_writeMemory(nrf, dest)
NvRawFile_writeMemory = _nvrawfile_pinterface.NvRawFile_writeMemory

def NvRawFile_writeChunkToMemory(chunk, dest):
    return _nvrawfile_pinterface.NvRawFile_writeChunkToMemory(chunk, dest)
NvRawFile_writeChunkToMemory = _nvrawfile_pinterface.NvRawFile_writeChunkToMemory

def NvRawFile_makeHexString(outstr, strLength, data, dataLength):
    return _nvrawfile_pinterface.NvRawFile_makeHexString(outstr, strLength, data, dataLength)
NvRawFile_makeHexString = _nvrawfile_pinterface.NvRawFile_makeHexString

def NvRawFile_getVersion(nrf):
    return _nvrawfile_pinterface.NvRawFile_getVersion(nrf)
NvRawFile_getVersion = _nvrawfile_pinterface.NvRawFile_getVersion

def NvRawFile_getChunk(nrf, chunkType):
    return _nvrawfile_pinterface.NvRawFile_getChunk(nrf, chunkType)
NvRawFile_getChunk = _nvrawfile_pinterface.NvRawFile_getChunk

def NvRawFile_decompress_direct(pLut, height, width, pInData, dataFormat, pOutData, pixelFormat):
    return _nvrawfile_pinterface.NvRawFile_decompress_direct(pLut, height, width, pInData, dataFormat, pOutData, pixelFormat)
NvRawFile_decompress_direct = _nvrawfile_pinterface.NvRawFile_decompress_direct

def NvRawFile_decompress(pLut, height, width, pInData, dataFormat, pOutDataChunk, pixelFormat):
    return _nvrawfile_pinterface.NvRawFile_decompress(pLut, height, width, pInData, dataFormat, pOutDataChunk, pixelFormat)
NvRawFile_decompress = _nvrawfile_pinterface.NvRawFile_decompress

def SWIG_init():
    return _nvrawfile_pinterface.SWIG_init()
SWIG_init = _nvrawfile_pinterface.SWIG_init
# This file is compatible with both classic and new-style classes.


